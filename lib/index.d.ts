import { AddressLike, BaseContract, BigNumberish, BytesLike, ContractDeployTransaction, ContractFactory, ContractMethod, ContractRunner, ContractTransaction, ContractTransactionResponse, DeferredTopicFilter, EventFragment, EventLog, FunctionFragment, Interface, Listener, LogDescription, Provider, Result, Signer, TransactionRequest, Typed } from 'ethers';
import { SignerWithAddress } from 'ethers-opt';

export interface TypedDeferredTopicFilter<_TCEvent extends TypedContractEvent> extends DeferredTopicFilter {
}
export interface TypedContractEvent<InputTuple extends Array<any> = any, OutputTuple extends Array<any> = any, OutputObject = any> {
	(...args: Partial<InputTuple>): TypedDeferredTopicFilter<TypedContractEvent<InputTuple, OutputTuple, OutputObject>>;
	name: string;
	fragment: EventFragment;
	getFragment(...args: Partial<InputTuple>): EventFragment;
}
export type __TypechainAOutputTuple<T> = T extends TypedContractEvent<infer _U, infer W> ? W : never;
export type __TypechainOutputObject<T> = T extends TypedContractEvent<infer _U, infer _W, infer V> ? V : never;
export interface TypedEventLog<TCEvent extends TypedContractEvent> extends Omit<EventLog, "args"> {
	args: __TypechainAOutputTuple<TCEvent> & __TypechainOutputObject<TCEvent>;
}
export interface TypedLogDescription<TCEvent extends TypedContractEvent> extends Omit<LogDescription, "args"> {
	args: __TypechainAOutputTuple<TCEvent> & __TypechainOutputObject<TCEvent>;
}
export type TypedListener<TCEvent extends TypedContractEvent> = (...listenerArg: [
	...__TypechainAOutputTuple<TCEvent>,
	TypedEventLog<TCEvent>,
	...undefined[]
]) => void;
export type StateMutability = "nonpayable" | "payable" | "view";
export type BaseOverrides = Omit<TransactionRequest, "to" | "data">;
export type NonPayableOverrides = Omit<BaseOverrides, "value" | "blockTag" | "enableCcipRead">;
export type PayableOverrides = Omit<BaseOverrides, "blockTag" | "enableCcipRead">;
export type ViewOverrides = Omit<TransactionRequest, "to" | "data">;
export type Overrides<S extends StateMutability> = S extends "nonpayable" ? NonPayableOverrides : S extends "payable" ? PayableOverrides : ViewOverrides;
export type PostfixOverrides<A extends Array<any>, S extends StateMutability> = A | [
	...A,
	Overrides<S>
];
export type ContractMethodArgs<A extends Array<any>, S extends StateMutability> = PostfixOverrides<{
	[I in keyof A]-?: A[I] | Typed;
}, S>;
export type DefaultReturnType<R> = R extends Array<any> ? R[0] : R;
export interface TypedContractMethod<A extends Array<any> = Array<any>, R = any, S extends StateMutability = "payable"> {
	(...args: ContractMethodArgs<A, S>): S extends "view" ? Promise<DefaultReturnType<R>> : Promise<ContractTransactionResponse>;
	name: string;
	fragment: FunctionFragment;
	getFragment(...args: ContractMethodArgs<A, S>): FunctionFragment;
	populateTransaction(...args: ContractMethodArgs<A, S>): Promise<ContractTransaction>;
	staticCall(...args: ContractMethodArgs<A, "view">): Promise<DefaultReturnType<R>>;
	send(...args: ContractMethodArgs<A, S>): Promise<ContractTransactionResponse>;
	estimateGas(...args: ContractMethodArgs<A, S>): Promise<bigint>;
	staticCallResult(...args: ContractMethodArgs<A, "view">): Promise<R>;
}
export interface OwnableInterface extends Interface {
	getFunction(nameOrSignature: "owner" | "renounceOwnership" | "transferOwnership"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
	encodeFunctionData(functionFragment: "transferOwnership", values: [
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace OwnershipTransferredEvent {
	type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike
	];
	type OutputTuple = [
		previousOwner: string,
		newOwner: string
	];
	interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface Ownable extends BaseContract {
	connect(runner?: ContractRunner | null): Ownable;
	waitForDeployment(): Promise<this>;
	interface: OwnableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	owner: TypedContractMethod<[
	], [
		string
	], "view">;
	renounceOwnership: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	transferOwnership: TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "owner"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
	filters: {
		"OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
		OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent.InputTuple, OwnershipTransferredEvent.OutputTuple, OwnershipTransferredEvent.OutputObject>;
	};
}
export interface IERC1363Interface extends Interface {
	getFunction(nameOrSignature: "allowance" | "approve" | "approveAndCall(address,uint256)" | "approveAndCall(address,uint256,bytes)" | "balanceOf" | "supportsInterface" | "totalSupply" | "transfer" | "transferAndCall(address,uint256)" | "transferAndCall(address,uint256,bytes)" | "transferFrom" | "transferFromAndCall(address,address,uint256,bytes)" | "transferFromAndCall(address,address,uint256)"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "approveAndCall(address,uint256)", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "approveAndCall(address,uint256,bytes)", values: [
		AddressLike,
		BigNumberish,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "supportsInterface", values: [
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferAndCall(address,uint256)", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferAndCall(address,uint256,bytes)", values: [
		AddressLike,
		BigNumberish,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFromAndCall(address,address,uint256,bytes)", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "transferFromAndCall(address,address,uint256)", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approveAndCall(address,uint256)", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approveAndCall(address,uint256,bytes)", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferAndCall(address,uint256)", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferAndCall(address,uint256,bytes)", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFromAndCall(address,address,uint256,bytes)", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFromAndCall(address,address,uint256)", data: BytesLike): Result;
}
declare namespace ApprovalEvent {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IERC1363 extends BaseContract {
	connect(runner?: ContractRunner | null): IERC1363;
	waitForDeployment(): Promise<this>;
	interface: IERC1363Interface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	"approveAndCall(address,uint256)": TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	"approveAndCall(address,uint256,bytes)": TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish,
		data: BytesLike
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	supportsInterface: TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	"transferAndCall(address,uint256)": TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	"transferAndCall(address,uint256,bytes)": TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish,
		data: BytesLike
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	"transferFromAndCall(address,address,uint256,bytes)": TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish,
		data: BytesLike
	], [
		boolean
	], "nonpayable">;
	"transferFromAndCall(address,address,uint256)": TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "approveAndCall(address,uint256)"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "approveAndCall(address,uint256,bytes)"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish,
		data: BytesLike
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferAndCall(address,uint256)"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferAndCall(address,uint256,bytes)"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish,
		data: BytesLike
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFromAndCall(address,address,uint256,bytes)"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish,
		data: BytesLike
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFromAndCall(address,address,uint256)"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent.InputTuple, ApprovalEvent.OutputTuple, ApprovalEvent.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent.InputTuple, TransferEvent.OutputTuple, TransferEvent.OutputObject>;
	};
}
export interface IERC1967Interface extends Interface {
	getEvent(nameOrSignatureOrTopic: "AdminChanged" | "BeaconUpgraded" | "Upgraded"): EventFragment;
}
declare namespace AdminChangedEvent {
	type InputTuple = [
		previousAdmin: AddressLike,
		newAdmin: AddressLike
	];
	type OutputTuple = [
		previousAdmin: string,
		newAdmin: string
	];
	interface OutputObject {
		previousAdmin: string;
		newAdmin: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace BeaconUpgradedEvent {
	type InputTuple = [
		beacon: AddressLike
	];
	type OutputTuple = [
		beacon: string
	];
	interface OutputObject {
		beacon: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace UpgradedEvent {
	type InputTuple = [
		implementation: AddressLike
	];
	type OutputTuple = [
		implementation: string
	];
	interface OutputObject {
		implementation: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IERC1967 extends BaseContract {
	connect(runner?: ContractRunner | null): IERC1967;
	waitForDeployment(): Promise<this>;
	interface: IERC1967Interface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getEvent(key: "AdminChanged"): TypedContractEvent<AdminChangedEvent.InputTuple, AdminChangedEvent.OutputTuple, AdminChangedEvent.OutputObject>;
	getEvent(key: "BeaconUpgraded"): TypedContractEvent<BeaconUpgradedEvent.InputTuple, BeaconUpgradedEvent.OutputTuple, BeaconUpgradedEvent.OutputObject>;
	getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
	filters: {
		"AdminChanged(address,address)": TypedContractEvent<AdminChangedEvent.InputTuple, AdminChangedEvent.OutputTuple, AdminChangedEvent.OutputObject>;
		AdminChanged: TypedContractEvent<AdminChangedEvent.InputTuple, AdminChangedEvent.OutputTuple, AdminChangedEvent.OutputObject>;
		"BeaconUpgraded(address)": TypedContractEvent<BeaconUpgradedEvent.InputTuple, BeaconUpgradedEvent.OutputTuple, BeaconUpgradedEvent.OutputObject>;
		BeaconUpgraded: TypedContractEvent<BeaconUpgradedEvent.InputTuple, BeaconUpgradedEvent.OutputTuple, BeaconUpgradedEvent.OutputObject>;
		"Upgraded(address)": TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
		Upgraded: TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
	};
}
export interface IERC4626Interface extends Interface {
	getFunction(nameOrSignature: "allowance" | "approve" | "asset" | "balanceOf" | "convertToAssets" | "convertToShares" | "decimals" | "deposit" | "maxDeposit" | "maxMint" | "maxRedeem" | "maxWithdraw" | "mint" | "name" | "previewDeposit" | "previewMint" | "previewRedeem" | "previewWithdraw" | "redeem" | "symbol" | "totalAssets" | "totalSupply" | "transfer" | "transferFrom" | "withdraw"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Deposit" | "Transfer" | "Withdraw"): EventFragment;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "asset", values?: undefined): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "convertToAssets", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "convertToShares", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "deposit", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxDeposit", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxMint", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxRedeem", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxWithdraw", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "mint", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "previewDeposit", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewMint", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewRedeem", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewWithdraw", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "redeem", values: [
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalAssets", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "convertToAssets", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "convertToShares", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewRedeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalAssets", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace ApprovalEvent$1 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace DepositEvent {
	type InputTuple = [
		sender: AddressLike,
		owner: AddressLike,
		assets: BigNumberish,
		shares: BigNumberish
	];
	type OutputTuple = [
		sender: string,
		owner: string,
		assets: bigint,
		shares: bigint
	];
	interface OutputObject {
		sender: string;
		owner: string;
		assets: bigint;
		shares: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$1 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent {
	type InputTuple = [
		sender: AddressLike,
		receiver: AddressLike,
		owner: AddressLike,
		assets: BigNumberish,
		shares: BigNumberish
	];
	type OutputTuple = [
		sender: string,
		receiver: string,
		owner: string,
		assets: bigint,
		shares: bigint
	];
	interface OutputObject {
		sender: string;
		receiver: string;
		owner: string;
		assets: bigint;
		shares: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IERC4626 extends BaseContract {
	connect(runner?: ContractRunner | null): IERC4626;
	waitForDeployment(): Promise<this>;
	interface: IERC4626Interface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	asset: TypedContractMethod<[
	], [
		string
	], "view">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	convertToAssets: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	convertToShares: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	deposit: TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	maxDeposit: TypedContractMethod<[
		receiver: AddressLike
	], [
		bigint
	], "view">;
	maxMint: TypedContractMethod<[
		receiver: AddressLike
	], [
		bigint
	], "view">;
	maxRedeem: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	maxWithdraw: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	mint: TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	previewDeposit: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	previewMint: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	previewRedeem: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	previewWithdraw: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	redeem: TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalAssets: TypedContractMethod<[
	], [
		bigint
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	withdraw: TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "asset"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "convertToAssets"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "convertToShares"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "maxDeposit"): TypedContractMethod<[
		receiver: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxMint"): TypedContractMethod<[
		receiver: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxRedeem"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxWithdraw"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "mint"): TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "previewDeposit"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewMint"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewRedeem"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewWithdraw"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "redeem"): TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalAssets"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$1.InputTuple, ApprovalEvent$1.OutputTuple, ApprovalEvent$1.OutputObject>;
	getEvent(key: "Deposit"): TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$1.InputTuple, TransferEvent$1.OutputTuple, TransferEvent$1.OutputObject>;
	getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$1.InputTuple, ApprovalEvent$1.OutputTuple, ApprovalEvent$1.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$1.InputTuple, ApprovalEvent$1.OutputTuple, ApprovalEvent$1.OutputObject>;
		"Deposit(address,address,uint256,uint256)": TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
		Deposit: TypedContractEvent<DepositEvent.InputTuple, DepositEvent.OutputTuple, DepositEvent.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$1.InputTuple, TransferEvent$1.OutputTuple, TransferEvent$1.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$1.InputTuple, TransferEvent$1.OutputTuple, TransferEvent$1.OutputObject>;
		"Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
		Withdraw: TypedContractEvent<WithdrawEvent.InputTuple, WithdrawEvent.OutputTuple, WithdrawEvent.OutputObject>;
	};
}
export interface IERC5267Interface extends Interface {
	getFunction(nameOrSignature: "eip712Domain"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
	encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
	decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
}
declare namespace EIP712DomainChangedEvent {
	type InputTuple = [
	];
	type OutputTuple = [
	];
	interface OutputObject {
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IERC5267 extends BaseContract {
	connect(runner?: ContractRunner | null): IERC5267;
	waitForDeployment(): Promise<this>;
	interface: IERC5267Interface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	eip712Domain: TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "eip712Domain"): TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getEvent(key: "EIP712DomainChanged"): TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
	filters: {
		"EIP712DomainChanged()": TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
		EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent.InputTuple, EIP712DomainChangedEvent.OutputTuple, EIP712DomainChangedEvent.OutputObject>;
	};
}
export interface IERC1155ErrorsInterface extends Interface {
}
export interface IERC1155Errors extends BaseContract {
	connect(runner?: ContractRunner | null): IERC1155Errors;
	waitForDeployment(): Promise<this>;
	interface: IERC1155ErrorsInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface IERC20ErrorsInterface extends Interface {
}
export interface IERC20Errors extends BaseContract {
	connect(runner?: ContractRunner | null): IERC20Errors;
	waitForDeployment(): Promise<this>;
	interface: IERC20ErrorsInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface IERC721ErrorsInterface extends Interface {
}
export interface IERC721Errors extends BaseContract {
	connect(runner?: ContractRunner | null): IERC721Errors;
	waitForDeployment(): Promise<this>;
	interface: IERC721ErrorsInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface ClonesInterface extends Interface {
}
export interface Clones extends BaseContract {
	connect(runner?: ContractRunner | null): Clones;
	waitForDeployment(): Promise<this>;
	interface: ClonesInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface ERC1967UtilsInterface extends Interface {
}
export interface ERC1967Utils extends BaseContract {
	connect(runner?: ContractRunner | null): ERC1967Utils;
	waitForDeployment(): Promise<this>;
	interface: ERC1967UtilsInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface ProxyInterface extends Interface {
}
interface Proxy$1 extends BaseContract {
	connect(runner?: ContractRunner | null): Proxy$1;
	waitForDeployment(): Promise<this>;
	interface: ProxyInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface IBeaconInterface extends Interface {
	getFunction(nameOrSignature: "implementation"): FunctionFragment;
	encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
	decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
}
export interface IBeacon extends BaseContract {
	connect(runner?: ContractRunner | null): IBeacon;
	waitForDeployment(): Promise<this>;
	interface: IBeaconInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	implementation: TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "implementation"): TypedContractMethod<[
	], [
		string
	], "view">;
	filters: {};
}
export interface ERC20Interface extends Interface {
	getFunction(nameOrSignature: "allowance" | "approve" | "balanceOf" | "decimals" | "name" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$2 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$2 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface ERC20 extends BaseContract {
	connect(runner?: ContractRunner | null): ERC20;
	waitForDeployment(): Promise<this>;
	interface: ERC20Interface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$2.InputTuple, ApprovalEvent$2.OutputTuple, ApprovalEvent$2.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$2.InputTuple, TransferEvent$2.OutputTuple, TransferEvent$2.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$2.InputTuple, ApprovalEvent$2.OutputTuple, ApprovalEvent$2.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$2.InputTuple, ApprovalEvent$2.OutputTuple, ApprovalEvent$2.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$2.InputTuple, TransferEvent$2.OutputTuple, TransferEvent$2.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$2.InputTuple, TransferEvent$2.OutputTuple, TransferEvent$2.OutputObject>;
	};
}
export interface IERC20Interface extends Interface {
	getFunction(nameOrSignature: "allowance" | "approve" | "balanceOf" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$3 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$3 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IERC20 extends BaseContract {
	connect(runner?: ContractRunner | null): IERC20;
	waitForDeployment(): Promise<this>;
	interface: IERC20Interface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$3.InputTuple, ApprovalEvent$3.OutputTuple, ApprovalEvent$3.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$3.InputTuple, TransferEvent$3.OutputTuple, TransferEvent$3.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$3.InputTuple, ApprovalEvent$3.OutputTuple, ApprovalEvent$3.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$3.InputTuple, ApprovalEvent$3.OutputTuple, ApprovalEvent$3.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$3.InputTuple, TransferEvent$3.OutputTuple, TransferEvent$3.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$3.InputTuple, TransferEvent$3.OutputTuple, TransferEvent$3.OutputObject>;
	};
}
export interface ERC20BurnableInterface extends Interface {
	getFunction(nameOrSignature: "allowance" | "approve" | "balanceOf" | "burn" | "burnFrom" | "decimals" | "name" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "burn", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "burnFrom", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$4 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$4 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface ERC20Burnable extends BaseContract {
	connect(runner?: ContractRunner | null): ERC20Burnable;
	waitForDeployment(): Promise<this>;
	interface: ERC20BurnableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	burn: TypedContractMethod<[
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	burnFrom: TypedContractMethod<[
		account: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "burn"): TypedContractMethod<[
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "burnFrom"): TypedContractMethod<[
		account: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$4.InputTuple, ApprovalEvent$4.OutputTuple, ApprovalEvent$4.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$4.InputTuple, TransferEvent$4.OutputTuple, TransferEvent$4.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$4.InputTuple, ApprovalEvent$4.OutputTuple, ApprovalEvent$4.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$4.InputTuple, ApprovalEvent$4.OutputTuple, ApprovalEvent$4.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$4.InputTuple, TransferEvent$4.OutputTuple, TransferEvent$4.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$4.InputTuple, TransferEvent$4.OutputTuple, TransferEvent$4.OutputObject>;
	};
}
export interface ERC20PermitInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "allowance" | "approve" | "balanceOf" | "decimals" | "eip712Domain" | "name" | "nonces" | "permit" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "EIP712DomainChanged" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$5 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace EIP712DomainChangedEvent$1 {
	type InputTuple = [
	];
	type OutputTuple = [
	];
	interface OutputObject {
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$5 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface ERC20Permit extends BaseContract {
	connect(runner?: ContractRunner | null): ERC20Permit;
	waitForDeployment(): Promise<this>;
	interface: ERC20PermitInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	eip712Domain: TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "eip712Domain"): TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$5.InputTuple, ApprovalEvent$5.OutputTuple, ApprovalEvent$5.OutputObject>;
	getEvent(key: "EIP712DomainChanged"): TypedContractEvent<EIP712DomainChangedEvent$1.InputTuple, EIP712DomainChangedEvent$1.OutputTuple, EIP712DomainChangedEvent$1.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$5.InputTuple, TransferEvent$5.OutputTuple, TransferEvent$5.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$5.InputTuple, ApprovalEvent$5.OutputTuple, ApprovalEvent$5.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$5.InputTuple, ApprovalEvent$5.OutputTuple, ApprovalEvent$5.OutputObject>;
		"EIP712DomainChanged()": TypedContractEvent<EIP712DomainChangedEvent$1.InputTuple, EIP712DomainChangedEvent$1.OutputTuple, EIP712DomainChangedEvent$1.OutputObject>;
		EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent$1.InputTuple, EIP712DomainChangedEvent$1.OutputTuple, EIP712DomainChangedEvent$1.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$5.InputTuple, TransferEvent$5.OutputTuple, TransferEvent$5.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$5.InputTuple, TransferEvent$5.OutputTuple, TransferEvent$5.OutputObject>;
	};
}
export interface IERC20MetadataInterface extends Interface {
	getFunction(nameOrSignature: "allowance" | "approve" | "balanceOf" | "decimals" | "name" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$6 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$6 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IERC20Metadata extends BaseContract {
	connect(runner?: ContractRunner | null): IERC20Metadata;
	waitForDeployment(): Promise<this>;
	interface: IERC20MetadataInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$6.InputTuple, ApprovalEvent$6.OutputTuple, ApprovalEvent$6.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$6.InputTuple, TransferEvent$6.OutputTuple, TransferEvent$6.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$6.InputTuple, ApprovalEvent$6.OutputTuple, ApprovalEvent$6.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$6.InputTuple, ApprovalEvent$6.OutputTuple, ApprovalEvent$6.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$6.InputTuple, TransferEvent$6.OutputTuple, TransferEvent$6.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$6.InputTuple, TransferEvent$6.OutputTuple, TransferEvent$6.OutputObject>;
	};
}
export interface IERC20PermitInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "nonces" | "permit"): FunctionFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
}
export interface IERC20Permit extends BaseContract {
	connect(runner?: ContractRunner | null): IERC20Permit;
	waitForDeployment(): Promise<this>;
	interface: IERC20PermitInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	filters: {};
}
export interface SafeERC20Interface extends Interface {
}
export interface SafeERC20 extends BaseContract {
	connect(runner?: ContractRunner | null): SafeERC20;
	waitForDeployment(): Promise<this>;
	interface: SafeERC20Interface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface AddressInterface extends Interface {
}
export interface Address extends BaseContract {
	connect(runner?: ContractRunner | null): Address;
	waitForDeployment(): Promise<this>;
	interface: AddressInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface Create2Interface extends Interface {
}
export interface Create2 extends BaseContract {
	connect(runner?: ContractRunner | null): Create2;
	waitForDeployment(): Promise<this>;
	interface: Create2Interface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface ErrorsInterface extends Interface {
}
export interface Errors extends BaseContract {
	connect(runner?: ContractRunner | null): Errors;
	waitForDeployment(): Promise<this>;
	interface: ErrorsInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface NoncesInterface extends Interface {
	getFunction(nameOrSignature: "nonces"): FunctionFragment;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
}
export interface Nonces extends BaseContract {
	connect(runner?: ContractRunner | null): Nonces;
	waitForDeployment(): Promise<this>;
	interface: NoncesInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	filters: {};
}
export interface ShortStringsInterface extends Interface {
}
export interface ShortStrings extends BaseContract {
	connect(runner?: ContractRunner | null): ShortStrings;
	waitForDeployment(): Promise<this>;
	interface: ShortStringsInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface StringsInterface extends Interface {
}
export interface Strings extends BaseContract {
	connect(runner?: ContractRunner | null): Strings;
	waitForDeployment(): Promise<this>;
	interface: StringsInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface ECDSAInterface extends Interface {
}
export interface ECDSA extends BaseContract {
	connect(runner?: ContractRunner | null): ECDSA;
	waitForDeployment(): Promise<this>;
	interface: ECDSAInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface EIP712Interface extends Interface {
	getFunction(nameOrSignature: "eip712Domain"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
	encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
	decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
}
declare namespace EIP712DomainChangedEvent$2 {
	type InputTuple = [
	];
	type OutputTuple = [
	];
	interface OutputObject {
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface EIP712 extends BaseContract {
	connect(runner?: ContractRunner | null): EIP712;
	waitForDeployment(): Promise<this>;
	interface: EIP712Interface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	eip712Domain: TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "eip712Domain"): TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getEvent(key: "EIP712DomainChanged"): TypedContractEvent<EIP712DomainChangedEvent$2.InputTuple, EIP712DomainChangedEvent$2.OutputTuple, EIP712DomainChangedEvent$2.OutputObject>;
	filters: {
		"EIP712DomainChanged()": TypedContractEvent<EIP712DomainChangedEvent$2.InputTuple, EIP712DomainChangedEvent$2.OutputTuple, EIP712DomainChangedEvent$2.OutputObject>;
		EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent$2.InputTuple, EIP712DomainChangedEvent$2.OutputTuple, EIP712DomainChangedEvent$2.OutputObject>;
	};
}
export interface ERC165Interface extends Interface {
	getFunction(nameOrSignature: "supportsInterface"): FunctionFragment;
	encodeFunctionData(functionFragment: "supportsInterface", values: [
		BytesLike
	]): string;
	decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
}
export interface ERC165 extends BaseContract {
	connect(runner?: ContractRunner | null): ERC165;
	waitForDeployment(): Promise<this>;
	interface: ERC165Interface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	supportsInterface: TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	filters: {};
}
export interface IERC165Interface extends Interface {
	getFunction(nameOrSignature: "supportsInterface"): FunctionFragment;
	encodeFunctionData(functionFragment: "supportsInterface", values: [
		BytesLike
	]): string;
	decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
}
export interface IERC165 extends BaseContract {
	connect(runner?: ContractRunner | null): IERC165;
	waitForDeployment(): Promise<this>;
	interface: IERC165Interface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	supportsInterface: TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	filters: {};
}
export interface SafeCastInterface extends Interface {
}
export interface SafeCast extends BaseContract {
	connect(runner?: ContractRunner | null): SafeCast;
	waitForDeployment(): Promise<this>;
	interface: SafeCastInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface OwnableUpgradeableInterface extends Interface {
	getFunction(nameOrSignature: "owner" | "renounceOwnership" | "transferOwnership"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred"): EventFragment;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
	encodeFunctionData(functionFragment: "transferOwnership", values: [
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace InitializedEvent {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$1 {
	type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike
	];
	type OutputTuple = [
		previousOwner: string,
		newOwner: string
	];
	interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface OwnableUpgradeable extends BaseContract {
	connect(runner?: ContractRunner | null): OwnableUpgradeable;
	waitForDeployment(): Promise<this>;
	interface: OwnableUpgradeableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	owner: TypedContractMethod<[
	], [
		string
	], "view">;
	renounceOwnership: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	transferOwnership: TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "owner"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
	getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$1.InputTuple, OwnershipTransferredEvent$1.OutputTuple, OwnershipTransferredEvent$1.OutputObject>;
	filters: {
		"Initialized(uint64)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
		"OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$1.InputTuple, OwnershipTransferredEvent$1.OutputTuple, OwnershipTransferredEvent$1.OutputObject>;
		OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$1.InputTuple, OwnershipTransferredEvent$1.OutputTuple, OwnershipTransferredEvent$1.OutputObject>;
	};
}
export interface InitializableInterface extends Interface {
	getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
declare namespace InitializedEvent$1 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface Initializable extends BaseContract {
	connect(runner?: ContractRunner | null): Initializable;
	waitForDeployment(): Promise<this>;
	interface: InitializableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$1.InputTuple, InitializedEvent$1.OutputTuple, InitializedEvent$1.OutputObject>;
	filters: {
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$1.InputTuple, InitializedEvent$1.OutputTuple, InitializedEvent$1.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$1.InputTuple, InitializedEvent$1.OutputTuple, InitializedEvent$1.OutputObject>;
	};
}
export interface ERC20UpgradeableInterface extends Interface {
	getFunction(nameOrSignature: "allowance" | "approve" | "balanceOf" | "decimals" | "name" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Initialized" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$7 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$2 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$7 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface ERC20Upgradeable extends BaseContract {
	connect(runner?: ContractRunner | null): ERC20Upgradeable;
	waitForDeployment(): Promise<this>;
	interface: ERC20UpgradeableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$7.InputTuple, ApprovalEvent$7.OutputTuple, ApprovalEvent$7.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$2.InputTuple, InitializedEvent$2.OutputTuple, InitializedEvent$2.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$7.InputTuple, TransferEvent$7.OutputTuple, TransferEvent$7.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$7.InputTuple, ApprovalEvent$7.OutputTuple, ApprovalEvent$7.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$7.InputTuple, ApprovalEvent$7.OutputTuple, ApprovalEvent$7.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$2.InputTuple, InitializedEvent$2.OutputTuple, InitializedEvent$2.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$2.InputTuple, InitializedEvent$2.OutputTuple, InitializedEvent$2.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$7.InputTuple, TransferEvent$7.OutputTuple, TransferEvent$7.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$7.InputTuple, TransferEvent$7.OutputTuple, TransferEvent$7.OutputObject>;
	};
}
export interface ERC20PermitUpgradeableInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "allowance" | "approve" | "balanceOf" | "decimals" | "eip712Domain" | "name" | "nonces" | "permit" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "EIP712DomainChanged" | "Initialized" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$8 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace EIP712DomainChangedEvent$3 {
	type InputTuple = [
	];
	type OutputTuple = [
	];
	interface OutputObject {
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$3 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$8 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface ERC20PermitUpgradeable extends BaseContract {
	connect(runner?: ContractRunner | null): ERC20PermitUpgradeable;
	waitForDeployment(): Promise<this>;
	interface: ERC20PermitUpgradeableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	eip712Domain: TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "eip712Domain"): TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$8.InputTuple, ApprovalEvent$8.OutputTuple, ApprovalEvent$8.OutputObject>;
	getEvent(key: "EIP712DomainChanged"): TypedContractEvent<EIP712DomainChangedEvent$3.InputTuple, EIP712DomainChangedEvent$3.OutputTuple, EIP712DomainChangedEvent$3.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$3.InputTuple, InitializedEvent$3.OutputTuple, InitializedEvent$3.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$8.InputTuple, TransferEvent$8.OutputTuple, TransferEvent$8.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$8.InputTuple, ApprovalEvent$8.OutputTuple, ApprovalEvent$8.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$8.InputTuple, ApprovalEvent$8.OutputTuple, ApprovalEvent$8.OutputObject>;
		"EIP712DomainChanged()": TypedContractEvent<EIP712DomainChangedEvent$3.InputTuple, EIP712DomainChangedEvent$3.OutputTuple, EIP712DomainChangedEvent$3.OutputObject>;
		EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent$3.InputTuple, EIP712DomainChangedEvent$3.OutputTuple, EIP712DomainChangedEvent$3.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$3.InputTuple, InitializedEvent$3.OutputTuple, InitializedEvent$3.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$3.InputTuple, InitializedEvent$3.OutputTuple, InitializedEvent$3.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$8.InputTuple, TransferEvent$8.OutputTuple, TransferEvent$8.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$8.InputTuple, TransferEvent$8.OutputTuple, TransferEvent$8.OutputObject>;
	};
}
export interface ERC4626UpgradeableInterface extends Interface {
	getFunction(nameOrSignature: "allowance" | "approve" | "asset" | "balanceOf" | "convertToAssets" | "convertToShares" | "decimals" | "deposit" | "maxDeposit" | "maxMint" | "maxRedeem" | "maxWithdraw" | "mint" | "name" | "previewDeposit" | "previewMint" | "previewRedeem" | "previewWithdraw" | "redeem" | "symbol" | "totalAssets" | "totalSupply" | "transfer" | "transferFrom" | "withdraw"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Deposit" | "Initialized" | "Transfer" | "Withdraw"): EventFragment;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "asset", values?: undefined): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "convertToAssets", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "convertToShares", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "deposit", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxDeposit", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxMint", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxRedeem", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxWithdraw", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "mint", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "previewDeposit", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewMint", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewRedeem", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewWithdraw", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "redeem", values: [
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalAssets", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "convertToAssets", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "convertToShares", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewRedeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalAssets", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace ApprovalEvent$9 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace DepositEvent$1 {
	type InputTuple = [
		sender: AddressLike,
		owner: AddressLike,
		assets: BigNumberish,
		shares: BigNumberish
	];
	type OutputTuple = [
		sender: string,
		owner: string,
		assets: bigint,
		shares: bigint
	];
	interface OutputObject {
		sender: string;
		owner: string;
		assets: bigint;
		shares: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$4 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$9 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$1 {
	type InputTuple = [
		sender: AddressLike,
		receiver: AddressLike,
		owner: AddressLike,
		assets: BigNumberish,
		shares: BigNumberish
	];
	type OutputTuple = [
		sender: string,
		receiver: string,
		owner: string,
		assets: bigint,
		shares: bigint
	];
	interface OutputObject {
		sender: string;
		receiver: string;
		owner: string;
		assets: bigint;
		shares: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface ERC4626Upgradeable extends BaseContract {
	connect(runner?: ContractRunner | null): ERC4626Upgradeable;
	waitForDeployment(): Promise<this>;
	interface: ERC4626UpgradeableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	asset: TypedContractMethod<[
	], [
		string
	], "view">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	convertToAssets: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	convertToShares: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	deposit: TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	maxDeposit: TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	maxMint: TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	maxRedeem: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	maxWithdraw: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	mint: TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	previewDeposit: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	previewMint: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	previewRedeem: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	previewWithdraw: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	redeem: TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalAssets: TypedContractMethod<[
	], [
		bigint
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	withdraw: TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "asset"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "convertToAssets"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "convertToShares"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "maxDeposit"): TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxMint"): TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxRedeem"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxWithdraw"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "mint"): TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "previewDeposit"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewMint"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewRedeem"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewWithdraw"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "redeem"): TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalAssets"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$9.InputTuple, ApprovalEvent$9.OutputTuple, ApprovalEvent$9.OutputObject>;
	getEvent(key: "Deposit"): TypedContractEvent<DepositEvent$1.InputTuple, DepositEvent$1.OutputTuple, DepositEvent$1.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$4.InputTuple, InitializedEvent$4.OutputTuple, InitializedEvent$4.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$9.InputTuple, TransferEvent$9.OutputTuple, TransferEvent$9.OutputObject>;
	getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$1.InputTuple, WithdrawEvent$1.OutputTuple, WithdrawEvent$1.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$9.InputTuple, ApprovalEvent$9.OutputTuple, ApprovalEvent$9.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$9.InputTuple, ApprovalEvent$9.OutputTuple, ApprovalEvent$9.OutputObject>;
		"Deposit(address,address,uint256,uint256)": TypedContractEvent<DepositEvent$1.InputTuple, DepositEvent$1.OutputTuple, DepositEvent$1.OutputObject>;
		Deposit: TypedContractEvent<DepositEvent$1.InputTuple, DepositEvent$1.OutputTuple, DepositEvent$1.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$4.InputTuple, InitializedEvent$4.OutputTuple, InitializedEvent$4.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$4.InputTuple, InitializedEvent$4.OutputTuple, InitializedEvent$4.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$9.InputTuple, TransferEvent$9.OutputTuple, TransferEvent$9.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$9.InputTuple, TransferEvent$9.OutputTuple, TransferEvent$9.OutputObject>;
		"Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<WithdrawEvent$1.InputTuple, WithdrawEvent$1.OutputTuple, WithdrawEvent$1.OutputObject>;
		Withdraw: TypedContractEvent<WithdrawEvent$1.InputTuple, WithdrawEvent$1.OutputTuple, WithdrawEvent$1.OutputObject>;
	};
}
export interface ContextUpgradeableInterface extends Interface {
	getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
declare namespace InitializedEvent$5 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface ContextUpgradeable extends BaseContract {
	connect(runner?: ContractRunner | null): ContextUpgradeable;
	waitForDeployment(): Promise<this>;
	interface: ContextUpgradeableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$5.InputTuple, InitializedEvent$5.OutputTuple, InitializedEvent$5.OutputObject>;
	filters: {
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$5.InputTuple, InitializedEvent$5.OutputTuple, InitializedEvent$5.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$5.InputTuple, InitializedEvent$5.OutputTuple, InitializedEvent$5.OutputObject>;
	};
}
export interface NoncesUpgradeableInterface extends Interface {
	getFunction(nameOrSignature: "nonces"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
}
declare namespace InitializedEvent$6 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface NoncesUpgradeable extends BaseContract {
	connect(runner?: ContractRunner | null): NoncesUpgradeable;
	waitForDeployment(): Promise<this>;
	interface: NoncesUpgradeableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$6.InputTuple, InitializedEvent$6.OutputTuple, InitializedEvent$6.OutputObject>;
	filters: {
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$6.InputTuple, InitializedEvent$6.OutputTuple, InitializedEvent$6.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$6.InputTuple, InitializedEvent$6.OutputTuple, InitializedEvent$6.OutputObject>;
	};
}
export interface ReentrancyGuardUpgradeableInterface extends Interface {
	getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}
declare namespace InitializedEvent$7 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface ReentrancyGuardUpgradeable extends BaseContract {
	connect(runner?: ContractRunner | null): ReentrancyGuardUpgradeable;
	waitForDeployment(): Promise<this>;
	interface: ReentrancyGuardUpgradeableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$7.InputTuple, InitializedEvent$7.OutputTuple, InitializedEvent$7.OutputObject>;
	filters: {
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$7.InputTuple, InitializedEvent$7.OutputTuple, InitializedEvent$7.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$7.InputTuple, InitializedEvent$7.OutputTuple, InitializedEvent$7.OutputObject>;
	};
}
export interface EIP712UpgradeableInterface extends Interface {
	getFunction(nameOrSignature: "eip712Domain"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged" | "Initialized"): EventFragment;
	encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
	decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
}
declare namespace EIP712DomainChangedEvent$4 {
	type InputTuple = [
	];
	type OutputTuple = [
	];
	interface OutputObject {
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$8 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface EIP712Upgradeable extends BaseContract {
	connect(runner?: ContractRunner | null): EIP712Upgradeable;
	waitForDeployment(): Promise<this>;
	interface: EIP712UpgradeableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	eip712Domain: TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "eip712Domain"): TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getEvent(key: "EIP712DomainChanged"): TypedContractEvent<EIP712DomainChangedEvent$4.InputTuple, EIP712DomainChangedEvent$4.OutputTuple, EIP712DomainChangedEvent$4.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$8.InputTuple, InitializedEvent$8.OutputTuple, InitializedEvent$8.OutputObject>;
	filters: {
		"EIP712DomainChanged()": TypedContractEvent<EIP712DomainChangedEvent$4.InputTuple, EIP712DomainChangedEvent$4.OutputTuple, EIP712DomainChangedEvent$4.OutputObject>;
		EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent$4.InputTuple, EIP712DomainChangedEvent$4.OutputTuple, EIP712DomainChangedEvent$4.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$8.InputTuple, InitializedEvent$8.OutputTuple, InitializedEvent$8.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$8.InputTuple, InitializedEvent$8.OutputTuple, InitializedEvent$8.OutputObject>;
	};
}
export interface LockInterface extends Interface {
	getFunction(nameOrSignature: "owner" | "unlockTime" | "withdraw"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "unlockTime", values?: undefined): string;
	encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace WithdrawalEvent {
	type InputTuple = [
		amount: BigNumberish,
		when: BigNumberish
	];
	type OutputTuple = [
		amount: bigint,
		when: bigint
	];
	interface OutputObject {
		amount: bigint;
		when: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
interface Lock$1 extends BaseContract {
	connect(runner?: ContractRunner | null): Lock$1;
	waitForDeployment(): Promise<this>;
	interface: LockInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	owner: TypedContractMethod<[
	], [
		string
	], "view">;
	unlockTime: TypedContractMethod<[
	], [
		bigint
	], "view">;
	withdraw: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "owner"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "unlockTime"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getEvent(key: "Withdrawal"): TypedContractEvent<WithdrawalEvent.InputTuple, WithdrawalEvent.OutputTuple, WithdrawalEvent.OutputObject>;
	filters: {
		"Withdrawal(uint256,uint256)": TypedContractEvent<WithdrawalEvent.InputTuple, WithdrawalEvent.OutputTuple, WithdrawalEvent.OutputObject>;
		Withdrawal: TypedContractEvent<WithdrawalEvent.InputTuple, WithdrawalEvent.OutputTuple, WithdrawalEvent.OutputObject>;
	};
}
export interface IDataFeedInterface extends Interface {
	getFunction(nameOrSignature: "asset" | "decimals" | "deploymentTimestamp" | "description" | "getAnswer" | "getRoundData" | "getTimestamp" | "getTimestampAnswer" | "initializeFeed" | "latestAnswer" | "latestRound" | "latestRoundData" | "latestTimestamp" | "setAsset" | "setDescription" | "setVersion" | "updateAnswer" | "version"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "AnswerUpdated" | "NewAsset" | "NewDescription" | "NewRound"): EventFragment;
	encodeFunctionData(functionFragment: "asset", values?: undefined): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "deploymentTimestamp", values?: undefined): string;
	encodeFunctionData(functionFragment: "description", values?: undefined): string;
	encodeFunctionData(functionFragment: "getAnswer", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getRoundData", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getTimestamp", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getTimestampAnswer", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "initializeFeed", values: [
		AddressLike,
		AddressLike,
		string,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "latestAnswer", values?: undefined): string;
	encodeFunctionData(functionFragment: "latestRound", values?: undefined): string;
	encodeFunctionData(functionFragment: "latestRoundData", values?: undefined): string;
	encodeFunctionData(functionFragment: "latestTimestamp", values?: undefined): string;
	encodeFunctionData(functionFragment: "setAsset", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "setDescription", values: [
		string
	]): string;
	encodeFunctionData(functionFragment: "setVersion", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "updateAnswer", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "version", values?: undefined): string;
	decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deploymentTimestamp", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "description", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getRoundData", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getTimestamp", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getTimestampAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeFeed", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestRound", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestRoundData", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestTimestamp", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setAsset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setDescription", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "updateAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
declare namespace AnswerUpdatedEvent {
	type InputTuple = [
		current: BigNumberish,
		roundId: BigNumberish,
		updatedAt: BigNumberish
	];
	type OutputTuple = [
		current: bigint,
		roundId: bigint,
		updatedAt: bigint
	];
	interface OutputObject {
		current: bigint;
		roundId: bigint;
		updatedAt: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewAssetEvent {
	type InputTuple = [
		asset: AddressLike
	];
	type OutputTuple = [
		asset: string
	];
	interface OutputObject {
		asset: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewDescriptionEvent {
	type InputTuple = [
		description: string
	];
	type OutputTuple = [
		description: string
	];
	interface OutputObject {
		description: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewRoundEvent {
	type InputTuple = [
		roundId: BigNumberish,
		startedBy: AddressLike,
		startedAt: BigNumberish
	];
	type OutputTuple = [
		roundId: bigint,
		startedBy: string,
		startedAt: bigint
	];
	interface OutputObject {
		roundId: bigint;
		startedBy: string;
		startedAt: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IDataFeed extends BaseContract {
	connect(runner?: ContractRunner | null): IDataFeed;
	waitForDeployment(): Promise<this>;
	interface: IDataFeedInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	asset: TypedContractMethod<[
	], [
		string
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	deploymentTimestamp: TypedContractMethod<[
	], [
		bigint
	], "view">;
	description: TypedContractMethod<[
	], [
		string
	], "view">;
	getAnswer: TypedContractMethod<[
		_roundId: BigNumberish
	], [
		bigint
	], "view">;
	getRoundData: TypedContractMethod<[
		_roundId: BigNumberish
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		] & {
			roundId: bigint;
			answer: bigint;
			startedAt: bigint;
			updatedAt: bigint;
			answeredInRound: bigint;
		}
	], "view">;
	getTimestamp: TypedContractMethod<[
		_roundId: BigNumberish
	], [
		bigint
	], "view">;
	getTimestampAnswer: TypedContractMethod<[
		_timestamp: BigNumberish
	], [
		bigint
	], "view">;
	initializeFeed: TypedContractMethod<[
		_initOwner: AddressLike,
		_asset: AddressLike,
		_description: string,
		_initAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	latestAnswer: TypedContractMethod<[
	], [
		bigint
	], "view">;
	latestRound: TypedContractMethod<[
	], [
		bigint
	], "view">;
	latestRoundData: TypedContractMethod<[
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		]
	], "view">;
	latestTimestamp: TypedContractMethod<[
	], [
		bigint
	], "view">;
	setAsset: TypedContractMethod<[
		_asset: AddressLike
	], [
		void
	], "nonpayable">;
	setDescription: TypedContractMethod<[
		_description: string
	], [
		void
	], "nonpayable">;
	setVersion: TypedContractMethod<[
		_version: BigNumberish
	], [
		void
	], "nonpayable">;
	updateAnswer: TypedContractMethod<[
		newAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	version: TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "asset"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "deploymentTimestamp"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "description"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "getAnswer"): TypedContractMethod<[
		_roundId: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getRoundData"): TypedContractMethod<[
		_roundId: BigNumberish
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		] & {
			roundId: bigint;
			answer: bigint;
			startedAt: bigint;
			updatedAt: bigint;
			answeredInRound: bigint;
		}
	], "view">;
	getFunction(nameOrSignature: "getTimestamp"): TypedContractMethod<[
		_roundId: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getTimestampAnswer"): TypedContractMethod<[
		_timestamp: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "initializeFeed"): TypedContractMethod<[
		_initOwner: AddressLike,
		_asset: AddressLike,
		_description: string,
		_initAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "latestAnswer"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "latestRound"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "latestRoundData"): TypedContractMethod<[
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		]
	], "view">;
	getFunction(nameOrSignature: "latestTimestamp"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "setAsset"): TypedContractMethod<[
		_asset: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setDescription"): TypedContractMethod<[
		_description: string
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setVersion"): TypedContractMethod<[
		_version: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "updateAnswer"): TypedContractMethod<[
		newAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "version"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getEvent(key: "AnswerUpdated"): TypedContractEvent<AnswerUpdatedEvent.InputTuple, AnswerUpdatedEvent.OutputTuple, AnswerUpdatedEvent.OutputObject>;
	getEvent(key: "NewAsset"): TypedContractEvent<NewAssetEvent.InputTuple, NewAssetEvent.OutputTuple, NewAssetEvent.OutputObject>;
	getEvent(key: "NewDescription"): TypedContractEvent<NewDescriptionEvent.InputTuple, NewDescriptionEvent.OutputTuple, NewDescriptionEvent.OutputObject>;
	getEvent(key: "NewRound"): TypedContractEvent<NewRoundEvent.InputTuple, NewRoundEvent.OutputTuple, NewRoundEvent.OutputObject>;
	filters: {
		"AnswerUpdated(int256,uint256,uint256)": TypedContractEvent<AnswerUpdatedEvent.InputTuple, AnswerUpdatedEvent.OutputTuple, AnswerUpdatedEvent.OutputObject>;
		AnswerUpdated: TypedContractEvent<AnswerUpdatedEvent.InputTuple, AnswerUpdatedEvent.OutputTuple, AnswerUpdatedEvent.OutputObject>;
		"NewAsset(address)": TypedContractEvent<NewAssetEvent.InputTuple, NewAssetEvent.OutputTuple, NewAssetEvent.OutputObject>;
		NewAsset: TypedContractEvent<NewAssetEvent.InputTuple, NewAssetEvent.OutputTuple, NewAssetEvent.OutputObject>;
		"NewDescription(string)": TypedContractEvent<NewDescriptionEvent.InputTuple, NewDescriptionEvent.OutputTuple, NewDescriptionEvent.OutputObject>;
		NewDescription: TypedContractEvent<NewDescriptionEvent.InputTuple, NewDescriptionEvent.OutputTuple, NewDescriptionEvent.OutputObject>;
		"NewRound(uint256,address,uint256)": TypedContractEvent<NewRoundEvent.InputTuple, NewRoundEvent.OutputTuple, NewRoundEvent.OutputObject>;
		NewRound: TypedContractEvent<NewRoundEvent.InputTuple, NewRoundEvent.OutputTuple, NewRoundEvent.OutputObject>;
	};
}
export interface IERC20ExpInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "allowance" | "approve" | "balanceOf" | "decimals" | "name" | "nonces" | "permit" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$10 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$10 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IERC20Exp extends BaseContract {
	connect(runner?: ContractRunner | null): IERC20Exp;
	waitForDeployment(): Promise<this>;
	interface: IERC20ExpInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$10.InputTuple, ApprovalEvent$10.OutputTuple, ApprovalEvent$10.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$10.InputTuple, TransferEvent$10.OutputTuple, TransferEvent$10.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$10.InputTuple, ApprovalEvent$10.OutputTuple, ApprovalEvent$10.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$10.InputTuple, ApprovalEvent$10.OutputTuple, ApprovalEvent$10.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$10.InputTuple, TransferEvent$10.OutputTuple, TransferEvent$10.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$10.InputTuple, TransferEvent$10.OutputTuple, TransferEvent$10.OutputObject>;
	};
}
export interface IERC20MintableInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "allowance" | "approve" | "balanceOf" | "burn" | "burnFrom" | "decimals" | "mint" | "name" | "nonces" | "permit" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "burn", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "burnFrom", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "mint", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$11 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$11 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IERC20Mintable extends BaseContract {
	connect(runner?: ContractRunner | null): IERC20Mintable;
	waitForDeployment(): Promise<this>;
	interface: IERC20MintableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	burn: TypedContractMethod<[
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	burnFrom: TypedContractMethod<[
		account: AddressLike,
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	mint: TypedContractMethod<[
		to: AddressLike,
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "burn"): TypedContractMethod<[
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "burnFrom"): TypedContractMethod<[
		account: AddressLike,
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "mint"): TypedContractMethod<[
		to: AddressLike,
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$11.InputTuple, ApprovalEvent$11.OutputTuple, ApprovalEvent$11.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$11.InputTuple, TransferEvent$11.OutputTuple, TransferEvent$11.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$11.InputTuple, ApprovalEvent$11.OutputTuple, ApprovalEvent$11.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$11.InputTuple, ApprovalEvent$11.OutputTuple, ApprovalEvent$11.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$11.InputTuple, TransferEvent$11.OutputTuple, TransferEvent$11.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$11.InputTuple, TransferEvent$11.OutputTuple, TransferEvent$11.OutputObject>;
	};
}
export interface IERC20LockableInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "allowance" | "approve" | "balanceOf" | "decimals" | "isLocked" | "isLockedUntil" | "lock" | "lockPermit" | "lockedUntil" | "name" | "nonces" | "permit" | "supportsInterface" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Lock" | "LockedBy" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "isLocked", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "isLockedUntil", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "lock", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "lockPermit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "lockedUntil", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "supportsInterface", values: [
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "isLockedUntil", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "lockPermit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "lockedUntil", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$12 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace LockEvent {
	type InputTuple = [
		owner: AddressLike,
		until: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		until: bigint
	];
	interface OutputObject {
		owner: string;
		until: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace LockedByEvent {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		until: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		until: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		until: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$12 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IERC20Lockable extends BaseContract {
	connect(runner?: ContractRunner | null): IERC20Lockable;
	waitForDeployment(): Promise<this>;
	interface: IERC20LockableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	isLocked: TypedContractMethod<[
		owner: AddressLike
	], [
		boolean
	], "view">;
	isLockedUntil: TypedContractMethod<[
		owner: AddressLike,
		until: BigNumberish
	], [
		boolean
	], "view">;
	lock: TypedContractMethod<[
		until: BigNumberish
	], [
		void
	], "nonpayable">;
	lockPermit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		until: BigNumberish,
		deadline: BigNumberish,
		signature: BytesLike
	], [
		void
	], "nonpayable">;
	lockedUntil: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	supportsInterface: TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "isLocked"): TypedContractMethod<[
		owner: AddressLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "isLockedUntil"): TypedContractMethod<[
		owner: AddressLike,
		until: BigNumberish
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "lock"): TypedContractMethod<[
		until: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "lockPermit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		until: BigNumberish,
		deadline: BigNumberish,
		signature: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "lockedUntil"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$12.InputTuple, ApprovalEvent$12.OutputTuple, ApprovalEvent$12.OutputObject>;
	getEvent(key: "Lock"): TypedContractEvent<LockEvent.InputTuple, LockEvent.OutputTuple, LockEvent.OutputObject>;
	getEvent(key: "LockedBy"): TypedContractEvent<LockedByEvent.InputTuple, LockedByEvent.OutputTuple, LockedByEvent.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$12.InputTuple, TransferEvent$12.OutputTuple, TransferEvent$12.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$12.InputTuple, ApprovalEvent$12.OutputTuple, ApprovalEvent$12.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$12.InputTuple, ApprovalEvent$12.OutputTuple, ApprovalEvent$12.OutputObject>;
		"Lock(address,uint256)": TypedContractEvent<LockEvent.InputTuple, LockEvent.OutputTuple, LockEvent.OutputObject>;
		Lock: TypedContractEvent<LockEvent.InputTuple, LockEvent.OutputTuple, LockEvent.OutputObject>;
		"LockedBy(address,address,uint256)": TypedContractEvent<LockedByEvent.InputTuple, LockedByEvent.OutputTuple, LockedByEvent.OutputObject>;
		LockedBy: TypedContractEvent<LockedByEvent.InputTuple, LockedByEvent.OutputTuple, LockedByEvent.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$12.InputTuple, TransferEvent$12.OutputTuple, TransferEvent$12.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$12.InputTuple, TransferEvent$12.OutputTuple, TransferEvent$12.OutputObject>;
	};
}
interface IERC4626Interface$1 extends Interface {
	getFunction(nameOrSignature: "allowance" | "approve" | "asset" | "balanceOf" | "convertToAssets" | "convertToShares" | "deposit" | "maxDeposit" | "maxMint" | "maxRedeem" | "maxWithdraw" | "mint" | "previewDeposit" | "previewMint" | "previewRedeem" | "previewWithdraw" | "redeem" | "totalAssets" | "totalSupply" | "transfer" | "transferFrom" | "withdraw"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Deposit" | "Transfer" | "Withdraw"): EventFragment;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "asset", values?: undefined): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "convertToAssets", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "convertToShares", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "deposit", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxDeposit", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxMint", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxRedeem", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxWithdraw", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "mint", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "previewDeposit", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewMint", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewRedeem", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewWithdraw", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "redeem", values: [
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "totalAssets", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "convertToAssets", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "convertToShares", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewRedeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalAssets", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace ApprovalEvent$13 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace DepositEvent$2 {
	type InputTuple = [
		sender: AddressLike,
		receiver: AddressLike,
		assets: BigNumberish,
		shares: BigNumberish
	];
	type OutputTuple = [
		sender: string,
		receiver: string,
		assets: bigint,
		shares: bigint
	];
	interface OutputObject {
		sender: string;
		receiver: string;
		assets: bigint;
		shares: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$13 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$2 {
	type InputTuple = [
		sender: AddressLike,
		receiver: AddressLike,
		assets: BigNumberish,
		shares: BigNumberish
	];
	type OutputTuple = [
		sender: string,
		receiver: string,
		assets: bigint,
		shares: bigint
	];
	interface OutputObject {
		sender: string;
		receiver: string;
		assets: bigint;
		shares: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
interface IERC4626$1 extends BaseContract {
	connect(runner?: ContractRunner | null): IERC4626$1;
	waitForDeployment(): Promise<this>;
	interface: IERC4626Interface$1;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	asset: TypedContractMethod<[
	], [
		string
	], "view">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	convertToAssets: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	convertToShares: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	deposit: TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	maxDeposit: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	maxMint: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	maxRedeem: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	maxWithdraw: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	mint: TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	previewDeposit: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	previewMint: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	previewRedeem: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	previewWithdraw: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	redeem: TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	totalAssets: TypedContractMethod<[
	], [
		bigint
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	withdraw: TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "asset"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "convertToAssets"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "convertToShares"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "maxDeposit"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxMint"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxRedeem"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxWithdraw"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "mint"): TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "previewDeposit"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewMint"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewRedeem"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewWithdraw"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "redeem"): TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "totalAssets"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$13.InputTuple, ApprovalEvent$13.OutputTuple, ApprovalEvent$13.OutputObject>;
	getEvent(key: "Deposit"): TypedContractEvent<DepositEvent$2.InputTuple, DepositEvent$2.OutputTuple, DepositEvent$2.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$13.InputTuple, TransferEvent$13.OutputTuple, TransferEvent$13.OutputObject>;
	getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$2.InputTuple, WithdrawEvent$2.OutputTuple, WithdrawEvent$2.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$13.InputTuple, ApprovalEvent$13.OutputTuple, ApprovalEvent$13.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$13.InputTuple, ApprovalEvent$13.OutputTuple, ApprovalEvent$13.OutputObject>;
		"Deposit(address,address,uint256,uint256)": TypedContractEvent<DepositEvent$2.InputTuple, DepositEvent$2.OutputTuple, DepositEvent$2.OutputObject>;
		Deposit: TypedContractEvent<DepositEvent$2.InputTuple, DepositEvent$2.OutputTuple, DepositEvent$2.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$13.InputTuple, TransferEvent$13.OutputTuple, TransferEvent$13.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$13.InputTuple, TransferEvent$13.OutputTuple, TransferEvent$13.OutputObject>;
		"Withdraw(address,address,uint256,uint256)": TypedContractEvent<WithdrawEvent$2.InputTuple, WithdrawEvent$2.OutputTuple, WithdrawEvent$2.OutputObject>;
		Withdraw: TypedContractEvent<WithdrawEvent$2.InputTuple, WithdrawEvent$2.OutputTuple, WithdrawEvent$2.OutputObject>;
	};
}
export interface IERC4626PoolInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "allowance" | "approve" | "asset" | "balanceOf" | "convertToAssets" | "convertToShares" | "decimals" | "deposit" | "initializeToken" | "masterBurn" | "masterMint" | "maxDeposit" | "maxMint" | "maxRedeem" | "maxWithdraw" | "mint" | "name" | "nonces" | "permit" | "previewDeposit" | "previewMint" | "previewRedeem" | "previewWithdraw" | "redeem" | "symbol" | "totalAssets" | "totalSupply" | "transfer" | "transferFrom" | "withdraw"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Deposit" | "Transfer" | "Withdraw"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "asset", values?: undefined): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "convertToAssets", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "convertToShares", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "deposit", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "initializeToken", values: [
		AddressLike,
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "masterBurn", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "masterMint", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "maxDeposit", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxMint", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxRedeem", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxWithdraw", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "mint", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "previewDeposit", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewMint", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewRedeem", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewWithdraw", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "redeem", values: [
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalAssets", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "convertToAssets", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "convertToShares", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "masterBurn", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "masterMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewRedeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalAssets", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace ApprovalEvent$14 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace DepositEvent$3 {
	type InputTuple = [
		sender: AddressLike,
		receiver: AddressLike,
		assets: BigNumberish,
		shares: BigNumberish
	];
	type OutputTuple = [
		sender: string,
		receiver: string,
		assets: bigint,
		shares: bigint
	];
	interface OutputObject {
		sender: string;
		receiver: string;
		assets: bigint;
		shares: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$14 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$3 {
	type InputTuple = [
		sender: AddressLike,
		receiver: AddressLike,
		assets: BigNumberish,
		shares: BigNumberish
	];
	type OutputTuple = [
		sender: string,
		receiver: string,
		assets: bigint,
		shares: bigint
	];
	interface OutputObject {
		sender: string;
		receiver: string;
		assets: bigint;
		shares: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IERC4626Pool extends BaseContract {
	connect(runner?: ContractRunner | null): IERC4626Pool;
	waitForDeployment(): Promise<this>;
	interface: IERC4626PoolInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	asset: TypedContractMethod<[
	], [
		string
	], "view">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	convertToAssets: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	convertToShares: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	deposit: TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	initializeToken: TypedContractMethod<[
		_masterPool: AddressLike,
		_pid: BigNumberish,
		_asset: AddressLike,
		_rewardToken: AddressLike
	], [
		void
	], "nonpayable">;
	masterBurn: TypedContractMethod<[
		from: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	masterMint: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	maxDeposit: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	maxMint: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	maxRedeem: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	maxWithdraw: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	mint: TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	previewDeposit: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	previewMint: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	previewRedeem: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	previewWithdraw: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	redeem: TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalAssets: TypedContractMethod<[
	], [
		bigint
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	withdraw: TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "asset"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "convertToAssets"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "convertToShares"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "initializeToken"): TypedContractMethod<[
		_masterPool: AddressLike,
		_pid: BigNumberish,
		_asset: AddressLike,
		_rewardToken: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "masterBurn"): TypedContractMethod<[
		from: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "masterMint"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "maxDeposit"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxMint"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxRedeem"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxWithdraw"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "mint"): TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "previewDeposit"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewMint"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewRedeem"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewWithdraw"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "redeem"): TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalAssets"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$14.InputTuple, ApprovalEvent$14.OutputTuple, ApprovalEvent$14.OutputObject>;
	getEvent(key: "Deposit"): TypedContractEvent<DepositEvent$3.InputTuple, DepositEvent$3.OutputTuple, DepositEvent$3.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$14.InputTuple, TransferEvent$14.OutputTuple, TransferEvent$14.OutputObject>;
	getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$3.InputTuple, WithdrawEvent$3.OutputTuple, WithdrawEvent$3.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$14.InputTuple, ApprovalEvent$14.OutputTuple, ApprovalEvent$14.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$14.InputTuple, ApprovalEvent$14.OutputTuple, ApprovalEvent$14.OutputObject>;
		"Deposit(address,address,uint256,uint256)": TypedContractEvent<DepositEvent$3.InputTuple, DepositEvent$3.OutputTuple, DepositEvent$3.OutputObject>;
		Deposit: TypedContractEvent<DepositEvent$3.InputTuple, DepositEvent$3.OutputTuple, DepositEvent$3.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$14.InputTuple, TransferEvent$14.OutputTuple, TransferEvent$14.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$14.InputTuple, TransferEvent$14.OutputTuple, TransferEvent$14.OutputObject>;
		"Withdraw(address,address,uint256,uint256)": TypedContractEvent<WithdrawEvent$3.InputTuple, WithdrawEvent$3.OutputTuple, WithdrawEvent$3.OutputObject>;
		Withdraw: TypedContractEvent<WithdrawEvent$3.InputTuple, WithdrawEvent$3.OutputTuple, WithdrawEvent$3.OutputObject>;
	};
}
export interface IInitializableProxyInterface extends Interface {
	getFunction(nameOrSignature: "changeProxyAdmin" | "changeProxyDescription" | "implementation" | "initializeProxy" | "proxyAdmin" | "proxyDescription" | "upgradeToAndCall"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "DescriptionChanged"): EventFragment;
	encodeFunctionData(functionFragment: "changeProxyAdmin", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "changeProxyDescription", values: [
		string
	]): string;
	encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
	encodeFunctionData(functionFragment: "initializeProxy", values: [
		string,
		AddressLike,
		AddressLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "proxyAdmin", values?: undefined): string;
	encodeFunctionData(functionFragment: "proxyDescription", values?: undefined): string;
	encodeFunctionData(functionFragment: "upgradeToAndCall", values: [
		AddressLike,
		BytesLike
	]): string;
	decodeFunctionResult(functionFragment: "changeProxyAdmin", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "changeProxyDescription", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeProxy", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "proxyAdmin", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "proxyDescription", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
}
declare namespace DescriptionChangedEvent {
	type InputTuple = [
		description: string
	];
	type OutputTuple = [
		description: string
	];
	interface OutputObject {
		description: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IInitializableProxy extends BaseContract {
	connect(runner?: ContractRunner | null): IInitializableProxy;
	waitForDeployment(): Promise<this>;
	interface: IInitializableProxyInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	changeProxyAdmin: TypedContractMethod<[
		newAdmin: AddressLike
	], [
		void
	], "nonpayable">;
	changeProxyDescription: TypedContractMethod<[
		_description: string
	], [
		void
	], "nonpayable">;
	implementation: TypedContractMethod<[
	], [
		string
	], "view">;
	initializeProxy: TypedContractMethod<[
		_description: string,
		newAdmin: AddressLike,
		newImplementation: AddressLike,
		data: BytesLike
	], [
		void
	], "payable">;
	proxyAdmin: TypedContractMethod<[
	], [
		string
	], "view">;
	proxyDescription: TypedContractMethod<[
	], [
		string
	], "view">;
	upgradeToAndCall: TypedContractMethod<[
		newImplementation: AddressLike,
		data: BytesLike
	], [
		void
	], "payable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "changeProxyAdmin"): TypedContractMethod<[
		newAdmin: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "changeProxyDescription"): TypedContractMethod<[
		_description: string
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "implementation"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "initializeProxy"): TypedContractMethod<[
		_description: string,
		newAdmin: AddressLike,
		newImplementation: AddressLike,
		data: BytesLike
	], [
		void
	], "payable">;
	getFunction(nameOrSignature: "proxyAdmin"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "proxyDescription"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "upgradeToAndCall"): TypedContractMethod<[
		newImplementation: AddressLike,
		data: BytesLike
	], [
		void
	], "payable">;
	getEvent(key: "DescriptionChanged"): TypedContractEvent<DescriptionChangedEvent.InputTuple, DescriptionChangedEvent.OutputTuple, DescriptionChangedEvent.OutputObject>;
	filters: {
		"DescriptionChanged(string)": TypedContractEvent<DescriptionChangedEvent.InputTuple, DescriptionChangedEvent.OutputTuple, DescriptionChangedEvent.OutputObject>;
		DescriptionChanged: TypedContractEvent<DescriptionChangedEvent.InputTuple, DescriptionChangedEvent.OutputTuple, DescriptionChangedEvent.OutputObject>;
	};
}
declare namespace IMasterChef {
	type PoolInfoStruct = {
		lpToken: AddressLike;
		allocPoint: BigNumberish;
		startTime: BigNumberish;
		endTime: BigNumberish;
		lastRewardTime: BigNumberish;
		accRewardsPerShare: BigNumberish;
	};
	type PoolInfoStructOutput = [
		lpToken: string,
		allocPoint: bigint,
		startTime: bigint,
		endTime: bigint,
		lastRewardTime: bigint,
		accRewardsPerShare: bigint
	] & {
		lpToken: string;
		allocPoint: bigint;
		startTime: bigint;
		endTime: bigint;
		lastRewardTime: bigint;
		accRewardsPerShare: bigint;
	};
	type UserInfoStruct = {
		amount: BigNumberish;
		rewardDebt: BigNumberish;
	};
	type UserInfoStructOutput = [
		amount: bigint,
		rewardDebt: bigint
	] & {
		amount: bigint;
		rewardDebt: bigint;
	};
}
export interface IMasterChefInterface extends Interface {
	getFunction(nameOrSignature: "WETH" | "add" | "deposit" | "depositPermit" | "getMultiplier" | "getPoolRewardsByTime" | "getPoolRewardsPerSec" | "getRewardsPerShare" | "hasPool" | "initializeChef" | "massUpdatePools" | "pendingRewards" | "poolId" | "poolInfo" | "poolLength" | "rewardToken" | "rewardVault" | "rewardsPerSec" | "set" | "setRewardsPerSec" | "totalAllocPoint" | "updatePool" | "userInfo" | "withdraw"): FunctionFragment;
	encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
	encodeFunctionData(functionFragment: "add", values: [
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "deposit", values: [
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "depositPermit", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "getMultiplier", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getPoolRewardsByTime", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getPoolRewardsPerSec", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getRewardsPerShare", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "hasPool", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "initializeChef", values: [
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "massUpdatePools", values?: undefined): string;
	encodeFunctionData(functionFragment: "pendingRewards", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolId", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolInfo", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "poolLength", values?: undefined): string;
	encodeFunctionData(functionFragment: "rewardToken", values?: undefined): string;
	encodeFunctionData(functionFragment: "rewardVault", values?: undefined): string;
	encodeFunctionData(functionFragment: "rewardsPerSec", values?: undefined): string;
	encodeFunctionData(functionFragment: "set", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "setRewardsPerSec", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "totalAllocPoint", values?: undefined): string;
	encodeFunctionData(functionFragment: "updatePool", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "userInfo", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "depositPermit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getMultiplier", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getPoolRewardsByTime", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getPoolRewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getRewardsPerShare", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "hasPool", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeChef", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "massUpdatePools", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "pendingRewards", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardVault", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setRewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalAllocPoint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
export interface IMasterChef extends BaseContract {
	connect(runner?: ContractRunner | null): IMasterChef;
	waitForDeployment(): Promise<this>;
	interface: IMasterChefInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	WETH: TypedContractMethod<[
	], [
		string
	], "view">;
	add: TypedContractMethod<[
		_lpToken: AddressLike,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		bigint
	], "nonpayable">;
	deposit: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "payable">;
	depositPermit: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish,
		_deadline: BigNumberish,
		_signature: BytesLike
	], [
		void
	], "nonpayable">;
	getMultiplier: TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getPoolRewardsByTime: TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getPoolRewardsPerSec: TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getRewardsPerShare: TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	hasPool: TypedContractMethod<[
		_lpToken: AddressLike
	], [
		boolean
	], "view">;
	initializeChef: TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	massUpdatePools: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	pendingRewards: TypedContractMethod<[
		_pid: BigNumberish,
		_user: AddressLike
	], [
		bigint
	], "view">;
	poolId: TypedContractMethod<[
		pool: AddressLike
	], [
		bigint
	], "view">;
	poolInfo: TypedContractMethod<[
		pid: BigNumberish
	], [
		IMasterChef.PoolInfoStructOutput
	], "view">;
	poolLength: TypedContractMethod<[
	], [
		bigint
	], "view">;
	rewardToken: TypedContractMethod<[
	], [
		string
	], "view">;
	rewardVault: TypedContractMethod<[
	], [
		string
	], "view">;
	rewardsPerSec: TypedContractMethod<[
	], [
		bigint
	], "view">;
	set: TypedContractMethod<[
		_pid: BigNumberish,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		void
	], "nonpayable">;
	setRewardsPerSec: TypedContractMethod<[
		_rewardPerSec: BigNumberish
	], [
		void
	], "nonpayable">;
	totalAllocPoint: TypedContractMethod<[
	], [
		bigint
	], "view">;
	updatePool: TypedContractMethod<[
		_pid: BigNumberish
	], [
		void
	], "nonpayable">;
	userInfo: TypedContractMethod<[
		pid: BigNumberish,
		user: AddressLike
	], [
		IMasterChef.UserInfoStructOutput
	], "view">;
	withdraw: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "WETH"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "add"): TypedContractMethod<[
		_lpToken: AddressLike,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "payable">;
	getFunction(nameOrSignature: "depositPermit"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish,
		_deadline: BigNumberish,
		_signature: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "getMultiplier"): TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getPoolRewardsByTime"): TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getPoolRewardsPerSec"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getRewardsPerShare"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "hasPool"): TypedContractMethod<[
		_lpToken: AddressLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "initializeChef"): TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "massUpdatePools"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "pendingRewards"): TypedContractMethod<[
		_pid: BigNumberish,
		_user: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolId"): TypedContractMethod<[
		pool: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolInfo"): TypedContractMethod<[
		pid: BigNumberish
	], [
		IMasterChef.PoolInfoStructOutput
	], "view">;
	getFunction(nameOrSignature: "poolLength"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "rewardToken"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "rewardVault"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "rewardsPerSec"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "set"): TypedContractMethod<[
		_pid: BigNumberish,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setRewardsPerSec"): TypedContractMethod<[
		_rewardPerSec: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "totalAllocPoint"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "updatePool"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "userInfo"): TypedContractMethod<[
		pid: BigNumberish,
		user: AddressLike
	], [
		IMasterChef.UserInfoStructOutput
	], "view">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	filters: {};
}
declare namespace IMasterChef$1 {
	type PoolInfoStruct = {
		lpToken: AddressLike;
		allocPoint: BigNumberish;
		startTime: BigNumberish;
		endTime: BigNumberish;
		lastRewardTime: BigNumberish;
		accRewardsPerShare: BigNumberish;
	};
	type PoolInfoStructOutput = [
		lpToken: string,
		allocPoint: bigint,
		startTime: bigint,
		endTime: bigint,
		lastRewardTime: bigint,
		accRewardsPerShare: bigint
	] & {
		lpToken: string;
		allocPoint: bigint;
		startTime: bigint;
		endTime: bigint;
		lastRewardTime: bigint;
		accRewardsPerShare: bigint;
	};
	type UserInfoStruct = {
		amount: BigNumberish;
		rewardDebt: BigNumberish;
	};
	type UserInfoStructOutput = [
		amount: bigint,
		rewardDebt: bigint
	] & {
		amount: bigint;
		rewardDebt: bigint;
	};
}
export interface IMasterPoolInterface extends Interface {
	getFunction(nameOrSignature: "WETH" | "add" | "deposit" | "depositPermit" | "getMultiplier" | "getPoolRewardsByTime" | "getPoolRewardsPerSec" | "getRewardsPerShare" | "halvingInterval" | "halvingRate" | "hasPool" | "hasPoolToken" | "initializeChef" | "initializePool" | "massUpdatePools" | "pendingRewards" | "poolDeposit" | "poolId" | "poolIdByTokens" | "poolInfo" | "poolLength" | "poolMint" | "poolTokenImplementation" | "poolTokens" | "poolTransfer" | "poolWithdraw" | "rewardToken" | "rewardVault" | "rewardsPerSec" | "set" | "setHalvingInterval" | "setHalvingRate" | "setRewardsPerSec" | "totalAllocPoint" | "updatePool" | "userInfo" | "withdraw"): FunctionFragment;
	encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
	encodeFunctionData(functionFragment: "add", values: [
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "deposit", values: [
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "depositPermit", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "getMultiplier", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getPoolRewardsByTime", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getPoolRewardsPerSec", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getRewardsPerShare", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "halvingInterval", values?: undefined): string;
	encodeFunctionData(functionFragment: "halvingRate", values?: undefined): string;
	encodeFunctionData(functionFragment: "hasPool", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "hasPoolToken", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "initializeChef", values: [
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "initializePool", values: [
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "massUpdatePools", values?: undefined): string;
	encodeFunctionData(functionFragment: "pendingRewards", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolDeposit", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "poolId", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolIdByTokens", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolInfo", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "poolLength", values?: undefined): string;
	encodeFunctionData(functionFragment: "poolMint", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolTokenImplementation", values?: undefined): string;
	encodeFunctionData(functionFragment: "poolTokens", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "poolTransfer", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "poolWithdraw", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "rewardToken", values?: undefined): string;
	encodeFunctionData(functionFragment: "rewardVault", values?: undefined): string;
	encodeFunctionData(functionFragment: "rewardsPerSec", values?: undefined): string;
	encodeFunctionData(functionFragment: "set", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "setHalvingInterval", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "setHalvingRate", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "setRewardsPerSec", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "totalAllocPoint", values?: undefined): string;
	encodeFunctionData(functionFragment: "updatePool", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "userInfo", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "depositPermit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getMultiplier", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getPoolRewardsByTime", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getPoolRewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getRewardsPerShare", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "halvingInterval", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "halvingRate", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "hasPool", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "hasPoolToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeChef", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializePool", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "massUpdatePools", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "pendingRewards", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolIdByTokens", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolTokenImplementation", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolTokens", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolTransfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardVault", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setHalvingInterval", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setHalvingRate", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setRewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalAllocPoint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
export interface IMasterPool extends BaseContract {
	connect(runner?: ContractRunner | null): IMasterPool;
	waitForDeployment(): Promise<this>;
	interface: IMasterPoolInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	WETH: TypedContractMethod<[
	], [
		string
	], "view">;
	add: TypedContractMethod<[
		_lpToken: AddressLike,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		bigint
	], "nonpayable">;
	deposit: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "payable">;
	depositPermit: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish,
		_deadline: BigNumberish,
		_signature: BytesLike
	], [
		void
	], "nonpayable">;
	getMultiplier: TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getPoolRewardsByTime: TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getPoolRewardsPerSec: TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getRewardsPerShare: TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	halvingInterval: TypedContractMethod<[
	], [
		bigint
	], "view">;
	halvingRate: TypedContractMethod<[
	], [
		bigint
	], "view">;
	hasPool: TypedContractMethod<[
		_lpToken: AddressLike
	], [
		boolean
	], "view">;
	hasPoolToken: TypedContractMethod<[
		_poolToken: AddressLike
	], [
		boolean
	], "view">;
	initializeChef: TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	initializePool: TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_poolTokenImplementation: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_halvingRate: BigNumberish,
		_halvingInterval: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	massUpdatePools: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	pendingRewards: TypedContractMethod<[
		_pid: BigNumberish,
		_user: AddressLike
	], [
		bigint
	], "view">;
	poolDeposit: TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	poolId: TypedContractMethod<[
		pool: AddressLike
	], [
		bigint
	], "view">;
	poolIdByTokens: TypedContractMethod<[
		token: AddressLike
	], [
		bigint
	], "view">;
	poolInfo: TypedContractMethod<[
		pid: BigNumberish
	], [
		IMasterChef$1.PoolInfoStructOutput
	], "view">;
	poolLength: TypedContractMethod<[
	], [
		bigint
	], "view">;
	poolMint: TypedContractMethod<[
		_from: AddressLike
	], [
		void
	], "nonpayable">;
	poolTokenImplementation: TypedContractMethod<[
	], [
		string
	], "view">;
	poolTokens: TypedContractMethod<[
		pid: BigNumberish
	], [
		string
	], "view">;
	poolTransfer: TypedContractMethod<[
		_from: AddressLike,
		_to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	poolWithdraw: TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	rewardToken: TypedContractMethod<[
	], [
		string
	], "view">;
	rewardVault: TypedContractMethod<[
	], [
		string
	], "view">;
	rewardsPerSec: TypedContractMethod<[
	], [
		bigint
	], "view">;
	set: TypedContractMethod<[
		_pid: BigNumberish,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		void
	], "nonpayable">;
	setHalvingInterval: TypedContractMethod<[
		_halvingInterval: BigNumberish
	], [
		void
	], "nonpayable">;
	setHalvingRate: TypedContractMethod<[
		_halvingRate: BigNumberish
	], [
		void
	], "nonpayable">;
	setRewardsPerSec: TypedContractMethod<[
		_rewardPerSec: BigNumberish
	], [
		void
	], "nonpayable">;
	totalAllocPoint: TypedContractMethod<[
	], [
		bigint
	], "view">;
	updatePool: TypedContractMethod<[
		_pid: BigNumberish
	], [
		void
	], "nonpayable">;
	userInfo: TypedContractMethod<[
		pid: BigNumberish,
		user: AddressLike
	], [
		IMasterChef$1.UserInfoStructOutput
	], "view">;
	withdraw: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "WETH"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "add"): TypedContractMethod<[
		_lpToken: AddressLike,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "payable">;
	getFunction(nameOrSignature: "depositPermit"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish,
		_deadline: BigNumberish,
		_signature: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "getMultiplier"): TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getPoolRewardsByTime"): TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getPoolRewardsPerSec"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getRewardsPerShare"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "halvingInterval"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "halvingRate"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "hasPool"): TypedContractMethod<[
		_lpToken: AddressLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "hasPoolToken"): TypedContractMethod<[
		_poolToken: AddressLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "initializeChef"): TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "initializePool"): TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_poolTokenImplementation: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_halvingRate: BigNumberish,
		_halvingInterval: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "massUpdatePools"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "pendingRewards"): TypedContractMethod<[
		_pid: BigNumberish,
		_user: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolDeposit"): TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "poolId"): TypedContractMethod<[
		pool: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolIdByTokens"): TypedContractMethod<[
		token: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolInfo"): TypedContractMethod<[
		pid: BigNumberish
	], [
		IMasterChef$1.PoolInfoStructOutput
	], "view">;
	getFunction(nameOrSignature: "poolLength"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolMint"): TypedContractMethod<[
		_from: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "poolTokenImplementation"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "poolTokens"): TypedContractMethod<[
		pid: BigNumberish
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "poolTransfer"): TypedContractMethod<[
		_from: AddressLike,
		_to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "poolWithdraw"): TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "rewardToken"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "rewardVault"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "rewardsPerSec"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "set"): TypedContractMethod<[
		_pid: BigNumberish,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setHalvingInterval"): TypedContractMethod<[
		_halvingInterval: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setHalvingRate"): TypedContractMethod<[
		_halvingRate: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setRewardsPerSec"): TypedContractMethod<[
		_rewardPerSec: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "totalAllocPoint"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "updatePool"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "userInfo"): TypedContractMethod<[
		pid: BigNumberish,
		user: AddressLike
	], [
		IMasterChef$1.UserInfoStructOutput
	], "view">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	filters: {};
}
export interface IRewardVaultInterface extends Interface {
	getFunction(nameOrSignature: "rewardPerSec" | "sendTo"): FunctionFragment;
	encodeFunctionData(functionFragment: "rewardPerSec", values?: undefined): string;
	encodeFunctionData(functionFragment: "sendTo", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "rewardPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "sendTo", data: BytesLike): Result;
}
export interface IRewardVault extends BaseContract {
	connect(runner?: ContractRunner | null): IRewardVault;
	waitForDeployment(): Promise<this>;
	interface: IRewardVaultInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	rewardPerSec: TypedContractMethod<[
	], [
		bigint
	], "view">;
	sendTo: TypedContractMethod<[
		token: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "rewardPerSec"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "sendTo"): TypedContractMethod<[
		token: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	filters: {};
}
export interface IUniswapV2FactoryInterface extends Interface {
	getFunction(nameOrSignature: "allPairs" | "allPairsLength" | "createPair" | "feeTo" | "feeToSetter" | "getPair" | "setFeeTo" | "setFeeToSetter"): FunctionFragment;
	encodeFunctionData(functionFragment: "allPairs", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "allPairsLength", values?: undefined): string;
	encodeFunctionData(functionFragment: "createPair", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
	encodeFunctionData(functionFragment: "feeToSetter", values?: undefined): string;
	encodeFunctionData(functionFragment: "getPair", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "setFeeTo", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "setFeeToSetter", values: [
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allPairsLength", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "feeToSetter", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setFeeToSetter", data: BytesLike): Result;
}
export interface IUniswapV2Factory extends BaseContract {
	connect(runner?: ContractRunner | null): IUniswapV2Factory;
	waitForDeployment(): Promise<this>;
	interface: IUniswapV2FactoryInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	allPairs: TypedContractMethod<[
		arg0: BigNumberish
	], [
		string
	], "view">;
	allPairsLength: TypedContractMethod<[
	], [
		bigint
	], "view">;
	createPair: TypedContractMethod<[
		tokenA: AddressLike,
		tokenB: AddressLike
	], [
		string
	], "nonpayable">;
	feeTo: TypedContractMethod<[
	], [
		string
	], "view">;
	feeToSetter: TypedContractMethod<[
	], [
		string
	], "view">;
	getPair: TypedContractMethod<[
		tokenA: AddressLike,
		tokenB: AddressLike
	], [
		string
	], "view">;
	setFeeTo: TypedContractMethod<[
		arg0: AddressLike
	], [
		void
	], "nonpayable">;
	setFeeToSetter: TypedContractMethod<[
		arg0: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "allPairs"): TypedContractMethod<[
		arg0: BigNumberish
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allPairsLength"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "createPair"): TypedContractMethod<[
		tokenA: AddressLike,
		tokenB: AddressLike
	], [
		string
	], "nonpayable">;
	getFunction(nameOrSignature: "feeTo"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "feeToSetter"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "getPair"): TypedContractMethod<[
		tokenA: AddressLike,
		tokenB: AddressLike
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "setFeeTo"): TypedContractMethod<[
		arg0: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setFeeToSetter"): TypedContractMethod<[
		arg0: AddressLike
	], [
		void
	], "nonpayable">;
	filters: {};
}
export interface IUniswapV2PairInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "MINIMUM_LIQUIDITY" | "allowance" | "approve" | "balanceOf" | "burn" | "decimals" | "factory" | "getReserves" | "kLast" | "mint" | "name" | "nonces" | "permit" | "price0CumulativeLast" | "price1CumulativeLast" | "skim" | "swap" | "symbol" | "sync" | "token0" | "token1" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "MINIMUM_LIQUIDITY", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "burn", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "factory", values?: undefined): string;
	encodeFunctionData(functionFragment: "getReserves", values?: undefined): string;
	encodeFunctionData(functionFragment: "kLast", values?: undefined): string;
	encodeFunctionData(functionFragment: "mint", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "price0CumulativeLast", values?: undefined): string;
	encodeFunctionData(functionFragment: "price1CumulativeLast", values?: undefined): string;
	encodeFunctionData(functionFragment: "skim", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "swap", values: [
		BigNumberish,
		BigNumberish,
		AddressLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "sync", values?: undefined): string;
	encodeFunctionData(functionFragment: "token0", values?: undefined): string;
	encodeFunctionData(functionFragment: "token1", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "MINIMUM_LIQUIDITY", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getReserves", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "kLast", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "price0CumulativeLast", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "price1CumulativeLast", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$15 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$15 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IUniswapV2Pair extends BaseContract {
	connect(runner?: ContractRunner | null): IUniswapV2Pair;
	waitForDeployment(): Promise<this>;
	interface: IUniswapV2PairInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	MINIMUM_LIQUIDITY: TypedContractMethod<[
	], [
		bigint
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	burn: TypedContractMethod<[
		to: AddressLike
	], [
		[
			bigint,
			bigint
		] & {
			amount0: bigint;
			amount1: bigint;
		}
	], "nonpayable">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	factory: TypedContractMethod<[
	], [
		string
	], "view">;
	getReserves: TypedContractMethod<[
	], [
		[
			bigint,
			bigint,
			bigint
		] & {
			reserve0: bigint;
			reserve1: bigint;
			blockTimestampLast: bigint;
		}
	], "view">;
	kLast: TypedContractMethod<[
	], [
		bigint
	], "view">;
	mint: TypedContractMethod<[
		to: AddressLike
	], [
		bigint
	], "nonpayable">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	price0CumulativeLast: TypedContractMethod<[
	], [
		bigint
	], "view">;
	price1CumulativeLast: TypedContractMethod<[
	], [
		bigint
	], "view">;
	skim: TypedContractMethod<[
		to: AddressLike
	], [
		void
	], "nonpayable">;
	swap: TypedContractMethod<[
		amount0Out: BigNumberish,
		amount1Out: BigNumberish,
		to: AddressLike,
		data: BytesLike
	], [
		void
	], "nonpayable">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	sync: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	token0: TypedContractMethod<[
	], [
		string
	], "view">;
	token1: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "MINIMUM_LIQUIDITY"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "burn"): TypedContractMethod<[
		to: AddressLike
	], [
		[
			bigint,
			bigint
		] & {
			amount0: bigint;
			amount1: bigint;
		}
	], "nonpayable">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "factory"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "getReserves"): TypedContractMethod<[
	], [
		[
			bigint,
			bigint,
			bigint
		] & {
			reserve0: bigint;
			reserve1: bigint;
			blockTimestampLast: bigint;
		}
	], "view">;
	getFunction(nameOrSignature: "kLast"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "mint"): TypedContractMethod<[
		to: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "price0CumulativeLast"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "price1CumulativeLast"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "skim"): TypedContractMethod<[
		to: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "swap"): TypedContractMethod<[
		amount0Out: BigNumberish,
		amount1Out: BigNumberish,
		to: AddressLike,
		data: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "sync"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "token0"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "token1"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$15.InputTuple, ApprovalEvent$15.OutputTuple, ApprovalEvent$15.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$15.InputTuple, TransferEvent$15.OutputTuple, TransferEvent$15.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$15.InputTuple, ApprovalEvent$15.OutputTuple, ApprovalEvent$15.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$15.InputTuple, ApprovalEvent$15.OutputTuple, ApprovalEvent$15.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$15.InputTuple, TransferEvent$15.OutputTuple, TransferEvent$15.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$15.InputTuple, TransferEvent$15.OutputTuple, TransferEvent$15.OutputObject>;
	};
}
export interface IV2SwapFeedInterface extends Interface {
	getFunction(nameOrSignature: "USD" | "V2Price" | "WETH" | "asset" | "decimals" | "deploymentTimestamp" | "description" | "ethUsdPrice" | "getAnswer" | "getLPTVL" | "getLPUSD" | "getPairByToken" | "getRoundData" | "getTimestamp" | "getTimestampAnswer" | "getTokenUSD" | "initializeFeed" | "initializeSwapFeed" | "latestAnswer" | "latestRound" | "latestRoundData" | "latestTimestamp" | "setAsset" | "setDescription" | "setVersion" | "swapFactory" | "updateAnswer" | "version" | "wethUsdPair"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "AnswerUpdated" | "NewAsset" | "NewDescription" | "NewRound"): EventFragment;
	encodeFunctionData(functionFragment: "USD", values?: undefined): string;
	encodeFunctionData(functionFragment: "V2Price", values?: undefined): string;
	encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
	encodeFunctionData(functionFragment: "asset", values?: undefined): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "deploymentTimestamp", values?: undefined): string;
	encodeFunctionData(functionFragment: "description", values?: undefined): string;
	encodeFunctionData(functionFragment: "ethUsdPrice", values?: undefined): string;
	encodeFunctionData(functionFragment: "getAnswer", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getLPTVL", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "getLPUSD", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "getPairByToken", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "getRoundData", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getTimestamp", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getTimestampAnswer", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getTokenUSD", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "initializeFeed", values: [
		AddressLike,
		AddressLike,
		string,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "initializeSwapFeed", values: [
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "latestAnswer", values?: undefined): string;
	encodeFunctionData(functionFragment: "latestRound", values?: undefined): string;
	encodeFunctionData(functionFragment: "latestRoundData", values?: undefined): string;
	encodeFunctionData(functionFragment: "latestTimestamp", values?: undefined): string;
	encodeFunctionData(functionFragment: "setAsset", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "setDescription", values: [
		string
	]): string;
	encodeFunctionData(functionFragment: "setVersion", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "swapFactory", values?: undefined): string;
	encodeFunctionData(functionFragment: "updateAnswer", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "version", values?: undefined): string;
	encodeFunctionData(functionFragment: "wethUsdPair", values?: undefined): string;
	decodeFunctionResult(functionFragment: "USD", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "V2Price", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deploymentTimestamp", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "description", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "ethUsdPrice", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getLPTVL", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getLPUSD", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getPairByToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getRoundData", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getTimestamp", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getTimestampAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getTokenUSD", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeFeed", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeSwapFeed", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestRound", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestRoundData", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestTimestamp", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setAsset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setDescription", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "swapFactory", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "updateAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "wethUsdPair", data: BytesLike): Result;
}
declare namespace AnswerUpdatedEvent$1 {
	type InputTuple = [
		current: BigNumberish,
		roundId: BigNumberish,
		updatedAt: BigNumberish
	];
	type OutputTuple = [
		current: bigint,
		roundId: bigint,
		updatedAt: bigint
	];
	interface OutputObject {
		current: bigint;
		roundId: bigint;
		updatedAt: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewAssetEvent$1 {
	type InputTuple = [
		asset: AddressLike
	];
	type OutputTuple = [
		asset: string
	];
	interface OutputObject {
		asset: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewDescriptionEvent$1 {
	type InputTuple = [
		description: string
	];
	type OutputTuple = [
		description: string
	];
	interface OutputObject {
		description: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewRoundEvent$1 {
	type InputTuple = [
		roundId: BigNumberish,
		startedBy: AddressLike,
		startedAt: BigNumberish
	];
	type OutputTuple = [
		roundId: bigint,
		startedBy: string,
		startedAt: bigint
	];
	interface OutputObject {
		roundId: bigint;
		startedBy: string;
		startedAt: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface IV2SwapFeed extends BaseContract {
	connect(runner?: ContractRunner | null): IV2SwapFeed;
	waitForDeployment(): Promise<this>;
	interface: IV2SwapFeedInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	USD: TypedContractMethod<[
	], [
		string
	], "view">;
	V2Price: TypedContractMethod<[
	], [
		bigint
	], "view">;
	WETH: TypedContractMethod<[
	], [
		string
	], "view">;
	asset: TypedContractMethod<[
	], [
		string
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	deploymentTimestamp: TypedContractMethod<[
	], [
		bigint
	], "view">;
	description: TypedContractMethod<[
	], [
		string
	], "view">;
	ethUsdPrice: TypedContractMethod<[
	], [
		bigint
	], "view">;
	getAnswer: TypedContractMethod<[
		_roundId: BigNumberish
	], [
		bigint
	], "view">;
	getLPTVL: TypedContractMethod<[
		_pair: AddressLike
	], [
		bigint
	], "view">;
	getLPUSD: TypedContractMethod<[
		_pair: AddressLike
	], [
		bigint
	], "view">;
	getPairByToken: TypedContractMethod<[
		baseToken: AddressLike
	], [
		string
	], "view">;
	getRoundData: TypedContractMethod<[
		_roundId: BigNumberish
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		] & {
			roundId: bigint;
			answer: bigint;
			startedAt: bigint;
			updatedAt: bigint;
			answeredInRound: bigint;
		}
	], "view">;
	getTimestamp: TypedContractMethod<[
		_roundId: BigNumberish
	], [
		bigint
	], "view">;
	getTimestampAnswer: TypedContractMethod<[
		_timestamp: BigNumberish
	], [
		bigint
	], "view">;
	getTokenUSD: TypedContractMethod<[
		baseToken: AddressLike
	], [
		bigint
	], "view">;
	initializeFeed: TypedContractMethod<[
		_initOwner: AddressLike,
		_asset: AddressLike,
		_description: string,
		_initAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	initializeSwapFeed: TypedContractMethod<[
		_asset: AddressLike,
		_feedImplementation: AddressLike,
		_swapFactory: AddressLike,
		_WETH: AddressLike,
		_USD: AddressLike
	], [
		void
	], "nonpayable">;
	latestAnswer: TypedContractMethod<[
	], [
		bigint
	], "view">;
	latestRound: TypedContractMethod<[
	], [
		bigint
	], "view">;
	latestRoundData: TypedContractMethod<[
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		]
	], "view">;
	latestTimestamp: TypedContractMethod<[
	], [
		bigint
	], "view">;
	setAsset: TypedContractMethod<[
		_asset: AddressLike
	], [
		void
	], "nonpayable">;
	setDescription: TypedContractMethod<[
		_description: string
	], [
		void
	], "nonpayable">;
	setVersion: TypedContractMethod<[
		_version: BigNumberish
	], [
		void
	], "nonpayable">;
	swapFactory: TypedContractMethod<[
	], [
		string
	], "view">;
	updateAnswer: TypedContractMethod<[
		newAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	version: TypedContractMethod<[
	], [
		bigint
	], "view">;
	wethUsdPair: TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "USD"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "V2Price"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "WETH"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "asset"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "deploymentTimestamp"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "description"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "ethUsdPrice"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getAnswer"): TypedContractMethod<[
		_roundId: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getLPTVL"): TypedContractMethod<[
		_pair: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getLPUSD"): TypedContractMethod<[
		_pair: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getPairByToken"): TypedContractMethod<[
		baseToken: AddressLike
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "getRoundData"): TypedContractMethod<[
		_roundId: BigNumberish
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		] & {
			roundId: bigint;
			answer: bigint;
			startedAt: bigint;
			updatedAt: bigint;
			answeredInRound: bigint;
		}
	], "view">;
	getFunction(nameOrSignature: "getTimestamp"): TypedContractMethod<[
		_roundId: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getTimestampAnswer"): TypedContractMethod<[
		_timestamp: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getTokenUSD"): TypedContractMethod<[
		baseToken: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "initializeFeed"): TypedContractMethod<[
		_initOwner: AddressLike,
		_asset: AddressLike,
		_description: string,
		_initAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "initializeSwapFeed"): TypedContractMethod<[
		_asset: AddressLike,
		_feedImplementation: AddressLike,
		_swapFactory: AddressLike,
		_WETH: AddressLike,
		_USD: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "latestAnswer"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "latestRound"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "latestRoundData"): TypedContractMethod<[
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		]
	], "view">;
	getFunction(nameOrSignature: "latestTimestamp"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "setAsset"): TypedContractMethod<[
		_asset: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setDescription"): TypedContractMethod<[
		_description: string
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setVersion"): TypedContractMethod<[
		_version: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "swapFactory"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "updateAnswer"): TypedContractMethod<[
		newAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "version"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "wethUsdPair"): TypedContractMethod<[
	], [
		string
	], "view">;
	getEvent(key: "AnswerUpdated"): TypedContractEvent<AnswerUpdatedEvent$1.InputTuple, AnswerUpdatedEvent$1.OutputTuple, AnswerUpdatedEvent$1.OutputObject>;
	getEvent(key: "NewAsset"): TypedContractEvent<NewAssetEvent$1.InputTuple, NewAssetEvent$1.OutputTuple, NewAssetEvent$1.OutputObject>;
	getEvent(key: "NewDescription"): TypedContractEvent<NewDescriptionEvent$1.InputTuple, NewDescriptionEvent$1.OutputTuple, NewDescriptionEvent$1.OutputObject>;
	getEvent(key: "NewRound"): TypedContractEvent<NewRoundEvent$1.InputTuple, NewRoundEvent$1.OutputTuple, NewRoundEvent$1.OutputObject>;
	filters: {
		"AnswerUpdated(int256,uint256,uint256)": TypedContractEvent<AnswerUpdatedEvent$1.InputTuple, AnswerUpdatedEvent$1.OutputTuple, AnswerUpdatedEvent$1.OutputObject>;
		AnswerUpdated: TypedContractEvent<AnswerUpdatedEvent$1.InputTuple, AnswerUpdatedEvent$1.OutputTuple, AnswerUpdatedEvent$1.OutputObject>;
		"NewAsset(address)": TypedContractEvent<NewAssetEvent$1.InputTuple, NewAssetEvent$1.OutputTuple, NewAssetEvent$1.OutputObject>;
		NewAsset: TypedContractEvent<NewAssetEvent$1.InputTuple, NewAssetEvent$1.OutputTuple, NewAssetEvent$1.OutputObject>;
		"NewDescription(string)": TypedContractEvent<NewDescriptionEvent$1.InputTuple, NewDescriptionEvent$1.OutputTuple, NewDescriptionEvent$1.OutputObject>;
		NewDescription: TypedContractEvent<NewDescriptionEvent$1.InputTuple, NewDescriptionEvent$1.OutputTuple, NewDescriptionEvent$1.OutputObject>;
		"NewRound(uint256,address,uint256)": TypedContractEvent<NewRoundEvent$1.InputTuple, NewRoundEvent$1.OutputTuple, NewRoundEvent$1.OutputObject>;
		NewRound: TypedContractEvent<NewRoundEvent$1.InputTuple, NewRoundEvent$1.OutputTuple, NewRoundEvent$1.OutputObject>;
	};
}
export interface IWETHInterface extends Interface {
	getFunction(nameOrSignature: "deposit" | "withdraw"): FunctionFragment;
	encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
export interface IWETH extends BaseContract {
	connect(runner?: ContractRunner | null): IWETH;
	waitForDeployment(): Promise<this>;
	interface: IWETHInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	deposit: TypedContractMethod<[
	], [
		void
	], "payable">;
	withdraw: TypedContractMethod<[
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
	], [
		void
	], "payable">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	filters: {};
}
interface OwnableInterface$1 extends Interface {
	getFunction(nameOrSignature: "owner" | "renounceOwnership" | "transferOwnership"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred"): EventFragment;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
	encodeFunctionData(functionFragment: "transferOwnership", values: [
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace InitializedEvent$9 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$2 {
	type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike
	];
	type OutputTuple = [
		previousOwner: string,
		newOwner: string
	];
	interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
interface Ownable$1 extends BaseContract {
	connect(runner?: ContractRunner | null): Ownable$1;
	waitForDeployment(): Promise<this>;
	interface: OwnableInterface$1;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	owner: TypedContractMethod<[
	], [
		string
	], "view">;
	renounceOwnership: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	transferOwnership: TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "owner"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$9.InputTuple, InitializedEvent$9.OutputTuple, InitializedEvent$9.OutputObject>;
	getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$2.InputTuple, OwnershipTransferredEvent$2.OutputTuple, OwnershipTransferredEvent$2.OutputObject>;
	filters: {
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$9.InputTuple, InitializedEvent$9.OutputTuple, InitializedEvent$9.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$9.InputTuple, InitializedEvent$9.OutputTuple, InitializedEvent$9.OutputObject>;
		"OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$2.InputTuple, OwnershipTransferredEvent$2.OutputTuple, OwnershipTransferredEvent$2.OutputObject>;
		OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$2.InputTuple, OwnershipTransferredEvent$2.OutputTuple, OwnershipTransferredEvent$2.OutputObject>;
	};
}
export interface SigLibInterface extends Interface {
}
export interface SigLib extends BaseContract {
	connect(runner?: ContractRunner | null): SigLib;
	waitForDeployment(): Promise<this>;
	interface: SigLibInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	filters: {};
}
export interface WithSettlerInterface extends Interface {
	getFunction(nameOrSignature: "addSettler" | "initializeSettler" | "owner" | "removeSettler" | "renounceOwnership" | "settlers" | "transferOwnership"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "AddSettler" | "Initialized" | "OwnershipTransferred" | "RemoveSettler"): EventFragment;
	encodeFunctionData(functionFragment: "addSettler", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "initializeSettler", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "removeSettler", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
	encodeFunctionData(functionFragment: "settlers", values?: undefined): string;
	encodeFunctionData(functionFragment: "transferOwnership", values: [
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "addSettler", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeSettler", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "removeSettler", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "settlers", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace AddSettlerEvent {
	type InputTuple = [
		newSettler: AddressLike
	];
	type OutputTuple = [
		newSettler: string
	];
	interface OutputObject {
		newSettler: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$10 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$3 {
	type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike
	];
	type OutputTuple = [
		previousOwner: string,
		newOwner: string
	];
	interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace RemoveSettlerEvent {
	type InputTuple = [
		oldSettler: AddressLike
	];
	type OutputTuple = [
		oldSettler: string
	];
	interface OutputObject {
		oldSettler: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface WithSettler extends BaseContract {
	connect(runner?: ContractRunner | null): WithSettler;
	waitForDeployment(): Promise<this>;
	interface: WithSettlerInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	addSettler: TypedContractMethod<[
		_settler: AddressLike
	], [
		void
	], "nonpayable">;
	initializeSettler: TypedContractMethod<[
		_initOwner: AddressLike
	], [
		void
	], "nonpayable">;
	owner: TypedContractMethod<[
	], [
		string
	], "view">;
	removeSettler: TypedContractMethod<[
		_settler: AddressLike
	], [
		void
	], "nonpayable">;
	renounceOwnership: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	settlers: TypedContractMethod<[
	], [
		string[]
	], "view">;
	transferOwnership: TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "addSettler"): TypedContractMethod<[
		_settler: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "initializeSettler"): TypedContractMethod<[
		_initOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "owner"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "removeSettler"): TypedContractMethod<[
		_settler: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "settlers"): TypedContractMethod<[
	], [
		string[]
	], "view">;
	getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getEvent(key: "AddSettler"): TypedContractEvent<AddSettlerEvent.InputTuple, AddSettlerEvent.OutputTuple, AddSettlerEvent.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$10.InputTuple, InitializedEvent$10.OutputTuple, InitializedEvent$10.OutputObject>;
	getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$3.InputTuple, OwnershipTransferredEvent$3.OutputTuple, OwnershipTransferredEvent$3.OutputObject>;
	getEvent(key: "RemoveSettler"): TypedContractEvent<RemoveSettlerEvent.InputTuple, RemoveSettlerEvent.OutputTuple, RemoveSettlerEvent.OutputObject>;
	filters: {
		"AddSettler(address)": TypedContractEvent<AddSettlerEvent.InputTuple, AddSettlerEvent.OutputTuple, AddSettlerEvent.OutputObject>;
		AddSettler: TypedContractEvent<AddSettlerEvent.InputTuple, AddSettlerEvent.OutputTuple, AddSettlerEvent.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$10.InputTuple, InitializedEvent$10.OutputTuple, InitializedEvent$10.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$10.InputTuple, InitializedEvent$10.OutputTuple, InitializedEvent$10.OutputObject>;
		"OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$3.InputTuple, OwnershipTransferredEvent$3.OutputTuple, OwnershipTransferredEvent$3.OutputObject>;
		OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$3.InputTuple, OwnershipTransferredEvent$3.OutputTuple, OwnershipTransferredEvent$3.OutputObject>;
		"RemoveSettler(address)": TypedContractEvent<RemoveSettlerEvent.InputTuple, RemoveSettlerEvent.OutputTuple, RemoveSettlerEvent.OutputObject>;
		RemoveSettler: TypedContractEvent<RemoveSettlerEvent.InputTuple, RemoveSettlerEvent.OutputTuple, RemoveSettlerEvent.OutputObject>;
	};
}
export interface DataFeedInterface extends Interface {
	getFunction(nameOrSignature: "addSettler" | "asset" | "decimals" | "deploymentTimestamp" | "description" | "getAnswer" | "getRoundData" | "getTimestamp" | "getTimestampAnswer" | "initializeFeed" | "initializeSettler" | "latestAnswer" | "latestRound" | "latestRoundData" | "latestTimestamp" | "owner" | "removeSettler" | "renounceOwnership" | "setAsset" | "setDescription" | "setVersion" | "settlers" | "transferOwnership" | "updateAnswer" | "version"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "AddSettler" | "AnswerUpdated" | "Initialized" | "NewAsset" | "NewDescription" | "NewRound" | "OwnershipTransferred" | "RemoveSettler"): EventFragment;
	encodeFunctionData(functionFragment: "addSettler", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "asset", values?: undefined): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "deploymentTimestamp", values?: undefined): string;
	encodeFunctionData(functionFragment: "description", values?: undefined): string;
	encodeFunctionData(functionFragment: "getAnswer", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getRoundData", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getTimestamp", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getTimestampAnswer", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "initializeFeed", values: [
		AddressLike,
		AddressLike,
		string,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "initializeSettler", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "latestAnswer", values?: undefined): string;
	encodeFunctionData(functionFragment: "latestRound", values?: undefined): string;
	encodeFunctionData(functionFragment: "latestRoundData", values?: undefined): string;
	encodeFunctionData(functionFragment: "latestTimestamp", values?: undefined): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "removeSettler", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
	encodeFunctionData(functionFragment: "setAsset", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "setDescription", values: [
		string
	]): string;
	encodeFunctionData(functionFragment: "setVersion", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "settlers", values?: undefined): string;
	encodeFunctionData(functionFragment: "transferOwnership", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "updateAnswer", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "version", values?: undefined): string;
	decodeFunctionResult(functionFragment: "addSettler", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deploymentTimestamp", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "description", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getRoundData", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getTimestamp", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getTimestampAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeFeed", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeSettler", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestRound", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestRoundData", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestTimestamp", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "removeSettler", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setAsset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setDescription", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "settlers", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "updateAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}
declare namespace AddSettlerEvent$1 {
	type InputTuple = [
		newSettler: AddressLike
	];
	type OutputTuple = [
		newSettler: string
	];
	interface OutputObject {
		newSettler: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace AnswerUpdatedEvent$2 {
	type InputTuple = [
		current: BigNumberish,
		roundId: BigNumberish,
		updatedAt: BigNumberish
	];
	type OutputTuple = [
		current: bigint,
		roundId: bigint,
		updatedAt: bigint
	];
	interface OutputObject {
		current: bigint;
		roundId: bigint;
		updatedAt: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$11 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewAssetEvent$2 {
	type InputTuple = [
		asset: AddressLike
	];
	type OutputTuple = [
		asset: string
	];
	interface OutputObject {
		asset: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewDescriptionEvent$2 {
	type InputTuple = [
		description: string
	];
	type OutputTuple = [
		description: string
	];
	interface OutputObject {
		description: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewRoundEvent$2 {
	type InputTuple = [
		roundId: BigNumberish,
		startedBy: AddressLike,
		startedAt: BigNumberish
	];
	type OutputTuple = [
		roundId: bigint,
		startedBy: string,
		startedAt: bigint
	];
	interface OutputObject {
		roundId: bigint;
		startedBy: string;
		startedAt: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$4 {
	type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike
	];
	type OutputTuple = [
		previousOwner: string,
		newOwner: string
	];
	interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace RemoveSettlerEvent$1 {
	type InputTuple = [
		oldSettler: AddressLike
	];
	type OutputTuple = [
		oldSettler: string
	];
	interface OutputObject {
		oldSettler: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface DataFeed extends BaseContract {
	connect(runner?: ContractRunner | null): DataFeed;
	waitForDeployment(): Promise<this>;
	interface: DataFeedInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	addSettler: TypedContractMethod<[
		_settler: AddressLike
	], [
		void
	], "nonpayable">;
	asset: TypedContractMethod<[
	], [
		string
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	deploymentTimestamp: TypedContractMethod<[
	], [
		bigint
	], "view">;
	description: TypedContractMethod<[
	], [
		string
	], "view">;
	getAnswer: TypedContractMethod<[
		arg0: BigNumberish
	], [
		bigint
	], "view">;
	getRoundData: TypedContractMethod<[
		_roundId: BigNumberish
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		] & {
			roundId: bigint;
			answer: bigint;
			startedAt: bigint;
			updatedAt: bigint;
			answeredInRound: bigint;
		}
	], "view">;
	getTimestamp: TypedContractMethod<[
		arg0: BigNumberish
	], [
		bigint
	], "view">;
	getTimestampAnswer: TypedContractMethod<[
		arg0: BigNumberish
	], [
		bigint
	], "view">;
	initializeFeed: TypedContractMethod<[
		_initOwner: AddressLike,
		_asset: AddressLike,
		_description: string,
		_initAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	initializeSettler: TypedContractMethod<[
		_initOwner: AddressLike
	], [
		void
	], "nonpayable">;
	latestAnswer: TypedContractMethod<[
	], [
		bigint
	], "view">;
	latestRound: TypedContractMethod<[
	], [
		bigint
	], "view">;
	latestRoundData: TypedContractMethod<[
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		]
	], "view">;
	latestTimestamp: TypedContractMethod<[
	], [
		bigint
	], "view">;
	owner: TypedContractMethod<[
	], [
		string
	], "view">;
	removeSettler: TypedContractMethod<[
		_settler: AddressLike
	], [
		void
	], "nonpayable">;
	renounceOwnership: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	setAsset: TypedContractMethod<[
		_asset: AddressLike
	], [
		void
	], "nonpayable">;
	setDescription: TypedContractMethod<[
		_description: string
	], [
		void
	], "nonpayable">;
	setVersion: TypedContractMethod<[
		_version: BigNumberish
	], [
		void
	], "nonpayable">;
	settlers: TypedContractMethod<[
	], [
		string[]
	], "view">;
	transferOwnership: TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	updateAnswer: TypedContractMethod<[
		newAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	version: TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "addSettler"): TypedContractMethod<[
		_settler: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "asset"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "deploymentTimestamp"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "description"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "getAnswer"): TypedContractMethod<[
		arg0: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getRoundData"): TypedContractMethod<[
		_roundId: BigNumberish
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		] & {
			roundId: bigint;
			answer: bigint;
			startedAt: bigint;
			updatedAt: bigint;
			answeredInRound: bigint;
		}
	], "view">;
	getFunction(nameOrSignature: "getTimestamp"): TypedContractMethod<[
		arg0: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getTimestampAnswer"): TypedContractMethod<[
		arg0: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "initializeFeed"): TypedContractMethod<[
		_initOwner: AddressLike,
		_asset: AddressLike,
		_description: string,
		_initAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "initializeSettler"): TypedContractMethod<[
		_initOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "latestAnswer"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "latestRound"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "latestRoundData"): TypedContractMethod<[
	], [
		[
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		]
	], "view">;
	getFunction(nameOrSignature: "latestTimestamp"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "owner"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "removeSettler"): TypedContractMethod<[
		_settler: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setAsset"): TypedContractMethod<[
		_asset: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setDescription"): TypedContractMethod<[
		_description: string
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setVersion"): TypedContractMethod<[
		_version: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "settlers"): TypedContractMethod<[
	], [
		string[]
	], "view">;
	getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "updateAnswer"): TypedContractMethod<[
		newAnswer: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "version"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getEvent(key: "AddSettler"): TypedContractEvent<AddSettlerEvent$1.InputTuple, AddSettlerEvent$1.OutputTuple, AddSettlerEvent$1.OutputObject>;
	getEvent(key: "AnswerUpdated"): TypedContractEvent<AnswerUpdatedEvent$2.InputTuple, AnswerUpdatedEvent$2.OutputTuple, AnswerUpdatedEvent$2.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$11.InputTuple, InitializedEvent$11.OutputTuple, InitializedEvent$11.OutputObject>;
	getEvent(key: "NewAsset"): TypedContractEvent<NewAssetEvent$2.InputTuple, NewAssetEvent$2.OutputTuple, NewAssetEvent$2.OutputObject>;
	getEvent(key: "NewDescription"): TypedContractEvent<NewDescriptionEvent$2.InputTuple, NewDescriptionEvent$2.OutputTuple, NewDescriptionEvent$2.OutputObject>;
	getEvent(key: "NewRound"): TypedContractEvent<NewRoundEvent$2.InputTuple, NewRoundEvent$2.OutputTuple, NewRoundEvent$2.OutputObject>;
	getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$4.InputTuple, OwnershipTransferredEvent$4.OutputTuple, OwnershipTransferredEvent$4.OutputObject>;
	getEvent(key: "RemoveSettler"): TypedContractEvent<RemoveSettlerEvent$1.InputTuple, RemoveSettlerEvent$1.OutputTuple, RemoveSettlerEvent$1.OutputObject>;
	filters: {
		"AddSettler(address)": TypedContractEvent<AddSettlerEvent$1.InputTuple, AddSettlerEvent$1.OutputTuple, AddSettlerEvent$1.OutputObject>;
		AddSettler: TypedContractEvent<AddSettlerEvent$1.InputTuple, AddSettlerEvent$1.OutputTuple, AddSettlerEvent$1.OutputObject>;
		"AnswerUpdated(int256,uint256,uint256)": TypedContractEvent<AnswerUpdatedEvent$2.InputTuple, AnswerUpdatedEvent$2.OutputTuple, AnswerUpdatedEvent$2.OutputObject>;
		AnswerUpdated: TypedContractEvent<AnswerUpdatedEvent$2.InputTuple, AnswerUpdatedEvent$2.OutputTuple, AnswerUpdatedEvent$2.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$11.InputTuple, InitializedEvent$11.OutputTuple, InitializedEvent$11.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$11.InputTuple, InitializedEvent$11.OutputTuple, InitializedEvent$11.OutputObject>;
		"NewAsset(address)": TypedContractEvent<NewAssetEvent$2.InputTuple, NewAssetEvent$2.OutputTuple, NewAssetEvent$2.OutputObject>;
		NewAsset: TypedContractEvent<NewAssetEvent$2.InputTuple, NewAssetEvent$2.OutputTuple, NewAssetEvent$2.OutputObject>;
		"NewDescription(string)": TypedContractEvent<NewDescriptionEvent$2.InputTuple, NewDescriptionEvent$2.OutputTuple, NewDescriptionEvent$2.OutputObject>;
		NewDescription: TypedContractEvent<NewDescriptionEvent$2.InputTuple, NewDescriptionEvent$2.OutputTuple, NewDescriptionEvent$2.OutputObject>;
		"NewRound(uint256,address,uint256)": TypedContractEvent<NewRoundEvent$2.InputTuple, NewRoundEvent$2.OutputTuple, NewRoundEvent$2.OutputObject>;
		NewRound: TypedContractEvent<NewRoundEvent$2.InputTuple, NewRoundEvent$2.OutputTuple, NewRoundEvent$2.OutputObject>;
		"OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$4.InputTuple, OwnershipTransferredEvent$4.OutputTuple, OwnershipTransferredEvent$4.OutputObject>;
		OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$4.InputTuple, OwnershipTransferredEvent$4.OutputTuple, OwnershipTransferredEvent$4.OutputObject>;
		"RemoveSettler(address)": TypedContractEvent<RemoveSettlerEvent$1.InputTuple, RemoveSettlerEvent$1.OutputTuple, RemoveSettlerEvent$1.OutputObject>;
		RemoveSettler: TypedContractEvent<RemoveSettlerEvent$1.InputTuple, RemoveSettlerEvent$1.OutputTuple, RemoveSettlerEvent$1.OutputObject>;
	};
}
export interface V2SwapFeedInterface extends Interface {
	getFunction(nameOrSignature: "USD" | "V2Price" | "WETH" | "asset" | "decimals" | "deploymentTimestamp" | "description" | "ethUsdPrice" | "feedImplementation" | "getLPTVL" | "getLPUSD" | "getPairByToken" | "getTokenUSD" | "initializeSwapFeed" | "latestAnswer" | "latestRound" | "latestTimestamp" | "swapFactory" | "version" | "wethUsdPair"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "AnswerUpdated" | "Initialized" | "NewAsset" | "NewDescription" | "NewRound"): EventFragment;
	encodeFunctionData(functionFragment: "USD", values?: undefined): string;
	encodeFunctionData(functionFragment: "V2Price", values?: undefined): string;
	encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
	encodeFunctionData(functionFragment: "asset", values?: undefined): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "deploymentTimestamp", values?: undefined): string;
	encodeFunctionData(functionFragment: "description", values?: undefined): string;
	encodeFunctionData(functionFragment: "ethUsdPrice", values?: undefined): string;
	encodeFunctionData(functionFragment: "feedImplementation", values?: undefined): string;
	encodeFunctionData(functionFragment: "getLPTVL", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "getLPUSD", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "getPairByToken", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "getTokenUSD", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "initializeSwapFeed", values: [
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "latestAnswer", values?: undefined): string;
	encodeFunctionData(functionFragment: "latestRound", values?: undefined): string;
	encodeFunctionData(functionFragment: "latestTimestamp", values?: undefined): string;
	encodeFunctionData(functionFragment: "swapFactory", values?: undefined): string;
	encodeFunctionData(functionFragment: "version", values?: undefined): string;
	encodeFunctionData(functionFragment: "wethUsdPair", values?: undefined): string;
	decodeFunctionResult(functionFragment: "USD", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "V2Price", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deploymentTimestamp", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "description", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "ethUsdPrice", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "feedImplementation", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getLPTVL", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getLPUSD", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getPairByToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getTokenUSD", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeSwapFeed", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestRound", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestTimestamp", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "swapFactory", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "wethUsdPair", data: BytesLike): Result;
}
declare namespace AnswerUpdatedEvent$3 {
	type InputTuple = [
		current: BigNumberish,
		roundId: BigNumberish,
		updatedAt: BigNumberish
	];
	type OutputTuple = [
		current: bigint,
		roundId: bigint,
		updatedAt: bigint
	];
	interface OutputObject {
		current: bigint;
		roundId: bigint;
		updatedAt: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$12 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewAssetEvent$3 {
	type InputTuple = [
		asset: AddressLike
	];
	type OutputTuple = [
		asset: string
	];
	interface OutputObject {
		asset: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewDescriptionEvent$3 {
	type InputTuple = [
		description: string
	];
	type OutputTuple = [
		description: string
	];
	interface OutputObject {
		description: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace NewRoundEvent$3 {
	type InputTuple = [
		roundId: BigNumberish,
		startedBy: AddressLike,
		startedAt: BigNumberish
	];
	type OutputTuple = [
		roundId: bigint,
		startedBy: string,
		startedAt: bigint
	];
	interface OutputObject {
		roundId: bigint;
		startedBy: string;
		startedAt: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface V2SwapFeed extends BaseContract {
	connect(runner?: ContractRunner | null): V2SwapFeed;
	waitForDeployment(): Promise<this>;
	interface: V2SwapFeedInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	USD: TypedContractMethod<[
	], [
		string
	], "view">;
	V2Price: TypedContractMethod<[
	], [
		bigint
	], "view">;
	WETH: TypedContractMethod<[
	], [
		string
	], "view">;
	asset: TypedContractMethod<[
	], [
		string
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	deploymentTimestamp: TypedContractMethod<[
	], [
		bigint
	], "view">;
	description: TypedContractMethod<[
	], [
		string
	], "view">;
	ethUsdPrice: TypedContractMethod<[
	], [
		bigint
	], "view">;
	feedImplementation: TypedContractMethod<[
	], [
		string
	], "view">;
	getLPTVL: TypedContractMethod<[
		_pair: AddressLike
	], [
		bigint
	], "view">;
	getLPUSD: TypedContractMethod<[
		_pair: AddressLike
	], [
		bigint
	], "view">;
	getPairByToken: TypedContractMethod<[
		baseToken: AddressLike
	], [
		string
	], "view">;
	getTokenUSD: TypedContractMethod<[
		baseToken: AddressLike
	], [
		bigint
	], "view">;
	initializeSwapFeed: TypedContractMethod<[
		_asset: AddressLike,
		_feedImplementation: AddressLike,
		_swapFactory: AddressLike,
		_WETH: AddressLike,
		_USD: AddressLike
	], [
		void
	], "nonpayable">;
	latestAnswer: TypedContractMethod<[
	], [
		bigint
	], "view">;
	latestRound: TypedContractMethod<[
	], [
		bigint
	], "view">;
	latestTimestamp: TypedContractMethod<[
	], [
		bigint
	], "view">;
	swapFactory: TypedContractMethod<[
	], [
		string
	], "view">;
	version: TypedContractMethod<[
	], [
		bigint
	], "view">;
	wethUsdPair: TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "USD"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "V2Price"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "WETH"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "asset"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "deploymentTimestamp"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "description"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "ethUsdPrice"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "feedImplementation"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "getLPTVL"): TypedContractMethod<[
		_pair: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getLPUSD"): TypedContractMethod<[
		_pair: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getPairByToken"): TypedContractMethod<[
		baseToken: AddressLike
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "getTokenUSD"): TypedContractMethod<[
		baseToken: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "initializeSwapFeed"): TypedContractMethod<[
		_asset: AddressLike,
		_feedImplementation: AddressLike,
		_swapFactory: AddressLike,
		_WETH: AddressLike,
		_USD: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "latestAnswer"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "latestRound"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "latestTimestamp"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "swapFactory"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "version"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "wethUsdPair"): TypedContractMethod<[
	], [
		string
	], "view">;
	getEvent(key: "AnswerUpdated"): TypedContractEvent<AnswerUpdatedEvent$3.InputTuple, AnswerUpdatedEvent$3.OutputTuple, AnswerUpdatedEvent$3.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$12.InputTuple, InitializedEvent$12.OutputTuple, InitializedEvent$12.OutputObject>;
	getEvent(key: "NewAsset"): TypedContractEvent<NewAssetEvent$3.InputTuple, NewAssetEvent$3.OutputTuple, NewAssetEvent$3.OutputObject>;
	getEvent(key: "NewDescription"): TypedContractEvent<NewDescriptionEvent$3.InputTuple, NewDescriptionEvent$3.OutputTuple, NewDescriptionEvent$3.OutputObject>;
	getEvent(key: "NewRound"): TypedContractEvent<NewRoundEvent$3.InputTuple, NewRoundEvent$3.OutputTuple, NewRoundEvent$3.OutputObject>;
	filters: {
		"AnswerUpdated(int256,uint256,uint256)": TypedContractEvent<AnswerUpdatedEvent$3.InputTuple, AnswerUpdatedEvent$3.OutputTuple, AnswerUpdatedEvent$3.OutputObject>;
		AnswerUpdated: TypedContractEvent<AnswerUpdatedEvent$3.InputTuple, AnswerUpdatedEvent$3.OutputTuple, AnswerUpdatedEvent$3.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$12.InputTuple, InitializedEvent$12.OutputTuple, InitializedEvent$12.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$12.InputTuple, InitializedEvent$12.OutputTuple, InitializedEvent$12.OutputObject>;
		"NewAsset(address)": TypedContractEvent<NewAssetEvent$3.InputTuple, NewAssetEvent$3.OutputTuple, NewAssetEvent$3.OutputObject>;
		NewAsset: TypedContractEvent<NewAssetEvent$3.InputTuple, NewAssetEvent$3.OutputTuple, NewAssetEvent$3.OutputObject>;
		"NewDescription(string)": TypedContractEvent<NewDescriptionEvent$3.InputTuple, NewDescriptionEvent$3.OutputTuple, NewDescriptionEvent$3.OutputObject>;
		NewDescription: TypedContractEvent<NewDescriptionEvent$3.InputTuple, NewDescriptionEvent$3.OutputTuple, NewDescriptionEvent$3.OutputObject>;
		"NewRound(uint256,address,uint256)": TypedContractEvent<NewRoundEvent$3.InputTuple, NewRoundEvent$3.OutputTuple, NewRoundEvent$3.OutputObject>;
		NewRound: TypedContractEvent<NewRoundEvent$3.InputTuple, NewRoundEvent$3.OutputTuple, NewRoundEvent$3.OutputObject>;
	};
}
export interface V2SwapFeedFactoryInterface extends Interface {
	getFunction(nameOrSignature: "USD" | "WETH" | "createFeed" | "feedImplementation" | "feeds" | "initializeFactory" | "latestAnswer" | "owner" | "phaseId" | "renounceOwnership" | "setFeedImplementation" | "setSwapFactory" | "setUSD" | "setWETH" | "swapFactory" | "transferOwnership"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "FeedConfirmed" | "FeedProposed" | "Initialized" | "OwnershipTransferred" | "SetFeedImplementation" | "SetSwapFactory" | "SetUSD" | "SetWETH"): EventFragment;
	encodeFunctionData(functionFragment: "USD", values?: undefined): string;
	encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
	encodeFunctionData(functionFragment: "createFeed", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "feedImplementation", values?: undefined): string;
	encodeFunctionData(functionFragment: "feeds", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "initializeFactory", values: [
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "latestAnswer", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "phaseId", values?: undefined): string;
	encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
	encodeFunctionData(functionFragment: "setFeedImplementation", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "setSwapFactory", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "setUSD", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "setWETH", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "swapFactory", values?: undefined): string;
	encodeFunctionData(functionFragment: "transferOwnership", values: [
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "USD", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "createFeed", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "feedImplementation", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "feeds", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeFactory", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "latestAnswer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "phaseId", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setFeedImplementation", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setSwapFactory", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setUSD", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setWETH", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "swapFactory", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace FeedConfirmedEvent {
	type InputTuple = [
		asset: AddressLike,
		denomination: AddressLike,
		latestAggregator: AddressLike,
		previousAggregator: AddressLike,
		nextPhaseId: BigNumberish,
		sender: AddressLike
	];
	type OutputTuple = [
		asset: string,
		denomination: string,
		latestAggregator: string,
		previousAggregator: string,
		nextPhaseId: bigint,
		sender: string
	];
	interface OutputObject {
		asset: string;
		denomination: string;
		latestAggregator: string;
		previousAggregator: string;
		nextPhaseId: bigint;
		sender: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace FeedProposedEvent {
	type InputTuple = [
		asset: AddressLike,
		denomination: AddressLike,
		proposedAggregator: AddressLike,
		currentAggregator: AddressLike,
		sender: AddressLike
	];
	type OutputTuple = [
		asset: string,
		denomination: string,
		proposedAggregator: string,
		currentAggregator: string,
		sender: string
	];
	interface OutputObject {
		asset: string;
		denomination: string;
		proposedAggregator: string;
		currentAggregator: string;
		sender: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$13 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$5 {
	type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike
	];
	type OutputTuple = [
		previousOwner: string,
		newOwner: string
	];
	interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetFeedImplementationEvent {
	type InputTuple = [
		feedImplementation: AddressLike
	];
	type OutputTuple = [
		feedImplementation: string
	];
	interface OutputObject {
		feedImplementation: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetSwapFactoryEvent {
	type InputTuple = [
		factory: AddressLike
	];
	type OutputTuple = [
		factory: string
	];
	interface OutputObject {
		factory: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetUSDEvent {
	type InputTuple = [
		usd: AddressLike
	];
	type OutputTuple = [
		usd: string
	];
	interface OutputObject {
		usd: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetWETHEvent {
	type InputTuple = [
		weth: AddressLike
	];
	type OutputTuple = [
		weth: string
	];
	interface OutputObject {
		weth: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface V2SwapFeedFactory extends BaseContract {
	connect(runner?: ContractRunner | null): V2SwapFeedFactory;
	waitForDeployment(): Promise<this>;
	interface: V2SwapFeedFactoryInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	USD: TypedContractMethod<[
	], [
		string
	], "view">;
	WETH: TypedContractMethod<[
	], [
		string
	], "view">;
	createFeed: TypedContractMethod<[
		_asset: AddressLike
	], [
		void
	], "nonpayable">;
	feedImplementation: TypedContractMethod<[
	], [
		string
	], "view">;
	feeds: TypedContractMethod<[
		arg0: AddressLike
	], [
		string
	], "view">;
	initializeFactory: TypedContractMethod<[
		_initOwner: AddressLike,
		_feedImplementation: AddressLike,
		_swapFactory: AddressLike,
		_WETH: AddressLike,
		_USD: AddressLike
	], [
		void
	], "nonpayable">;
	latestAnswer: TypedContractMethod<[
		_asset: AddressLike
	], [
		bigint
	], "view">;
	owner: TypedContractMethod<[
	], [
		string
	], "view">;
	phaseId: TypedContractMethod<[
	], [
		bigint
	], "view">;
	renounceOwnership: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	setFeedImplementation: TypedContractMethod<[
		_feedImplementation: AddressLike
	], [
		void
	], "nonpayable">;
	setSwapFactory: TypedContractMethod<[
		_swapFactory: AddressLike
	], [
		void
	], "nonpayable">;
	setUSD: TypedContractMethod<[
		_USD: AddressLike
	], [
		void
	], "nonpayable">;
	setWETH: TypedContractMethod<[
		_WETH: AddressLike
	], [
		void
	], "nonpayable">;
	swapFactory: TypedContractMethod<[
	], [
		string
	], "view">;
	transferOwnership: TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "USD"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "WETH"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "createFeed"): TypedContractMethod<[
		_asset: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "feedImplementation"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "feeds"): TypedContractMethod<[
		arg0: AddressLike
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "initializeFactory"): TypedContractMethod<[
		_initOwner: AddressLike,
		_feedImplementation: AddressLike,
		_swapFactory: AddressLike,
		_WETH: AddressLike,
		_USD: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "latestAnswer"): TypedContractMethod<[
		_asset: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "owner"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "phaseId"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setFeedImplementation"): TypedContractMethod<[
		_feedImplementation: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setSwapFactory"): TypedContractMethod<[
		_swapFactory: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setUSD"): TypedContractMethod<[
		_USD: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setWETH"): TypedContractMethod<[
		_WETH: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "swapFactory"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getEvent(key: "FeedConfirmed"): TypedContractEvent<FeedConfirmedEvent.InputTuple, FeedConfirmedEvent.OutputTuple, FeedConfirmedEvent.OutputObject>;
	getEvent(key: "FeedProposed"): TypedContractEvent<FeedProposedEvent.InputTuple, FeedProposedEvent.OutputTuple, FeedProposedEvent.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$13.InputTuple, InitializedEvent$13.OutputTuple, InitializedEvent$13.OutputObject>;
	getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$5.InputTuple, OwnershipTransferredEvent$5.OutputTuple, OwnershipTransferredEvent$5.OutputObject>;
	getEvent(key: "SetFeedImplementation"): TypedContractEvent<SetFeedImplementationEvent.InputTuple, SetFeedImplementationEvent.OutputTuple, SetFeedImplementationEvent.OutputObject>;
	getEvent(key: "SetSwapFactory"): TypedContractEvent<SetSwapFactoryEvent.InputTuple, SetSwapFactoryEvent.OutputTuple, SetSwapFactoryEvent.OutputObject>;
	getEvent(key: "SetUSD"): TypedContractEvent<SetUSDEvent.InputTuple, SetUSDEvent.OutputTuple, SetUSDEvent.OutputObject>;
	getEvent(key: "SetWETH"): TypedContractEvent<SetWETHEvent.InputTuple, SetWETHEvent.OutputTuple, SetWETHEvent.OutputObject>;
	filters: {
		"FeedConfirmed(address,address,address,address,uint16,address)": TypedContractEvent<FeedConfirmedEvent.InputTuple, FeedConfirmedEvent.OutputTuple, FeedConfirmedEvent.OutputObject>;
		FeedConfirmed: TypedContractEvent<FeedConfirmedEvent.InputTuple, FeedConfirmedEvent.OutputTuple, FeedConfirmedEvent.OutputObject>;
		"FeedProposed(address,address,address,address,address)": TypedContractEvent<FeedProposedEvent.InputTuple, FeedProposedEvent.OutputTuple, FeedProposedEvent.OutputObject>;
		FeedProposed: TypedContractEvent<FeedProposedEvent.InputTuple, FeedProposedEvent.OutputTuple, FeedProposedEvent.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$13.InputTuple, InitializedEvent$13.OutputTuple, InitializedEvent$13.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$13.InputTuple, InitializedEvent$13.OutputTuple, InitializedEvent$13.OutputObject>;
		"OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$5.InputTuple, OwnershipTransferredEvent$5.OutputTuple, OwnershipTransferredEvent$5.OutputObject>;
		OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$5.InputTuple, OwnershipTransferredEvent$5.OutputTuple, OwnershipTransferredEvent$5.OutputObject>;
		"SetFeedImplementation(address)": TypedContractEvent<SetFeedImplementationEvent.InputTuple, SetFeedImplementationEvent.OutputTuple, SetFeedImplementationEvent.OutputObject>;
		SetFeedImplementation: TypedContractEvent<SetFeedImplementationEvent.InputTuple, SetFeedImplementationEvent.OutputTuple, SetFeedImplementationEvent.OutputObject>;
		"SetSwapFactory(address)": TypedContractEvent<SetSwapFactoryEvent.InputTuple, SetSwapFactoryEvent.OutputTuple, SetSwapFactoryEvent.OutputObject>;
		SetSwapFactory: TypedContractEvent<SetSwapFactoryEvent.InputTuple, SetSwapFactoryEvent.OutputTuple, SetSwapFactoryEvent.OutputObject>;
		"SetUSD(address)": TypedContractEvent<SetUSDEvent.InputTuple, SetUSDEvent.OutputTuple, SetUSDEvent.OutputObject>;
		SetUSD: TypedContractEvent<SetUSDEvent.InputTuple, SetUSDEvent.OutputTuple, SetUSDEvent.OutputObject>;
		"SetWETH(address)": TypedContractEvent<SetWETHEvent.InputTuple, SetWETHEvent.OutputTuple, SetWETHEvent.OutputObject>;
		SetWETH: TypedContractEvent<SetWETHEvent.InputTuple, SetWETHEvent.OutputTuple, SetWETHEvent.OutputObject>;
	};
}
export interface MasterChefInterface extends Interface {
	getFunction(nameOrSignature: "WETH" | "add" | "deposit" | "depositPermit" | "getMultiplier" | "getPoolRewardsByTime" | "getPoolRewardsPerSec" | "getRewardsPerShare" | "hasPool" | "initializeChef" | "massUpdatePools" | "owner" | "pendingRewards" | "poolId" | "poolInfo" | "poolLength" | "renounceOwnership" | "rewardToken" | "rewardVault" | "rewardsPerSec" | "set" | "setRewardsPerSec" | "totalAllocPoint" | "transferOwnership" | "updatePool" | "userInfo" | "withdraw"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Deposit" | "Initialized" | "InitializedChef" | "OwnershipTransferred" | "SetPool" | "SetRewards" | "Withdraw"): EventFragment;
	encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
	encodeFunctionData(functionFragment: "add", values: [
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "deposit", values: [
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "depositPermit", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "getMultiplier", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getPoolRewardsByTime", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getPoolRewardsPerSec", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getRewardsPerShare", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "hasPool", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "initializeChef", values: [
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "massUpdatePools", values?: undefined): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "pendingRewards", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolId", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolInfo", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "poolLength", values?: undefined): string;
	encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
	encodeFunctionData(functionFragment: "rewardToken", values?: undefined): string;
	encodeFunctionData(functionFragment: "rewardVault", values?: undefined): string;
	encodeFunctionData(functionFragment: "rewardsPerSec", values?: undefined): string;
	encodeFunctionData(functionFragment: "set", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "setRewardsPerSec", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "totalAllocPoint", values?: undefined): string;
	encodeFunctionData(functionFragment: "transferOwnership", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "updatePool", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "userInfo", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "depositPermit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getMultiplier", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getPoolRewardsByTime", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getPoolRewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getRewardsPerShare", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "hasPool", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeChef", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "massUpdatePools", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "pendingRewards", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardVault", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setRewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalAllocPoint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace DepositEvent$4 {
	type InputTuple = [
		user: AddressLike,
		pid: BigNumberish,
		amount: BigNumberish
	];
	type OutputTuple = [
		user: string,
		pid: bigint,
		amount: bigint
	];
	interface OutputObject {
		user: string;
		pid: bigint;
		amount: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$14 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedChefEvent {
	type InputTuple = [
		WETH: AddressLike,
		rewardToken: AddressLike,
		rewardVault: AddressLike
	];
	type OutputTuple = [
		WETH: string,
		rewardToken: string,
		rewardVault: string
	];
	interface OutputObject {
		WETH: string;
		rewardToken: string;
		rewardVault: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$6 {
	type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike
	];
	type OutputTuple = [
		previousOwner: string,
		newOwner: string
	];
	interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPoolEvent {
	type InputTuple = [
		pid: BigNumberish,
		lpToken: AddressLike,
		newAllocPoint: BigNumberish,
		startTime: BigNumberish,
		endTime: BigNumberish
	];
	type OutputTuple = [
		pid: bigint,
		lpToken: string,
		newAllocPoint: bigint,
		startTime: bigint,
		endTime: bigint
	];
	interface OutputObject {
		pid: bigint;
		lpToken: string;
		newAllocPoint: bigint;
		startTime: bigint;
		endTime: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetRewardsEvent {
	type InputTuple = [
		rewardsPerSec: BigNumberish
	];
	type OutputTuple = [
		rewardsPerSec: bigint
	];
	interface OutputObject {
		rewardsPerSec: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$4 {
	type InputTuple = [
		user: AddressLike,
		pid: BigNumberish,
		amount: BigNumberish
	];
	type OutputTuple = [
		user: string,
		pid: bigint,
		amount: bigint
	];
	interface OutputObject {
		user: string;
		pid: bigint;
		amount: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface MasterChef extends BaseContract {
	connect(runner?: ContractRunner | null): MasterChef;
	waitForDeployment(): Promise<this>;
	interface: MasterChefInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	WETH: TypedContractMethod<[
	], [
		string
	], "view">;
	add: TypedContractMethod<[
		_lpToken: AddressLike,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		bigint
	], "nonpayable">;
	deposit: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "payable">;
	depositPermit: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish,
		_deadline: BigNumberish,
		_signature: BytesLike
	], [
		void
	], "nonpayable">;
	getMultiplier: TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getPoolRewardsByTime: TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getPoolRewardsPerSec: TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getRewardsPerShare: TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	hasPool: TypedContractMethod<[
		_lpToken: AddressLike
	], [
		boolean
	], "view">;
	initializeChef: TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	massUpdatePools: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	owner: TypedContractMethod<[
	], [
		string
	], "view">;
	pendingRewards: TypedContractMethod<[
		_pid: BigNumberish,
		_user: AddressLike
	], [
		bigint
	], "view">;
	poolId: TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	poolInfo: TypedContractMethod<[
		arg0: BigNumberish
	], [
		[
			string,
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		] & {
			lpToken: string;
			allocPoint: bigint;
			startTime: bigint;
			endTime: bigint;
			lastRewardTime: bigint;
			accRewardsPerShare: bigint;
		}
	], "view">;
	poolLength: TypedContractMethod<[
	], [
		bigint
	], "view">;
	renounceOwnership: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	rewardToken: TypedContractMethod<[
	], [
		string
	], "view">;
	rewardVault: TypedContractMethod<[
	], [
		string
	], "view">;
	rewardsPerSec: TypedContractMethod<[
	], [
		bigint
	], "view">;
	set: TypedContractMethod<[
		_pid: BigNumberish,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		void
	], "nonpayable">;
	setRewardsPerSec: TypedContractMethod<[
		_rewardsPerSec: BigNumberish
	], [
		void
	], "nonpayable">;
	totalAllocPoint: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transferOwnership: TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	updatePool: TypedContractMethod<[
		_pid: BigNumberish
	], [
		void
	], "nonpayable">;
	userInfo: TypedContractMethod<[
		arg0: BigNumberish,
		arg1: AddressLike
	], [
		[
			bigint,
			bigint
		] & {
			amount: bigint;
			rewardDebt: bigint;
		}
	], "view">;
	withdraw: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "WETH"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "add"): TypedContractMethod<[
		_lpToken: AddressLike,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "payable">;
	getFunction(nameOrSignature: "depositPermit"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish,
		_deadline: BigNumberish,
		_signature: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "getMultiplier"): TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getPoolRewardsByTime"): TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getPoolRewardsPerSec"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getRewardsPerShare"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "hasPool"): TypedContractMethod<[
		_lpToken: AddressLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "initializeChef"): TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "massUpdatePools"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "owner"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "pendingRewards"): TypedContractMethod<[
		_pid: BigNumberish,
		_user: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolId"): TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolInfo"): TypedContractMethod<[
		arg0: BigNumberish
	], [
		[
			string,
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		] & {
			lpToken: string;
			allocPoint: bigint;
			startTime: bigint;
			endTime: bigint;
			lastRewardTime: bigint;
			accRewardsPerShare: bigint;
		}
	], "view">;
	getFunction(nameOrSignature: "poolLength"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "rewardToken"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "rewardVault"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "rewardsPerSec"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "set"): TypedContractMethod<[
		_pid: BigNumberish,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setRewardsPerSec"): TypedContractMethod<[
		_rewardsPerSec: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "totalAllocPoint"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "updatePool"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "userInfo"): TypedContractMethod<[
		arg0: BigNumberish,
		arg1: AddressLike
	], [
		[
			bigint,
			bigint
		] & {
			amount: bigint;
			rewardDebt: bigint;
		}
	], "view">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getEvent(key: "Deposit"): TypedContractEvent<DepositEvent$4.InputTuple, DepositEvent$4.OutputTuple, DepositEvent$4.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$14.InputTuple, InitializedEvent$14.OutputTuple, InitializedEvent$14.OutputObject>;
	getEvent(key: "InitializedChef"): TypedContractEvent<InitializedChefEvent.InputTuple, InitializedChefEvent.OutputTuple, InitializedChefEvent.OutputObject>;
	getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$6.InputTuple, OwnershipTransferredEvent$6.OutputTuple, OwnershipTransferredEvent$6.OutputObject>;
	getEvent(key: "SetPool"): TypedContractEvent<SetPoolEvent.InputTuple, SetPoolEvent.OutputTuple, SetPoolEvent.OutputObject>;
	getEvent(key: "SetRewards"): TypedContractEvent<SetRewardsEvent.InputTuple, SetRewardsEvent.OutputTuple, SetRewardsEvent.OutputObject>;
	getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$4.InputTuple, WithdrawEvent$4.OutputTuple, WithdrawEvent$4.OutputObject>;
	filters: {
		"Deposit(address,uint16,uint256)": TypedContractEvent<DepositEvent$4.InputTuple, DepositEvent$4.OutputTuple, DepositEvent$4.OutputObject>;
		Deposit: TypedContractEvent<DepositEvent$4.InputTuple, DepositEvent$4.OutputTuple, DepositEvent$4.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$14.InputTuple, InitializedEvent$14.OutputTuple, InitializedEvent$14.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$14.InputTuple, InitializedEvent$14.OutputTuple, InitializedEvent$14.OutputObject>;
		"InitializedChef(address,address,address)": TypedContractEvent<InitializedChefEvent.InputTuple, InitializedChefEvent.OutputTuple, InitializedChefEvent.OutputObject>;
		InitializedChef: TypedContractEvent<InitializedChefEvent.InputTuple, InitializedChefEvent.OutputTuple, InitializedChefEvent.OutputObject>;
		"OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$6.InputTuple, OwnershipTransferredEvent$6.OutputTuple, OwnershipTransferredEvent$6.OutputObject>;
		OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$6.InputTuple, OwnershipTransferredEvent$6.OutputTuple, OwnershipTransferredEvent$6.OutputObject>;
		"SetPool(uint16,address,uint32,uint64,uint64)": TypedContractEvent<SetPoolEvent.InputTuple, SetPoolEvent.OutputTuple, SetPoolEvent.OutputObject>;
		SetPool: TypedContractEvent<SetPoolEvent.InputTuple, SetPoolEvent.OutputTuple, SetPoolEvent.OutputObject>;
		"SetRewards(uint256)": TypedContractEvent<SetRewardsEvent.InputTuple, SetRewardsEvent.OutputTuple, SetRewardsEvent.OutputObject>;
		SetRewards: TypedContractEvent<SetRewardsEvent.InputTuple, SetRewardsEvent.OutputTuple, SetRewardsEvent.OutputObject>;
		"Withdraw(address,uint16,uint256)": TypedContractEvent<WithdrawEvent$4.InputTuple, WithdrawEvent$4.OutputTuple, WithdrawEvent$4.OutputObject>;
		Withdraw: TypedContractEvent<WithdrawEvent$4.InputTuple, WithdrawEvent$4.OutputTuple, WithdrawEvent$4.OutputObject>;
	};
}
export interface MasterPoolInterface extends Interface {
	getFunction(nameOrSignature: "WETH" | "add" | "deposit" | "depositPermit" | "getMultiplier" | "getPoolRewardsByTime" | "getPoolRewardsPerSec" | "getRewardsPerShare" | "halvingInterval" | "halvingRate" | "hasPool" | "hasPoolToken" | "initializeChef" | "initializePool" | "massUpdatePools" | "owner" | "pendingRewards" | "poolDeposit" | "poolId" | "poolIdByTokens" | "poolInfo" | "poolLength" | "poolMint" | "poolTokenImplementation" | "poolTokens" | "poolTransfer" | "poolWithdraw" | "renounceOwnership" | "rewardToken" | "rewardVault" | "rewardsPerSec" | "set" | "setHalvingInterval" | "setHalvingRate" | "setRewardsPerSec" | "totalAllocPoint" | "transferOwnership" | "updatePool" | "userInfo" | "withdraw"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Deposit" | "Initialized" | "InitializedChef" | "OwnershipTransferred" | "SetHalvingInterval" | "SetHalvingRate" | "SetPool" | "SetPoolToken" | "SetRewards" | "Withdraw"): EventFragment;
	encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
	encodeFunctionData(functionFragment: "add", values: [
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "deposit", values: [
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "depositPermit", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "getMultiplier", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getPoolRewardsByTime", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getPoolRewardsPerSec", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "getRewardsPerShare", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "halvingInterval", values?: undefined): string;
	encodeFunctionData(functionFragment: "halvingRate", values?: undefined): string;
	encodeFunctionData(functionFragment: "hasPool", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "hasPoolToken", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "initializeChef", values: [
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "initializePool", values: [
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "massUpdatePools", values?: undefined): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "pendingRewards", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolDeposit", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "poolId", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolIdByTokens", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolInfo", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "poolLength", values?: undefined): string;
	encodeFunctionData(functionFragment: "poolMint", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "poolTokenImplementation", values?: undefined): string;
	encodeFunctionData(functionFragment: "poolTokens", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "poolTransfer", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "poolWithdraw", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
	encodeFunctionData(functionFragment: "rewardToken", values?: undefined): string;
	encodeFunctionData(functionFragment: "rewardVault", values?: undefined): string;
	encodeFunctionData(functionFragment: "rewardsPerSec", values?: undefined): string;
	encodeFunctionData(functionFragment: "set", values: [
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		boolean
	]): string;
	encodeFunctionData(functionFragment: "setHalvingInterval", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "setHalvingRate", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "setRewardsPerSec", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "totalAllocPoint", values?: undefined): string;
	encodeFunctionData(functionFragment: "transferOwnership", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "updatePool", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "userInfo", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "depositPermit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getMultiplier", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getPoolRewardsByTime", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getPoolRewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getRewardsPerShare", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "halvingInterval", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "halvingRate", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "hasPool", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "hasPoolToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeChef", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializePool", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "massUpdatePools", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "pendingRewards", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolIdByTokens", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolTokenImplementation", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolTokens", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolTransfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "poolWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardVault", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setHalvingInterval", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setHalvingRate", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setRewardsPerSec", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalAllocPoint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace DepositEvent$5 {
	type InputTuple = [
		user: AddressLike,
		pid: BigNumberish,
		amount: BigNumberish
	];
	type OutputTuple = [
		user: string,
		pid: bigint,
		amount: bigint
	];
	interface OutputObject {
		user: string;
		pid: bigint;
		amount: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$15 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedChefEvent$1 {
	type InputTuple = [
		WETH: AddressLike,
		rewardToken: AddressLike,
		rewardVault: AddressLike
	];
	type OutputTuple = [
		WETH: string,
		rewardToken: string,
		rewardVault: string
	];
	interface OutputObject {
		WETH: string;
		rewardToken: string;
		rewardVault: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$7 {
	type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike
	];
	type OutputTuple = [
		previousOwner: string,
		newOwner: string
	];
	interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetHalvingIntervalEvent {
	type InputTuple = [
		halvingInterval: BigNumberish
	];
	type OutputTuple = [
		halvingInterval: bigint
	];
	interface OutputObject {
		halvingInterval: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetHalvingRateEvent {
	type InputTuple = [
		halvingRate: BigNumberish
	];
	type OutputTuple = [
		halvingRate: bigint
	];
	interface OutputObject {
		halvingRate: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPoolEvent$1 {
	type InputTuple = [
		pid: BigNumberish,
		lpToken: AddressLike,
		newAllocPoint: BigNumberish,
		startTime: BigNumberish,
		endTime: BigNumberish
	];
	type OutputTuple = [
		pid: bigint,
		lpToken: string,
		newAllocPoint: bigint,
		startTime: bigint,
		endTime: bigint
	];
	interface OutputObject {
		pid: bigint;
		lpToken: string;
		newAllocPoint: bigint;
		startTime: bigint;
		endTime: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetPoolTokenEvent {
	type InputTuple = [
		pid: BigNumberish,
		poolToken: AddressLike
	];
	type OutputTuple = [
		pid: bigint,
		poolToken: string
	];
	interface OutputObject {
		pid: bigint;
		poolToken: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace SetRewardsEvent$1 {
	type InputTuple = [
		rewardsPerSec: BigNumberish
	];
	type OutputTuple = [
		rewardsPerSec: bigint
	];
	interface OutputObject {
		rewardsPerSec: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$5 {
	type InputTuple = [
		user: AddressLike,
		pid: BigNumberish,
		amount: BigNumberish
	];
	type OutputTuple = [
		user: string,
		pid: bigint,
		amount: bigint
	];
	interface OutputObject {
		user: string;
		pid: bigint;
		amount: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface MasterPool extends BaseContract {
	connect(runner?: ContractRunner | null): MasterPool;
	waitForDeployment(): Promise<this>;
	interface: MasterPoolInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	WETH: TypedContractMethod<[
	], [
		string
	], "view">;
	add: TypedContractMethod<[
		_lpToken: AddressLike,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		bigint
	], "nonpayable">;
	deposit: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "payable">;
	depositPermit: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish,
		_deadline: BigNumberish,
		_signature: BytesLike
	], [
		void
	], "nonpayable">;
	getMultiplier: TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getPoolRewardsByTime: TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getPoolRewardsPerSec: TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getRewardsPerShare: TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	halvingInterval: TypedContractMethod<[
	], [
		bigint
	], "view">;
	halvingRate: TypedContractMethod<[
	], [
		bigint
	], "view">;
	hasPool: TypedContractMethod<[
		_lpToken: AddressLike
	], [
		boolean
	], "view">;
	hasPoolToken: TypedContractMethod<[
		_poolToken: AddressLike
	], [
		boolean
	], "view">;
	initializeChef: TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	initializePool: TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_poolTokenImplementation: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_halvingRate: BigNumberish,
		_halvingInterval: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	massUpdatePools: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	owner: TypedContractMethod<[
	], [
		string
	], "view">;
	pendingRewards: TypedContractMethod<[
		_pid: BigNumberish,
		_user: AddressLike
	], [
		bigint
	], "view">;
	poolDeposit: TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	poolId: TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	poolIdByTokens: TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	poolInfo: TypedContractMethod<[
		arg0: BigNumberish
	], [
		[
			string,
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		] & {
			lpToken: string;
			allocPoint: bigint;
			startTime: bigint;
			endTime: bigint;
			lastRewardTime: bigint;
			accRewardsPerShare: bigint;
		}
	], "view">;
	poolLength: TypedContractMethod<[
	], [
		bigint
	], "view">;
	poolMint: TypedContractMethod<[
		from: AddressLike
	], [
		void
	], "nonpayable">;
	poolTokenImplementation: TypedContractMethod<[
	], [
		string
	], "view">;
	poolTokens: TypedContractMethod<[
		arg0: BigNumberish
	], [
		string
	], "view">;
	poolTransfer: TypedContractMethod<[
		_from: AddressLike,
		_to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	poolWithdraw: TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	renounceOwnership: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	rewardToken: TypedContractMethod<[
	], [
		string
	], "view">;
	rewardVault: TypedContractMethod<[
	], [
		string
	], "view">;
	rewardsPerSec: TypedContractMethod<[
	], [
		bigint
	], "view">;
	set: TypedContractMethod<[
		_pid: BigNumberish,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		void
	], "nonpayable">;
	setHalvingInterval: TypedContractMethod<[
		_halvingInterval: BigNumberish
	], [
		void
	], "nonpayable">;
	setHalvingRate: TypedContractMethod<[
		_halvingRate: BigNumberish
	], [
		void
	], "nonpayable">;
	setRewardsPerSec: TypedContractMethod<[
		_rewardsPerSec: BigNumberish
	], [
		void
	], "nonpayable">;
	totalAllocPoint: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transferOwnership: TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	updatePool: TypedContractMethod<[
		_pid: BigNumberish
	], [
		void
	], "nonpayable">;
	userInfo: TypedContractMethod<[
		arg0: BigNumberish,
		arg1: AddressLike
	], [
		[
			bigint,
			bigint
		] & {
			amount: bigint;
			rewardDebt: bigint;
		}
	], "view">;
	withdraw: TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "WETH"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "add"): TypedContractMethod<[
		_lpToken: AddressLike,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "payable">;
	getFunction(nameOrSignature: "depositPermit"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish,
		_deadline: BigNumberish,
		_signature: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "getMultiplier"): TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getPoolRewardsByTime"): TypedContractMethod<[
		_pid: BigNumberish,
		_fromTime: BigNumberish,
		_toTime: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getPoolRewardsPerSec"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "getRewardsPerShare"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "halvingInterval"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "halvingRate"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "hasPool"): TypedContractMethod<[
		_lpToken: AddressLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "hasPoolToken"): TypedContractMethod<[
		_poolToken: AddressLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "initializeChef"): TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "initializePool"): TypedContractMethod<[
		_owner: AddressLike,
		_WETH: AddressLike,
		_poolTokenImplementation: AddressLike,
		_rewardToken: AddressLike,
		_rewardVault: AddressLike,
		_rewardsPerSec: BigNumberish,
		_halvingRate: BigNumberish,
		_halvingInterval: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		addPool: boolean
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "massUpdatePools"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "owner"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "pendingRewards"): TypedContractMethod<[
		_pid: BigNumberish,
		_user: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolDeposit"): TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "poolId"): TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolIdByTokens"): TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolInfo"): TypedContractMethod<[
		arg0: BigNumberish
	], [
		[
			string,
			bigint,
			bigint,
			bigint,
			bigint,
			bigint
		] & {
			lpToken: string;
			allocPoint: bigint;
			startTime: bigint;
			endTime: bigint;
			lastRewardTime: bigint;
			accRewardsPerShare: bigint;
		}
	], "view">;
	getFunction(nameOrSignature: "poolLength"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "poolMint"): TypedContractMethod<[
		from: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "poolTokenImplementation"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "poolTokens"): TypedContractMethod<[
		arg0: BigNumberish
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "poolTransfer"): TypedContractMethod<[
		_from: AddressLike,
		_to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "poolWithdraw"): TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "rewardToken"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "rewardVault"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "rewardsPerSec"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "set"): TypedContractMethod<[
		_pid: BigNumberish,
		_allocPoint: BigNumberish,
		_startTime: BigNumberish,
		_endTime: BigNumberish,
		_withUpdate: boolean
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setHalvingInterval"): TypedContractMethod<[
		_halvingInterval: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setHalvingRate"): TypedContractMethod<[
		_halvingRate: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "setRewardsPerSec"): TypedContractMethod<[
		_rewardsPerSec: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "totalAllocPoint"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "updatePool"): TypedContractMethod<[
		_pid: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "userInfo"): TypedContractMethod<[
		arg0: BigNumberish,
		arg1: AddressLike
	], [
		[
			bigint,
			bigint
		] & {
			amount: bigint;
			rewardDebt: bigint;
		}
	], "view">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		_pid: BigNumberish,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getEvent(key: "Deposit"): TypedContractEvent<DepositEvent$5.InputTuple, DepositEvent$5.OutputTuple, DepositEvent$5.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$15.InputTuple, InitializedEvent$15.OutputTuple, InitializedEvent$15.OutputObject>;
	getEvent(key: "InitializedChef"): TypedContractEvent<InitializedChefEvent$1.InputTuple, InitializedChefEvent$1.OutputTuple, InitializedChefEvent$1.OutputObject>;
	getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$7.InputTuple, OwnershipTransferredEvent$7.OutputTuple, OwnershipTransferredEvent$7.OutputObject>;
	getEvent(key: "SetHalvingInterval"): TypedContractEvent<SetHalvingIntervalEvent.InputTuple, SetHalvingIntervalEvent.OutputTuple, SetHalvingIntervalEvent.OutputObject>;
	getEvent(key: "SetHalvingRate"): TypedContractEvent<SetHalvingRateEvent.InputTuple, SetHalvingRateEvent.OutputTuple, SetHalvingRateEvent.OutputObject>;
	getEvent(key: "SetPool"): TypedContractEvent<SetPoolEvent$1.InputTuple, SetPoolEvent$1.OutputTuple, SetPoolEvent$1.OutputObject>;
	getEvent(key: "SetPoolToken"): TypedContractEvent<SetPoolTokenEvent.InputTuple, SetPoolTokenEvent.OutputTuple, SetPoolTokenEvent.OutputObject>;
	getEvent(key: "SetRewards"): TypedContractEvent<SetRewardsEvent$1.InputTuple, SetRewardsEvent$1.OutputTuple, SetRewardsEvent$1.OutputObject>;
	getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$5.InputTuple, WithdrawEvent$5.OutputTuple, WithdrawEvent$5.OutputObject>;
	filters: {
		"Deposit(address,uint16,uint256)": TypedContractEvent<DepositEvent$5.InputTuple, DepositEvent$5.OutputTuple, DepositEvent$5.OutputObject>;
		Deposit: TypedContractEvent<DepositEvent$5.InputTuple, DepositEvent$5.OutputTuple, DepositEvent$5.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$15.InputTuple, InitializedEvent$15.OutputTuple, InitializedEvent$15.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$15.InputTuple, InitializedEvent$15.OutputTuple, InitializedEvent$15.OutputObject>;
		"InitializedChef(address,address,address)": TypedContractEvent<InitializedChefEvent$1.InputTuple, InitializedChefEvent$1.OutputTuple, InitializedChefEvent$1.OutputObject>;
		InitializedChef: TypedContractEvent<InitializedChefEvent$1.InputTuple, InitializedChefEvent$1.OutputTuple, InitializedChefEvent$1.OutputObject>;
		"OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$7.InputTuple, OwnershipTransferredEvent$7.OutputTuple, OwnershipTransferredEvent$7.OutputObject>;
		OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$7.InputTuple, OwnershipTransferredEvent$7.OutputTuple, OwnershipTransferredEvent$7.OutputObject>;
		"SetHalvingInterval(uint64)": TypedContractEvent<SetHalvingIntervalEvent.InputTuple, SetHalvingIntervalEvent.OutputTuple, SetHalvingIntervalEvent.OutputObject>;
		SetHalvingInterval: TypedContractEvent<SetHalvingIntervalEvent.InputTuple, SetHalvingIntervalEvent.OutputTuple, SetHalvingIntervalEvent.OutputObject>;
		"SetHalvingRate(uint16)": TypedContractEvent<SetHalvingRateEvent.InputTuple, SetHalvingRateEvent.OutputTuple, SetHalvingRateEvent.OutputObject>;
		SetHalvingRate: TypedContractEvent<SetHalvingRateEvent.InputTuple, SetHalvingRateEvent.OutputTuple, SetHalvingRateEvent.OutputObject>;
		"SetPool(uint16,address,uint32,uint64,uint64)": TypedContractEvent<SetPoolEvent$1.InputTuple, SetPoolEvent$1.OutputTuple, SetPoolEvent$1.OutputObject>;
		SetPool: TypedContractEvent<SetPoolEvent$1.InputTuple, SetPoolEvent$1.OutputTuple, SetPoolEvent$1.OutputObject>;
		"SetPoolToken(uint16,address)": TypedContractEvent<SetPoolTokenEvent.InputTuple, SetPoolTokenEvent.OutputTuple, SetPoolTokenEvent.OutputObject>;
		SetPoolToken: TypedContractEvent<SetPoolTokenEvent.InputTuple, SetPoolTokenEvent.OutputTuple, SetPoolTokenEvent.OutputObject>;
		"SetRewards(uint256)": TypedContractEvent<SetRewardsEvent$1.InputTuple, SetRewardsEvent$1.OutputTuple, SetRewardsEvent$1.OutputObject>;
		SetRewards: TypedContractEvent<SetRewardsEvent$1.InputTuple, SetRewardsEvent$1.OutputTuple, SetRewardsEvent$1.OutputObject>;
		"Withdraw(address,uint16,uint256)": TypedContractEvent<WithdrawEvent$5.InputTuple, WithdrawEvent$5.OutputTuple, WithdrawEvent$5.OutputObject>;
		Withdraw: TypedContractEvent<WithdrawEvent$5.InputTuple, WithdrawEvent$5.OutputTuple, WithdrawEvent$5.OutputObject>;
	};
}
export interface RewardVaultInterface extends Interface {
	getFunction(nameOrSignature: "addSpender" | "initializeVault" | "owner" | "removeSpender" | "renounceOwnership" | "sendTo" | "spenders" | "transferOwnership" | "withdraw"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "AddSpender" | "Initialized" | "OwnershipTransferred" | "RemoveSpender" | "Rewarded" | "Withdrawn"): EventFragment;
	encodeFunctionData(functionFragment: "addSpender", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "initializeVault", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "removeSpender", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
	encodeFunctionData(functionFragment: "sendTo", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "spenders", values?: undefined): string;
	encodeFunctionData(functionFragment: "transferOwnership", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "addSpender", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeVault", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "removeSpender", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "sendTo", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "spenders", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace AddSpenderEvent {
	type InputTuple = [
		newSpender: AddressLike
	];
	type OutputTuple = [
		newSpender: string
	];
	interface OutputObject {
		newSpender: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$16 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$8 {
	type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike
	];
	type OutputTuple = [
		previousOwner: string,
		newOwner: string
	];
	interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace RemoveSpenderEvent {
	type InputTuple = [
		oldSpender: AddressLike
	];
	type OutputTuple = [
		oldSpender: string
	];
	interface OutputObject {
		oldSpender: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace RewardedEvent {
	type InputTuple = [
		token: AddressLike,
		spender: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		token: string,
		spender: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		token: string;
		spender: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawnEvent {
	type InputTuple = [
		token: AddressLike,
		spender: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		token: string,
		spender: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		token: string;
		spender: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface RewardVault extends BaseContract {
	connect(runner?: ContractRunner | null): RewardVault;
	waitForDeployment(): Promise<this>;
	interface: RewardVaultInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	addSpender: TypedContractMethod<[
		_spender: AddressLike
	], [
		void
	], "nonpayable">;
	initializeVault: TypedContractMethod<[
		_initOwner: AddressLike
	], [
		void
	], "nonpayable">;
	owner: TypedContractMethod<[
	], [
		string
	], "view">;
	removeSpender: TypedContractMethod<[
		_spender: AddressLike
	], [
		void
	], "nonpayable">;
	renounceOwnership: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	sendTo: TypedContractMethod<[
		token: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	spenders: TypedContractMethod<[
	], [
		string[]
	], "view">;
	transferOwnership: TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	withdraw: TypedContractMethod<[
		token: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "addSpender"): TypedContractMethod<[
		_spender: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "initializeVault"): TypedContractMethod<[
		_initOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "owner"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "removeSpender"): TypedContractMethod<[
		_spender: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "sendTo"): TypedContractMethod<[
		token: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "spenders"): TypedContractMethod<[
	], [
		string[]
	], "view">;
	getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		token: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getEvent(key: "AddSpender"): TypedContractEvent<AddSpenderEvent.InputTuple, AddSpenderEvent.OutputTuple, AddSpenderEvent.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$16.InputTuple, InitializedEvent$16.OutputTuple, InitializedEvent$16.OutputObject>;
	getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$8.InputTuple, OwnershipTransferredEvent$8.OutputTuple, OwnershipTransferredEvent$8.OutputObject>;
	getEvent(key: "RemoveSpender"): TypedContractEvent<RemoveSpenderEvent.InputTuple, RemoveSpenderEvent.OutputTuple, RemoveSpenderEvent.OutputObject>;
	getEvent(key: "Rewarded"): TypedContractEvent<RewardedEvent.InputTuple, RewardedEvent.OutputTuple, RewardedEvent.OutputObject>;
	getEvent(key: "Withdrawn"): TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
	filters: {
		"AddSpender(address)": TypedContractEvent<AddSpenderEvent.InputTuple, AddSpenderEvent.OutputTuple, AddSpenderEvent.OutputObject>;
		AddSpender: TypedContractEvent<AddSpenderEvent.InputTuple, AddSpenderEvent.OutputTuple, AddSpenderEvent.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$16.InputTuple, InitializedEvent$16.OutputTuple, InitializedEvent$16.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$16.InputTuple, InitializedEvent$16.OutputTuple, InitializedEvent$16.OutputObject>;
		"OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$8.InputTuple, OwnershipTransferredEvent$8.OutputTuple, OwnershipTransferredEvent$8.OutputObject>;
		OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$8.InputTuple, OwnershipTransferredEvent$8.OutputTuple, OwnershipTransferredEvent$8.OutputObject>;
		"RemoveSpender(address)": TypedContractEvent<RemoveSpenderEvent.InputTuple, RemoveSpenderEvent.OutputTuple, RemoveSpenderEvent.OutputObject>;
		RemoveSpender: TypedContractEvent<RemoveSpenderEvent.InputTuple, RemoveSpenderEvent.OutputTuple, RemoveSpenderEvent.OutputObject>;
		"Rewarded(address,address,address,uint256)": TypedContractEvent<RewardedEvent.InputTuple, RewardedEvent.OutputTuple, RewardedEvent.OutputObject>;
		Rewarded: TypedContractEvent<RewardedEvent.InputTuple, RewardedEvent.OutputTuple, RewardedEvent.OutputObject>;
		"Withdrawn(address,address,address,uint256)": TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
		Withdrawn: TypedContractEvent<WithdrawnEvent.InputTuple, WithdrawnEvent.OutputTuple, WithdrawnEvent.OutputObject>;
	};
}
export interface InitializableProxyInterface extends Interface {
	getFunction(nameOrSignature: "changeProxyAdmin" | "changeProxyDescription" | "implementation" | "initializeProxy" | "proxyAdmin" | "proxyDescription" | "upgradeToAndCall"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "AdminChanged" | "DescriptionChanged" | "Upgraded"): EventFragment;
	encodeFunctionData(functionFragment: "changeProxyAdmin", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "changeProxyDescription", values: [
		string
	]): string;
	encodeFunctionData(functionFragment: "implementation", values?: undefined): string;
	encodeFunctionData(functionFragment: "initializeProxy", values: [
		string,
		AddressLike,
		AddressLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "proxyAdmin", values?: undefined): string;
	encodeFunctionData(functionFragment: "proxyDescription", values?: undefined): string;
	encodeFunctionData(functionFragment: "upgradeToAndCall", values: [
		AddressLike,
		BytesLike
	]): string;
	decodeFunctionResult(functionFragment: "changeProxyAdmin", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "changeProxyDescription", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "implementation", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeProxy", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "proxyAdmin", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "proxyDescription", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
}
declare namespace AdminChangedEvent$1 {
	type InputTuple = [
		previousAdmin: AddressLike,
		newAdmin: AddressLike
	];
	type OutputTuple = [
		previousAdmin: string,
		newAdmin: string
	];
	interface OutputObject {
		previousAdmin: string;
		newAdmin: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace DescriptionChangedEvent$1 {
	type InputTuple = [
		description: string
	];
	type OutputTuple = [
		description: string
	];
	interface OutputObject {
		description: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace UpgradedEvent$1 {
	type InputTuple = [
		implementation: AddressLike
	];
	type OutputTuple = [
		implementation: string
	];
	interface OutputObject {
		implementation: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface InitializableProxy extends BaseContract {
	connect(runner?: ContractRunner | null): InitializableProxy;
	waitForDeployment(): Promise<this>;
	interface: InitializableProxyInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	changeProxyAdmin: TypedContractMethod<[
		newAdmin: AddressLike
	], [
		void
	], "nonpayable">;
	changeProxyDescription: TypedContractMethod<[
		_description: string
	], [
		void
	], "nonpayable">;
	implementation: TypedContractMethod<[
	], [
		string
	], "view">;
	initializeProxy: TypedContractMethod<[
		_description: string,
		newAdmin: AddressLike,
		newImplementation: AddressLike,
		data: BytesLike
	], [
		void
	], "payable">;
	proxyAdmin: TypedContractMethod<[
	], [
		string
	], "view">;
	proxyDescription: TypedContractMethod<[
	], [
		string
	], "view">;
	upgradeToAndCall: TypedContractMethod<[
		newImplementation: AddressLike,
		data: BytesLike
	], [
		void
	], "payable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "changeProxyAdmin"): TypedContractMethod<[
		newAdmin: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "changeProxyDescription"): TypedContractMethod<[
		_description: string
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "implementation"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "initializeProxy"): TypedContractMethod<[
		_description: string,
		newAdmin: AddressLike,
		newImplementation: AddressLike,
		data: BytesLike
	], [
		void
	], "payable">;
	getFunction(nameOrSignature: "proxyAdmin"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "proxyDescription"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "upgradeToAndCall"): TypedContractMethod<[
		newImplementation: AddressLike,
		data: BytesLike
	], [
		void
	], "payable">;
	getEvent(key: "AdminChanged"): TypedContractEvent<AdminChangedEvent$1.InputTuple, AdminChangedEvent$1.OutputTuple, AdminChangedEvent$1.OutputObject>;
	getEvent(key: "DescriptionChanged"): TypedContractEvent<DescriptionChangedEvent$1.InputTuple, DescriptionChangedEvent$1.OutputTuple, DescriptionChangedEvent$1.OutputObject>;
	getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent$1.InputTuple, UpgradedEvent$1.OutputTuple, UpgradedEvent$1.OutputObject>;
	filters: {
		"AdminChanged(address,address)": TypedContractEvent<AdminChangedEvent$1.InputTuple, AdminChangedEvent$1.OutputTuple, AdminChangedEvent$1.OutputObject>;
		AdminChanged: TypedContractEvent<AdminChangedEvent$1.InputTuple, AdminChangedEvent$1.OutputTuple, AdminChangedEvent$1.OutputObject>;
		"DescriptionChanged(string)": TypedContractEvent<DescriptionChangedEvent$1.InputTuple, DescriptionChangedEvent$1.OutputTuple, DescriptionChangedEvent$1.OutputObject>;
		DescriptionChanged: TypedContractEvent<DescriptionChangedEvent$1.InputTuple, DescriptionChangedEvent$1.OutputTuple, DescriptionChangedEvent$1.OutputObject>;
		"Upgraded(address)": TypedContractEvent<UpgradedEvent$1.InputTuple, UpgradedEvent$1.OutputTuple, UpgradedEvent$1.OutputObject>;
		Upgraded: TypedContractEvent<UpgradedEvent$1.InputTuple, UpgradedEvent$1.OutputTuple, UpgradedEvent$1.OutputObject>;
	};
}
export interface ERC20LockableInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "allowance" | "approve" | "balanceOf" | "decimals" | "eip712Domain" | "isLocked" | "isLockedUntil" | "lock" | "lockPermit" | "lockedUntil" | "name" | "nonces" | "permit" | "supportsInterface" | "symbol" | "totalSupply" | "transfer" | "transferFrom"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "EIP712DomainChanged" | "Initialized" | "Lock" | "LockedBy" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
	encodeFunctionData(functionFragment: "isLocked", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "isLockedUntil", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "lock", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "lockPermit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "lockedUntil", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "supportsInterface", values: [
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "isLockedUntil", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "lockPermit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "lockedUntil", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
}
declare namespace ApprovalEvent$16 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace EIP712DomainChangedEvent$5 {
	type InputTuple = [
	];
	type OutputTuple = [
	];
	interface OutputObject {
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$17 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace LockEvent$1 {
	type InputTuple = [
		owner: AddressLike,
		until: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		until: bigint
	];
	interface OutputObject {
		owner: string;
		until: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace LockedByEvent$1 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		until: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		until: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		until: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$16 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface ERC20Lockable extends BaseContract {
	connect(runner?: ContractRunner | null): ERC20Lockable;
	waitForDeployment(): Promise<this>;
	interface: ERC20LockableInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	eip712Domain: TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	isLocked: TypedContractMethod<[
		owner: AddressLike
	], [
		boolean
	], "view">;
	isLockedUntil: TypedContractMethod<[
		owner: AddressLike,
		until: BigNumberish
	], [
		boolean
	], "view">;
	lock: TypedContractMethod<[
		until: BigNumberish
	], [
		void
	], "nonpayable">;
	lockPermit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		until: BigNumberish,
		deadline: BigNumberish,
		signature: BytesLike
	], [
		void
	], "nonpayable">;
	lockedUntil: TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	supportsInterface: TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "eip712Domain"): TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getFunction(nameOrSignature: "isLocked"): TypedContractMethod<[
		owner: AddressLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "isLockedUntil"): TypedContractMethod<[
		owner: AddressLike,
		until: BigNumberish
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "lock"): TypedContractMethod<[
		until: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "lockPermit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		until: BigNumberish,
		deadline: BigNumberish,
		signature: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "lockedUntil"): TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$16.InputTuple, ApprovalEvent$16.OutputTuple, ApprovalEvent$16.OutputObject>;
	getEvent(key: "EIP712DomainChanged"): TypedContractEvent<EIP712DomainChangedEvent$5.InputTuple, EIP712DomainChangedEvent$5.OutputTuple, EIP712DomainChangedEvent$5.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$17.InputTuple, InitializedEvent$17.OutputTuple, InitializedEvent$17.OutputObject>;
	getEvent(key: "Lock"): TypedContractEvent<LockEvent$1.InputTuple, LockEvent$1.OutputTuple, LockEvent$1.OutputObject>;
	getEvent(key: "LockedBy"): TypedContractEvent<LockedByEvent$1.InputTuple, LockedByEvent$1.OutputTuple, LockedByEvent$1.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$16.InputTuple, TransferEvent$16.OutputTuple, TransferEvent$16.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$16.InputTuple, ApprovalEvent$16.OutputTuple, ApprovalEvent$16.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$16.InputTuple, ApprovalEvent$16.OutputTuple, ApprovalEvent$16.OutputObject>;
		"EIP712DomainChanged()": TypedContractEvent<EIP712DomainChangedEvent$5.InputTuple, EIP712DomainChangedEvent$5.OutputTuple, EIP712DomainChangedEvent$5.OutputObject>;
		EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent$5.InputTuple, EIP712DomainChangedEvent$5.OutputTuple, EIP712DomainChangedEvent$5.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$17.InputTuple, InitializedEvent$17.OutputTuple, InitializedEvent$17.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$17.InputTuple, InitializedEvent$17.OutputTuple, InitializedEvent$17.OutputObject>;
		"Lock(address,uint256)": TypedContractEvent<LockEvent$1.InputTuple, LockEvent$1.OutputTuple, LockEvent$1.OutputObject>;
		Lock: TypedContractEvent<LockEvent$1.InputTuple, LockEvent$1.OutputTuple, LockEvent$1.OutputObject>;
		"LockedBy(address,address,uint256)": TypedContractEvent<LockedByEvent$1.InputTuple, LockedByEvent$1.OutputTuple, LockedByEvent$1.OutputObject>;
		LockedBy: TypedContractEvent<LockedByEvent$1.InputTuple, LockedByEvent$1.OutputTuple, LockedByEvent$1.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$16.InputTuple, TransferEvent$16.OutputTuple, TransferEvent$16.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$16.InputTuple, TransferEvent$16.OutputTuple, TransferEvent$16.OutputObject>;
	};
}
export interface ERC20MockInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "allowance" | "approve" | "balanceOf" | "burn" | "burnFrom" | "decimals" | "eip712Domain" | "mint(address,uint256)" | "mint(uint256)" | "name" | "nonces" | "owner" | "permit" | "renounceOwnership" | "symbol" | "totalSupply" | "transfer" | "transferFrom" | "transferOwnership"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "EIP712DomainChanged" | "OwnershipTransferred" | "Transfer"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "burn", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "burnFrom", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
	encodeFunctionData(functionFragment: "mint(address,uint256)", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "mint(uint256)", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "owner", values?: undefined): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferOwnership", values: [
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mint(address,uint256)", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mint(uint256)", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
}
declare namespace ApprovalEvent$17 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace EIP712DomainChangedEvent$6 {
	type InputTuple = [
	];
	type OutputTuple = [
	];
	interface OutputObject {
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace OwnershipTransferredEvent$9 {
	type InputTuple = [
		previousOwner: AddressLike,
		newOwner: AddressLike
	];
	type OutputTuple = [
		previousOwner: string,
		newOwner: string
	];
	interface OutputObject {
		previousOwner: string;
		newOwner: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$17 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface ERC20Mock extends BaseContract {
	connect(runner?: ContractRunner | null): ERC20Mock;
	waitForDeployment(): Promise<this>;
	interface: ERC20MockInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	burn: TypedContractMethod<[
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	burnFrom: TypedContractMethod<[
		account: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	eip712Domain: TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	"mint(address,uint256)": TypedContractMethod<[
		to: AddressLike,
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	"mint(uint256)": TypedContractMethod<[
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	owner: TypedContractMethod<[
	], [
		string
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	renounceOwnership: TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferOwnership: TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "burn"): TypedContractMethod<[
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "burnFrom"): TypedContractMethod<[
		account: AddressLike,
		value: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "eip712Domain"): TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getFunction(nameOrSignature: "mint(address,uint256)"): TypedContractMethod<[
		to: AddressLike,
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "mint(uint256)"): TypedContractMethod<[
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "owner"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "renounceOwnership"): TypedContractMethod<[
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferOwnership"): TypedContractMethod<[
		newOwner: AddressLike
	], [
		void
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$17.InputTuple, ApprovalEvent$17.OutputTuple, ApprovalEvent$17.OutputObject>;
	getEvent(key: "EIP712DomainChanged"): TypedContractEvent<EIP712DomainChangedEvent$6.InputTuple, EIP712DomainChangedEvent$6.OutputTuple, EIP712DomainChangedEvent$6.OutputObject>;
	getEvent(key: "OwnershipTransferred"): TypedContractEvent<OwnershipTransferredEvent$9.InputTuple, OwnershipTransferredEvent$9.OutputTuple, OwnershipTransferredEvent$9.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$17.InputTuple, TransferEvent$17.OutputTuple, TransferEvent$17.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$17.InputTuple, ApprovalEvent$17.OutputTuple, ApprovalEvent$17.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$17.InputTuple, ApprovalEvent$17.OutputTuple, ApprovalEvent$17.OutputObject>;
		"EIP712DomainChanged()": TypedContractEvent<EIP712DomainChangedEvent$6.InputTuple, EIP712DomainChangedEvent$6.OutputTuple, EIP712DomainChangedEvent$6.OutputObject>;
		EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent$6.InputTuple, EIP712DomainChangedEvent$6.OutputTuple, EIP712DomainChangedEvent$6.OutputObject>;
		"OwnershipTransferred(address,address)": TypedContractEvent<OwnershipTransferredEvent$9.InputTuple, OwnershipTransferredEvent$9.OutputTuple, OwnershipTransferredEvent$9.OutputObject>;
		OwnershipTransferred: TypedContractEvent<OwnershipTransferredEvent$9.InputTuple, OwnershipTransferredEvent$9.OutputTuple, OwnershipTransferredEvent$9.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$17.InputTuple, TransferEvent$17.OutputTuple, TransferEvent$17.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$17.InputTuple, TransferEvent$17.OutputTuple, TransferEvent$17.OutputObject>;
	};
}
export interface ERC4626PoolInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "allowance" | "approve" | "asset" | "balanceOf" | "convertToAssets" | "convertToShares" | "decimals" | "deposit" | "eip712Domain" | "initializeToken" | "isLocked" | "isLockedUntil" | "isRewardNative" | "lock" | "lockPermit" | "lockedUntil" | "masterBurn" | "masterMint" | "masterPool" | "maxDeposit" | "maxMint" | "maxRedeem" | "maxWithdraw" | "mint" | "name" | "nonces" | "permit" | "pid" | "previewDeposit" | "previewMint" | "previewRedeem" | "previewWithdraw" | "redeem" | "rewardToken" | "sharesOf" | "supportsInterface" | "symbol" | "totalAssets" | "totalSupply" | "transfer" | "transferFrom" | "withdraw"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Deposit" | "EIP712DomainChanged" | "Initialized" | "InitializedPool" | "Lock" | "LockedBy" | "Transfer" | "Withdraw"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "asset", values?: undefined): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "convertToAssets", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "convertToShares", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "deposit", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
	encodeFunctionData(functionFragment: "initializeToken", values: [
		AddressLike,
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "isLocked", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "isLockedUntil", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "isRewardNative", values?: undefined): string;
	encodeFunctionData(functionFragment: "lock", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "lockPermit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "lockedUntil", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "masterBurn", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "masterMint", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "masterPool", values?: undefined): string;
	encodeFunctionData(functionFragment: "maxDeposit", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxMint", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxRedeem", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "maxWithdraw", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "mint", values: [
		BigNumberish,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "pid", values?: undefined): string;
	encodeFunctionData(functionFragment: "previewDeposit", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewMint", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewRedeem", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "previewWithdraw", values: [
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "redeem", values: [
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "rewardToken", values?: undefined): string;
	encodeFunctionData(functionFragment: "sharesOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "supportsInterface", values: [
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalAssets", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish,
		AddressLike,
		AddressLike
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "convertToAssets", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "convertToShares", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "initializeToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "isLockedUntil", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "isRewardNative", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "lockPermit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "lockedUntil", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "masterBurn", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "masterMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "masterPool", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "maxWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "pid", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewDeposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewMint", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewRedeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "previewWithdraw", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "rewardToken", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "sharesOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalAssets", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace ApprovalEvent$18 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace DepositEvent$6 {
	type InputTuple = [
		sender: AddressLike,
		owner: AddressLike,
		assets: BigNumberish,
		shares: BigNumberish
	];
	type OutputTuple = [
		sender: string,
		owner: string,
		assets: bigint,
		shares: bigint
	];
	interface OutputObject {
		sender: string;
		owner: string;
		assets: bigint;
		shares: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace EIP712DomainChangedEvent$7 {
	type InputTuple = [
	];
	type OutputTuple = [
	];
	interface OutputObject {
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedEvent$18 {
	type InputTuple = [
		version: BigNumberish
	];
	type OutputTuple = [
		version: bigint
	];
	interface OutputObject {
		version: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace InitializedPoolEvent {
	type InputTuple = [
		masterPool: AddressLike,
		pid: BigNumberish,
		asset: AddressLike,
		rewardToken: AddressLike
	];
	type OutputTuple = [
		masterPool: string,
		pid: bigint,
		asset: string,
		rewardToken: string
	];
	interface OutputObject {
		masterPool: string;
		pid: bigint;
		asset: string;
		rewardToken: string;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace LockEvent$2 {
	type InputTuple = [
		owner: AddressLike,
		until: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		until: bigint
	];
	interface OutputObject {
		owner: string;
		until: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace LockedByEvent$2 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		until: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		until: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		until: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$18 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawEvent$6 {
	type InputTuple = [
		sender: AddressLike,
		receiver: AddressLike,
		owner: AddressLike,
		assets: BigNumberish,
		shares: BigNumberish
	];
	type OutputTuple = [
		sender: string,
		receiver: string,
		owner: string,
		assets: bigint,
		shares: bigint
	];
	interface OutputObject {
		sender: string;
		receiver: string;
		owner: string;
		assets: bigint;
		shares: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface ERC4626Pool extends BaseContract {
	connect(runner?: ContractRunner | null): ERC4626Pool;
	waitForDeployment(): Promise<this>;
	interface: ERC4626PoolInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	asset: TypedContractMethod<[
	], [
		string
	], "view">;
	balanceOf: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	convertToAssets: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	convertToShares: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	deposit: TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	eip712Domain: TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	initializeToken: TypedContractMethod<[
		_masterPool: AddressLike,
		_pid: BigNumberish,
		_asset: AddressLike,
		_rewardToken: AddressLike
	], [
		void
	], "nonpayable">;
	isLocked: TypedContractMethod<[
		owner: AddressLike
	], [
		boolean
	], "view">;
	isLockedUntil: TypedContractMethod<[
		owner: AddressLike,
		until: BigNumberish
	], [
		boolean
	], "view">;
	isRewardNative: TypedContractMethod<[
	], [
		boolean
	], "view">;
	lock: TypedContractMethod<[
		until: BigNumberish
	], [
		void
	], "nonpayable">;
	lockPermit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		until: BigNumberish,
		deadline: BigNumberish,
		signature: BytesLike
	], [
		void
	], "nonpayable">;
	lockedUntil: TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	masterBurn: TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	masterMint: TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	masterPool: TypedContractMethod<[
	], [
		string
	], "view">;
	maxDeposit: TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	maxMint: TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	maxRedeem: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	maxWithdraw: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	mint: TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	pid: TypedContractMethod<[
	], [
		bigint
	], "view">;
	previewDeposit: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	previewMint: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	previewRedeem: TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	previewWithdraw: TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	redeem: TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	rewardToken: TypedContractMethod<[
	], [
		string
	], "view">;
	sharesOf: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	supportsInterface: TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalAssets: TypedContractMethod<[
	], [
		bigint
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	withdraw: TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "asset"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "convertToAssets"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "convertToShares"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "eip712Domain"): TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getFunction(nameOrSignature: "initializeToken"): TypedContractMethod<[
		_masterPool: AddressLike,
		_pid: BigNumberish,
		_asset: AddressLike,
		_rewardToken: AddressLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "isLocked"): TypedContractMethod<[
		owner: AddressLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "isLockedUntil"): TypedContractMethod<[
		owner: AddressLike,
		until: BigNumberish
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "isRewardNative"): TypedContractMethod<[
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "lock"): TypedContractMethod<[
		until: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "lockPermit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		until: BigNumberish,
		deadline: BigNumberish,
		signature: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "lockedUntil"): TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "masterBurn"): TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "masterMint"): TypedContractMethod<[
		_user: AddressLike,
		_amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "masterPool"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "maxDeposit"): TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxMint"): TypedContractMethod<[
		arg0: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxRedeem"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "maxWithdraw"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "mint"): TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "pid"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewDeposit"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewMint"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewRedeem"): TypedContractMethod<[
		shares: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "previewWithdraw"): TypedContractMethod<[
		assets: BigNumberish
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "redeem"): TypedContractMethod<[
		shares: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getFunction(nameOrSignature: "rewardToken"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "sharesOf"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[
		interfaceId: BytesLike
	], [
		boolean
	], "view">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalAssets"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		assets: BigNumberish,
		receiver: AddressLike,
		owner: AddressLike
	], [
		bigint
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$18.InputTuple, ApprovalEvent$18.OutputTuple, ApprovalEvent$18.OutputObject>;
	getEvent(key: "Deposit"): TypedContractEvent<DepositEvent$6.InputTuple, DepositEvent$6.OutputTuple, DepositEvent$6.OutputObject>;
	getEvent(key: "EIP712DomainChanged"): TypedContractEvent<EIP712DomainChangedEvent$7.InputTuple, EIP712DomainChangedEvent$7.OutputTuple, EIP712DomainChangedEvent$7.OutputObject>;
	getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent$18.InputTuple, InitializedEvent$18.OutputTuple, InitializedEvent$18.OutputObject>;
	getEvent(key: "InitializedPool"): TypedContractEvent<InitializedPoolEvent.InputTuple, InitializedPoolEvent.OutputTuple, InitializedPoolEvent.OutputObject>;
	getEvent(key: "Lock"): TypedContractEvent<LockEvent$2.InputTuple, LockEvent$2.OutputTuple, LockEvent$2.OutputObject>;
	getEvent(key: "LockedBy"): TypedContractEvent<LockedByEvent$2.InputTuple, LockedByEvent$2.OutputTuple, LockedByEvent$2.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$18.InputTuple, TransferEvent$18.OutputTuple, TransferEvent$18.OutputObject>;
	getEvent(key: "Withdraw"): TypedContractEvent<WithdrawEvent$6.InputTuple, WithdrawEvent$6.OutputTuple, WithdrawEvent$6.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$18.InputTuple, ApprovalEvent$18.OutputTuple, ApprovalEvent$18.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$18.InputTuple, ApprovalEvent$18.OutputTuple, ApprovalEvent$18.OutputObject>;
		"Deposit(address,address,uint256,uint256)": TypedContractEvent<DepositEvent$6.InputTuple, DepositEvent$6.OutputTuple, DepositEvent$6.OutputObject>;
		Deposit: TypedContractEvent<DepositEvent$6.InputTuple, DepositEvent$6.OutputTuple, DepositEvent$6.OutputObject>;
		"EIP712DomainChanged()": TypedContractEvent<EIP712DomainChangedEvent$7.InputTuple, EIP712DomainChangedEvent$7.OutputTuple, EIP712DomainChangedEvent$7.OutputObject>;
		EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent$7.InputTuple, EIP712DomainChangedEvent$7.OutputTuple, EIP712DomainChangedEvent$7.OutputObject>;
		"Initialized(uint64)": TypedContractEvent<InitializedEvent$18.InputTuple, InitializedEvent$18.OutputTuple, InitializedEvent$18.OutputObject>;
		Initialized: TypedContractEvent<InitializedEvent$18.InputTuple, InitializedEvent$18.OutputTuple, InitializedEvent$18.OutputObject>;
		"InitializedPool(address,uint16,address,address)": TypedContractEvent<InitializedPoolEvent.InputTuple, InitializedPoolEvent.OutputTuple, InitializedPoolEvent.OutputObject>;
		InitializedPool: TypedContractEvent<InitializedPoolEvent.InputTuple, InitializedPoolEvent.OutputTuple, InitializedPoolEvent.OutputObject>;
		"Lock(address,uint256)": TypedContractEvent<LockEvent$2.InputTuple, LockEvent$2.OutputTuple, LockEvent$2.OutputObject>;
		Lock: TypedContractEvent<LockEvent$2.InputTuple, LockEvent$2.OutputTuple, LockEvent$2.OutputObject>;
		"LockedBy(address,address,uint256)": TypedContractEvent<LockedByEvent$2.InputTuple, LockedByEvent$2.OutputTuple, LockedByEvent$2.OutputObject>;
		LockedBy: TypedContractEvent<LockedByEvent$2.InputTuple, LockedByEvent$2.OutputTuple, LockedByEvent$2.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$18.InputTuple, TransferEvent$18.OutputTuple, TransferEvent$18.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$18.InputTuple, TransferEvent$18.OutputTuple, TransferEvent$18.OutputObject>;
		"Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<WithdrawEvent$6.InputTuple, WithdrawEvent$6.OutputTuple, WithdrawEvent$6.OutputObject>;
		Withdraw: TypedContractEvent<WithdrawEvent$6.InputTuple, WithdrawEvent$6.OutputTuple, WithdrawEvent$6.OutputObject>;
	};
}
export interface WETHInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "allowance" | "approve" | "balanceOf" | "decimals" | "deposit" | "eip712Domain" | "name" | "nonces" | "permit" | "symbol" | "totalSupply" | "transfer" | "transferFrom" | "withdraw"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Deposit" | "EIP712DomainChanged" | "Transfer" | "Withdrawal"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
	encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace ApprovalEvent$19 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace DepositEvent$7 {
	type InputTuple = [
		dst: AddressLike,
		wad: BigNumberish
	];
	type OutputTuple = [
		dst: string,
		wad: bigint
	];
	interface OutputObject {
		dst: string;
		wad: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace EIP712DomainChangedEvent$8 {
	type InputTuple = [
	];
	type OutputTuple = [
	];
	interface OutputObject {
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$19 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawalEvent$1 {
	type InputTuple = [
		src: AddressLike,
		wad: BigNumberish
	];
	type OutputTuple = [
		src: string,
		wad: bigint
	];
	interface OutputObject {
		src: string;
		wad: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface WETH extends BaseContract {
	connect(runner?: ContractRunner | null): WETH;
	waitForDeployment(): Promise<this>;
	interface: WETHInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	deposit: TypedContractMethod<[
	], [
		void
	], "payable">;
	eip712Domain: TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	withdraw: TypedContractMethod<[
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
	], [
		void
	], "payable">;
	getFunction(nameOrSignature: "eip712Domain"): TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$19.InputTuple, ApprovalEvent$19.OutputTuple, ApprovalEvent$19.OutputObject>;
	getEvent(key: "Deposit"): TypedContractEvent<DepositEvent$7.InputTuple, DepositEvent$7.OutputTuple, DepositEvent$7.OutputObject>;
	getEvent(key: "EIP712DomainChanged"): TypedContractEvent<EIP712DomainChangedEvent$8.InputTuple, EIP712DomainChangedEvent$8.OutputTuple, EIP712DomainChangedEvent$8.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$19.InputTuple, TransferEvent$19.OutputTuple, TransferEvent$19.OutputObject>;
	getEvent(key: "Withdrawal"): TypedContractEvent<WithdrawalEvent$1.InputTuple, WithdrawalEvent$1.OutputTuple, WithdrawalEvent$1.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$19.InputTuple, ApprovalEvent$19.OutputTuple, ApprovalEvent$19.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$19.InputTuple, ApprovalEvent$19.OutputTuple, ApprovalEvent$19.OutputObject>;
		"Deposit(address,uint256)": TypedContractEvent<DepositEvent$7.InputTuple, DepositEvent$7.OutputTuple, DepositEvent$7.OutputObject>;
		Deposit: TypedContractEvent<DepositEvent$7.InputTuple, DepositEvent$7.OutputTuple, DepositEvent$7.OutputObject>;
		"EIP712DomainChanged()": TypedContractEvent<EIP712DomainChangedEvent$8.InputTuple, EIP712DomainChangedEvent$8.OutputTuple, EIP712DomainChangedEvent$8.OutputObject>;
		EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent$8.InputTuple, EIP712DomainChangedEvent$8.OutputTuple, EIP712DomainChangedEvent$8.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$19.InputTuple, TransferEvent$19.OutputTuple, TransferEvent$19.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$19.InputTuple, TransferEvent$19.OutputTuple, TransferEvent$19.OutputObject>;
		"Withdrawal(address,uint256)": TypedContractEvent<WithdrawalEvent$1.InputTuple, WithdrawalEvent$1.OutputTuple, WithdrawalEvent$1.OutputObject>;
		Withdrawal: TypedContractEvent<WithdrawalEvent$1.InputTuple, WithdrawalEvent$1.OutputTuple, WithdrawalEvent$1.OutputObject>;
	};
}
export interface WETHMockInterface extends Interface {
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR" | "allowance" | "approve" | "balanceOf" | "decimals" | "deposit" | "eip712Domain" | "name" | "nonces" | "permit" | "symbol" | "totalSupply" | "transfer" | "transferFrom" | "withdraw"): FunctionFragment;
	getEvent(nameOrSignatureOrTopic: "Approval" | "Deposit" | "EIP712DomainChanged" | "Transfer" | "Withdrawal"): EventFragment;
	encodeFunctionData(functionFragment: "DOMAIN_SEPARATOR", values?: undefined): string;
	encodeFunctionData(functionFragment: "allowance", values: [
		AddressLike,
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "approve", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "balanceOf", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
	encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
	encodeFunctionData(functionFragment: "eip712Domain", values?: undefined): string;
	encodeFunctionData(functionFragment: "name", values?: undefined): string;
	encodeFunctionData(functionFragment: "nonces", values: [
		AddressLike
	]): string;
	encodeFunctionData(functionFragment: "permit", values: [
		AddressLike,
		AddressLike,
		BigNumberish,
		BigNumberish,
		BigNumberish,
		BytesLike,
		BytesLike
	]): string;
	encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
	encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
	encodeFunctionData(functionFragment: "transfer", values: [
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "transferFrom", values: [
		AddressLike,
		AddressLike,
		BigNumberish
	]): string;
	encodeFunctionData(functionFragment: "withdraw", values: [
		BigNumberish
	]): string;
	decodeFunctionResult(functionFragment: "DOMAIN_SEPARATOR", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "eip712Domain", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}
declare namespace ApprovalEvent$20 {
	type InputTuple = [
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		owner: string,
		spender: string,
		value: bigint
	];
	interface OutputObject {
		owner: string;
		spender: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace DepositEvent$8 {
	type InputTuple = [
		dst: AddressLike,
		wad: BigNumberish
	];
	type OutputTuple = [
		dst: string,
		wad: bigint
	];
	interface OutputObject {
		dst: string;
		wad: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace EIP712DomainChangedEvent$9 {
	type InputTuple = [
	];
	type OutputTuple = [
	];
	interface OutputObject {
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace TransferEvent$20 {
	type InputTuple = [
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	];
	type OutputTuple = [
		from: string,
		to: string,
		value: bigint
	];
	interface OutputObject {
		from: string;
		to: string;
		value: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
declare namespace WithdrawalEvent$2 {
	type InputTuple = [
		src: AddressLike,
		wad: BigNumberish
	];
	type OutputTuple = [
		src: string,
		wad: bigint
	];
	interface OutputObject {
		src: string;
		wad: bigint;
	}
	type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	type Filter = TypedDeferredTopicFilter<Event>;
	type Log = TypedEventLog<Event>;
	type LogDescription = TypedLogDescription<Event>;
}
export interface WETHMock extends BaseContract {
	connect(runner?: ContractRunner | null): WETHMock;
	waitForDeployment(): Promise<this>;
	interface: WETHMockInterface;
	queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
	DOMAIN_SEPARATOR: TypedContractMethod<[
	], [
		string
	], "view">;
	allowance: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	approve: TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	balanceOf: TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	decimals: TypedContractMethod<[
	], [
		bigint
	], "view">;
	deposit: TypedContractMethod<[
	], [
		void
	], "payable">;
	eip712Domain: TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	name: TypedContractMethod<[
	], [
		string
	], "view">;
	nonces: TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	permit: TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	symbol: TypedContractMethod<[
	], [
		string
	], "view">;
	totalSupply: TypedContractMethod<[
	], [
		bigint
	], "view">;
	transfer: TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	transferFrom: TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	withdraw: TypedContractMethod<[
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
	getFunction(nameOrSignature: "DOMAIN_SEPARATOR"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "allowance"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "approve"): TypedContractMethod<[
		spender: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "balanceOf"): TypedContractMethod<[
		account: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "decimals"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "deposit"): TypedContractMethod<[
	], [
		void
	], "payable">;
	getFunction(nameOrSignature: "eip712Domain"): TypedContractMethod<[
	], [
		[
			string,
			string,
			string,
			bigint,
			string,
			string,
			bigint[]
		] & {
			fields: string;
			name: string;
			version: string;
			chainId: bigint;
			verifyingContract: string;
			salt: string;
			extensions: bigint[];
		}
	], "view">;
	getFunction(nameOrSignature: "name"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "nonces"): TypedContractMethod<[
		owner: AddressLike
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "permit"): TypedContractMethod<[
		owner: AddressLike,
		spender: AddressLike,
		value: BigNumberish,
		deadline: BigNumberish,
		v: BigNumberish,
		r: BytesLike,
		s: BytesLike
	], [
		void
	], "nonpayable">;
	getFunction(nameOrSignature: "symbol"): TypedContractMethod<[
	], [
		string
	], "view">;
	getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[
	], [
		bigint
	], "view">;
	getFunction(nameOrSignature: "transfer"): TypedContractMethod<[
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "transferFrom"): TypedContractMethod<[
		from: AddressLike,
		to: AddressLike,
		value: BigNumberish
	], [
		boolean
	], "nonpayable">;
	getFunction(nameOrSignature: "withdraw"): TypedContractMethod<[
		amount: BigNumberish
	], [
		void
	], "nonpayable">;
	getEvent(key: "Approval"): TypedContractEvent<ApprovalEvent$20.InputTuple, ApprovalEvent$20.OutputTuple, ApprovalEvent$20.OutputObject>;
	getEvent(key: "Deposit"): TypedContractEvent<DepositEvent$8.InputTuple, DepositEvent$8.OutputTuple, DepositEvent$8.OutputObject>;
	getEvent(key: "EIP712DomainChanged"): TypedContractEvent<EIP712DomainChangedEvent$9.InputTuple, EIP712DomainChangedEvent$9.OutputTuple, EIP712DomainChangedEvent$9.OutputObject>;
	getEvent(key: "Transfer"): TypedContractEvent<TransferEvent$20.InputTuple, TransferEvent$20.OutputTuple, TransferEvent$20.OutputObject>;
	getEvent(key: "Withdrawal"): TypedContractEvent<WithdrawalEvent$2.InputTuple, WithdrawalEvent$2.OutputTuple, WithdrawalEvent$2.OutputObject>;
	filters: {
		"Approval(address,address,uint256)": TypedContractEvent<ApprovalEvent$20.InputTuple, ApprovalEvent$20.OutputTuple, ApprovalEvent$20.OutputObject>;
		Approval: TypedContractEvent<ApprovalEvent$20.InputTuple, ApprovalEvent$20.OutputTuple, ApprovalEvent$20.OutputObject>;
		"Deposit(address,uint256)": TypedContractEvent<DepositEvent$8.InputTuple, DepositEvent$8.OutputTuple, DepositEvent$8.OutputObject>;
		Deposit: TypedContractEvent<DepositEvent$8.InputTuple, DepositEvent$8.OutputTuple, DepositEvent$8.OutputObject>;
		"EIP712DomainChanged()": TypedContractEvent<EIP712DomainChangedEvent$9.InputTuple, EIP712DomainChangedEvent$9.OutputTuple, EIP712DomainChangedEvent$9.OutputObject>;
		EIP712DomainChanged: TypedContractEvent<EIP712DomainChangedEvent$9.InputTuple, EIP712DomainChangedEvent$9.OutputTuple, EIP712DomainChangedEvent$9.OutputObject>;
		"Transfer(address,address,uint256)": TypedContractEvent<TransferEvent$20.InputTuple, TransferEvent$20.OutputTuple, TransferEvent$20.OutputObject>;
		Transfer: TypedContractEvent<TransferEvent$20.InputTuple, TransferEvent$20.OutputTuple, TransferEvent$20.OutputObject>;
		"Withdrawal(address,uint256)": TypedContractEvent<WithdrawalEvent$2.InputTuple, WithdrawalEvent$2.OutputTuple, WithdrawalEvent$2.OutputObject>;
		Withdrawal: TypedContractEvent<WithdrawalEvent$2.InputTuple, WithdrawalEvent$2.OutputTuple, WithdrawalEvent$2.OutputObject>;
	};
}
declare class Ownable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "OwnableInvalidOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "OwnableUnauthorizedAccount";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "previousOwner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "OwnershipTransferred";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "owner";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "renounceOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "transferOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): OwnableInterface;
	static connect(address: string, runner?: ContractRunner | null): Ownable;
}
declare class IERC1363__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approveAndCall";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "bytes";
					readonly name: "data";
					readonly type: "bytes";
				}
			];
			readonly name: "approveAndCall";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes4";
					readonly name: "interfaceId";
					readonly type: "bytes4";
				}
			];
			readonly name: "supportsInterface";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferAndCall";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "bytes";
					readonly name: "data";
					readonly type: "bytes";
				}
			];
			readonly name: "transferAndCall";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "bytes";
					readonly name: "data";
					readonly type: "bytes";
				}
			];
			readonly name: "transferFromAndCall";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFromAndCall";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IERC1363Interface;
	static connect(address: string, runner?: ContractRunner | null): IERC1363;
}
declare class IERC1967__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "previousAdmin";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "newAdmin";
					readonly type: "address";
				}
			];
			readonly name: "AdminChanged";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "beacon";
					readonly type: "address";
				}
			];
			readonly name: "BeaconUpgraded";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "implementation";
					readonly type: "address";
				}
			];
			readonly name: "Upgraded";
			readonly type: "event";
		}
	];
	static createInterface(): IERC1967Interface;
	static connect(address: string, runner?: ContractRunner | null): IERC1967;
}
declare class IERC4626__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "Deposit";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "Withdraw";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "asset";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "assetTokenAddress";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "convertToAssets";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "convertToShares";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "deposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "maxDeposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxAssets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "maxMint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxShares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxRedeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxShares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxWithdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxAssets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "mint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "previewDeposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "previewMint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "previewRedeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "previewWithdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "redeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalAssets";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "totalManagedAssets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IERC4626Interface;
	static connect(address: string, runner?: ContractRunner | null): IERC4626;
}
declare class IERC5267__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
			];
			readonly name: "EIP712DomainChanged";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "eip712Domain";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes1";
					readonly name: "fields";
					readonly type: "bytes1";
				},
				{
					readonly internalType: "string";
					readonly name: "name";
					readonly type: "string";
				},
				{
					readonly internalType: "string";
					readonly name: "version";
					readonly type: "string";
				},
				{
					readonly internalType: "uint256";
					readonly name: "chainId";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "verifyingContract";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "salt";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "uint256[]";
					readonly name: "extensions";
					readonly type: "uint256[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): IERC5267Interface;
	static connect(address: string, runner?: ContractRunner | null): IERC5267;
}
declare class IERC1155Errors__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "tokenId";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC1155InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC1155InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "idsLength";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "valuesLength";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC1155InvalidArrayLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "operator";
					readonly type: "address";
				}
			];
			readonly name: "ERC1155InvalidOperator";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC1155InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC1155InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "operator";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC1155MissingApprovalForAll";
			readonly type: "error";
		}
	];
	static createInterface(): IERC1155ErrorsInterface;
	static connect(address: string, runner?: ContractRunner | null): IERC1155Errors;
}
declare class IERC20Errors__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		}
	];
	static createInterface(): IERC20ErrorsInterface;
	static connect(address: string, runner?: ContractRunner | null): IERC20Errors;
}
declare class IERC721Errors__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "tokenId";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC721IncorrectOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "operator";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "tokenId";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC721InsufficientApproval";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC721InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "operator";
					readonly type: "address";
				}
			];
			readonly name: "ERC721InvalidOperator";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC721InvalidOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC721InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC721InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "tokenId";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC721NonexistentToken";
			readonly type: "error";
		}
	];
	static createInterface(): IERC721ErrorsInterface;
	static connect(address: string, runner?: ContractRunner | null): IERC721Errors;
}
export type ClonesConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class Clones__factory extends ContractFactory {
	constructor(...args: ClonesConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<Clones & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): Clones__factory;
	static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3497c8927d988c9f46ca672d8bac0671e491ad11ec84568b14fcad75dba976364736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "CloneArgumentsTooLong";
			readonly type: "error";
		}
	];
	static createInterface(): ClonesInterface;
	static connect(address: string, runner?: ContractRunner | null): Clones;
}
export type ERC1967UtilsConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class ERC1967Utils__factory extends ContractFactory {
	constructor(...args: ERC1967UtilsConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ERC1967Utils & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): ERC1967Utils__factory;
	static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220da07386a61d414bd5d43ff4ffde017fc34514ec5d0f083b0baaae122638f99d064736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "admin";
					readonly type: "address";
				}
			];
			readonly name: "ERC1967InvalidAdmin";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "beacon";
					readonly type: "address";
				}
			];
			readonly name: "ERC1967InvalidBeacon";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "implementation";
					readonly type: "address";
				}
			];
			readonly name: "ERC1967InvalidImplementation";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "ERC1967NonPayable";
			readonly type: "error";
		}
	];
	static createInterface(): ERC1967UtilsInterface;
	static connect(address: string, runner?: ContractRunner | null): ERC1967Utils;
}
declare class Proxy__factory {
	static readonly abi: readonly [
		{
			readonly stateMutability: "payable";
			readonly type: "fallback";
		}
	];
	static createInterface(): ProxyInterface;
	static connect(address: string, runner?: ContractRunner | null): Proxy$1;
}
declare class IBeacon__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "implementation";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): IBeaconInterface;
	static connect(address: string, runner?: ContractRunner | null): IBeacon;
}
declare class ERC20__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): ERC20Interface;
	static connect(address: string, runner?: ContractRunner | null): ERC20;
}
declare class IERC20__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IERC20Interface;
	static connect(address: string, runner?: ContractRunner | null): IERC20;
}
declare class ERC20Burnable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "burn";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "burnFrom";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): ERC20BurnableInterface;
	static connect(address: string, runner?: ContractRunner | null): ERC20Burnable;
}
declare class ERC20Permit__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "ECDSAInvalidSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "length";
					readonly type: "uint256";
				}
			];
			readonly name: "ECDSAInvalidSignatureLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "ECDSAInvalidSignatureS";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC2612ExpiredSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "signer";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC2612InvalidSigner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "currentNonce";
					readonly type: "uint256";
				}
			];
			readonly name: "InvalidAccountNonce";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidShortString";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "str";
					readonly type: "string";
				}
			];
			readonly name: "StringTooLong";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
			];
			readonly name: "EIP712DomainChanged";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "eip712Domain";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes1";
					readonly name: "fields";
					readonly type: "bytes1";
				},
				{
					readonly internalType: "string";
					readonly name: "name";
					readonly type: "string";
				},
				{
					readonly internalType: "string";
					readonly name: "version";
					readonly type: "string";
				},
				{
					readonly internalType: "uint256";
					readonly name: "chainId";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "verifyingContract";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "salt";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "uint256[]";
					readonly name: "extensions";
					readonly type: "uint256[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): ERC20PermitInterface;
	static connect(address: string, runner?: ContractRunner | null): ERC20Permit;
}
declare class IERC20Metadata__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IERC20MetadataInterface;
	static connect(address: string, runner?: ContractRunner | null): IERC20Metadata;
}
declare class IERC20Permit__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IERC20PermitInterface;
	static connect(address: string, runner?: ContractRunner | null): IERC20Permit;
}
export type SafeERC20ConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class SafeERC20__factory extends ContractFactory {
	constructor(...args: SafeERC20ConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<SafeERC20 & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): SafeERC20__factory;
	static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204de24c4ffee54bb9d75ef9d09300ebae0ae57d7c03f95e59fa86a7557e05d12764736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "currentAllowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "requestedDecrease";
					readonly type: "uint256";
				}
			];
			readonly name: "SafeERC20FailedDecreaseAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "token";
					readonly type: "address";
				}
			];
			readonly name: "SafeERC20FailedOperation";
			readonly type: "error";
		}
	];
	static createInterface(): SafeERC20Interface;
	static connect(address: string, runner?: ContractRunner | null): SafeERC20;
}
export type AddressConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class Address__factory extends ContractFactory {
	constructor(...args: AddressConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<Address & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): Address__factory;
	static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cf30f4a4cb0bfa68c758522c24e479465855492223ce207982afa46e188a3f3364736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "target";
					readonly type: "address";
				}
			];
			readonly name: "AddressEmptyCode";
			readonly type: "error";
		}
	];
	static createInterface(): AddressInterface;
	static connect(address: string, runner?: ContractRunner | null): Address;
}
export type Create2ConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class Create2__factory extends ContractFactory {
	constructor(...args: Create2ConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<Create2 & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): Create2__factory;
	static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fbbd6424695f0669cc1a46d34276cf8260bce3b220a5fee27dfd8c7a624837cf64736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "Create2EmptyBytecode";
			readonly type: "error";
		}
	];
	static createInterface(): Create2Interface;
	static connect(address: string, runner?: ContractRunner | null): Create2;
}
export type ErrorsConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class Errors__factory extends ContractFactory {
	constructor(...args: ErrorsConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<Errors & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): Errors__factory;
	static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220de67e827d55bfb960061d534d0e01f488bf55c499c850c0149f03508efcd93b364736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "FailedCall";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "FailedDeployment";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "MissingPrecompile";
			readonly type: "error";
		}
	];
	static createInterface(): ErrorsInterface;
	static connect(address: string, runner?: ContractRunner | null): Errors;
}
declare class Nonces__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "currentNonce";
					readonly type: "uint256";
				}
			];
			readonly name: "InvalidAccountNonce";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): NoncesInterface;
	static connect(address: string, runner?: ContractRunner | null): Nonces;
}
export type ShortStringsConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class ShortStrings__factory extends ContractFactory {
	constructor(...args: ShortStringsConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ShortStrings & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): ShortStrings__factory;
	static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dfc0b5e82508d558a78e2c336e970d8e92c35eb4ac0c23969a494814102d577764736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidShortString";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "str";
					readonly type: "string";
				}
			];
			readonly name: "StringTooLong";
			readonly type: "error";
		}
	];
	static createInterface(): ShortStringsInterface;
	static connect(address: string, runner?: ContractRunner | null): ShortStrings;
}
export type StringsConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class Strings__factory extends ContractFactory {
	constructor(...args: StringsConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<Strings & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): Strings__factory;
	static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d59a5eb58cc70bcae42617d593fcfe40a406e348da0bc23a57a359de048e0d7464736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "length";
					readonly type: "uint256";
				}
			];
			readonly name: "StringsInsufficientHexLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "StringsInvalidAddressFormat";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "StringsInvalidChar";
			readonly type: "error";
		}
	];
	static createInterface(): StringsInterface;
	static connect(address: string, runner?: ContractRunner | null): Strings;
}
export type ECDSAConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class ECDSA__factory extends ContractFactory {
	constructor(...args: ECDSAConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ECDSA & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): ECDSA__factory;
	static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ad28f9cd000890d472e47eb2b25da87e811786da2102c2c233132cd74c9c216b64736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "ECDSAInvalidSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "length";
					readonly type: "uint256";
				}
			];
			readonly name: "ECDSAInvalidSignatureLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "ECDSAInvalidSignatureS";
			readonly type: "error";
		}
	];
	static createInterface(): ECDSAInterface;
	static connect(address: string, runner?: ContractRunner | null): ECDSA;
}
declare class EIP712__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidShortString";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "str";
					readonly type: "string";
				}
			];
			readonly name: "StringTooLong";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
			];
			readonly name: "EIP712DomainChanged";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "eip712Domain";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes1";
					readonly name: "fields";
					readonly type: "bytes1";
				},
				{
					readonly internalType: "string";
					readonly name: "name";
					readonly type: "string";
				},
				{
					readonly internalType: "string";
					readonly name: "version";
					readonly type: "string";
				},
				{
					readonly internalType: "uint256";
					readonly name: "chainId";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "verifyingContract";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "salt";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "uint256[]";
					readonly name: "extensions";
					readonly type: "uint256[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): EIP712Interface;
	static connect(address: string, runner?: ContractRunner | null): EIP712;
}
declare class ERC165__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes4";
					readonly name: "interfaceId";
					readonly type: "bytes4";
				}
			];
			readonly name: "supportsInterface";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): ERC165Interface;
	static connect(address: string, runner?: ContractRunner | null): ERC165;
}
declare class IERC165__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes4";
					readonly name: "interfaceId";
					readonly type: "bytes4";
				}
			];
			readonly name: "supportsInterface";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): IERC165Interface;
	static connect(address: string, runner?: ContractRunner | null): IERC165;
}
export type SafeCastConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class SafeCast__factory extends ContractFactory {
	constructor(...args: SafeCastConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<SafeCast & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): SafeCast__factory;
	static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202389413baa7ca55cc5ee4ca90e1d2e933515d28fa7da344455900fadd4fcf0d364736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "bits";
					readonly type: "uint8";
				},
				{
					readonly internalType: "int256";
					readonly name: "value";
					readonly type: "int256";
				}
			];
			readonly name: "SafeCastOverflowedIntDowncast";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "value";
					readonly type: "int256";
				}
			];
			readonly name: "SafeCastOverflowedIntToUint";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "bits";
					readonly type: "uint8";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "SafeCastOverflowedUintDowncast";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "SafeCastOverflowedUintToInt";
			readonly type: "error";
		}
	];
	static createInterface(): SafeCastInterface;
	static connect(address: string, runner?: ContractRunner | null): SafeCast;
}
declare class OwnableUpgradeable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "OwnableInvalidOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "OwnableUnauthorizedAccount";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "previousOwner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "OwnershipTransferred";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "owner";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "renounceOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "transferOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): OwnableUpgradeableInterface;
	static connect(address: string, runner?: ContractRunner | null): OwnableUpgradeable;
}
declare class Initializable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		}
	];
	static createInterface(): InitializableInterface;
	static connect(address: string, runner?: ContractRunner | null): Initializable;
}
declare class ERC20Upgradeable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): ERC20UpgradeableInterface;
	static connect(address: string, runner?: ContractRunner | null): ERC20Upgradeable;
}
declare class ERC20PermitUpgradeable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "ECDSAInvalidSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "length";
					readonly type: "uint256";
				}
			];
			readonly name: "ECDSAInvalidSignatureLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "ECDSAInvalidSignatureS";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC2612ExpiredSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "signer";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC2612InvalidSigner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "currentNonce";
					readonly type: "uint256";
				}
			];
			readonly name: "InvalidAccountNonce";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
			];
			readonly name: "EIP712DomainChanged";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "eip712Domain";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes1";
					readonly name: "fields";
					readonly type: "bytes1";
				},
				{
					readonly internalType: "string";
					readonly name: "name";
					readonly type: "string";
				},
				{
					readonly internalType: "string";
					readonly name: "version";
					readonly type: "string";
				},
				{
					readonly internalType: "uint256";
					readonly name: "chainId";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "verifyingContract";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "salt";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "uint256[]";
					readonly name: "extensions";
					readonly type: "uint256[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): ERC20PermitUpgradeableInterface;
	static connect(address: string, runner?: ContractRunner | null): ERC20PermitUpgradeable;
}
declare class ERC4626Upgradeable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "max";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC4626ExceededMaxDeposit";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "max";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC4626ExceededMaxMint";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "max";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC4626ExceededMaxRedeem";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "max";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC4626ExceededMaxWithdraw";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "token";
					readonly type: "address";
				}
			];
			readonly name: "SafeERC20FailedOperation";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "Deposit";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "Withdraw";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "asset";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "convertToAssets";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "convertToShares";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "deposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "maxDeposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "maxMint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxRedeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxWithdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "mint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "previewDeposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "previewMint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "previewRedeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "previewWithdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "redeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalAssets";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): ERC4626UpgradeableInterface;
	static connect(address: string, runner?: ContractRunner | null): ERC4626Upgradeable;
}
declare class ContextUpgradeable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		}
	];
	static createInterface(): ContextUpgradeableInterface;
	static connect(address: string, runner?: ContractRunner | null): ContextUpgradeable;
}
declare class NoncesUpgradeable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "currentNonce";
					readonly type: "uint256";
				}
			];
			readonly name: "InvalidAccountNonce";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): NoncesUpgradeableInterface;
	static connect(address: string, runner?: ContractRunner | null): NoncesUpgradeable;
}
declare class ReentrancyGuardUpgradeable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "ReentrancyGuardReentrantCall";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		}
	];
	static createInterface(): ReentrancyGuardUpgradeableInterface;
	static connect(address: string, runner?: ContractRunner | null): ReentrancyGuardUpgradeable;
}
declare class EIP712Upgradeable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
			];
			readonly name: "EIP712DomainChanged";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "eip712Domain";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes1";
					readonly name: "fields";
					readonly type: "bytes1";
				},
				{
					readonly internalType: "string";
					readonly name: "name";
					readonly type: "string";
				},
				{
					readonly internalType: "string";
					readonly name: "version";
					readonly type: "string";
				},
				{
					readonly internalType: "uint256";
					readonly name: "chainId";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "verifyingContract";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "salt";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "uint256[]";
					readonly name: "extensions";
					readonly type: "uint256[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): EIP712UpgradeableInterface;
	static connect(address: string, runner?: ContractRunner | null): EIP712Upgradeable;
}
export type LockConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class Lock__factory extends ContractFactory {
	constructor(...args: LockConstructorParams);
	getDeployTransaction(_unlockTime: BigNumberish, overrides?: PayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(_unlockTime: BigNumberish, overrides?: PayableOverrides & {
		from?: string;
	}): Promise<Lock$1 & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): Lock__factory;
	static readonly bytecode = "0x60806040526040516102a03803806102a08339810160408190526020916097565b804210607e5760405162461bcd60e51b815260206004820152602360248201527f556e6c6f636b2074696d652073686f756c6420626520696e207468652066757460448201526275726560e81b606482015260840160405180910390fd5b600055600180546001600160a01b0319163317905560af565b60006020828403121560a857600080fd5b5051919050565b6101e2806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063251c1aa3146100465780633ccfd60b146100625780638da5cb5b1461006c575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b61006a610097565b005b60015461007f906001600160a01b031681565b6040516001600160a01b039091168152602001610059565b6000544210156100e75760405162461bcd60e51b8152602060048201526016602482015275165bdd4818d85b89dd081dda5d1a191c985dc81e595d60521b60448201526064015b60405180910390fd5b6001546001600160a01b031633146101385760405162461bcd60e51b81526020600482015260146024820152732cb7ba9030b932b713ba103a34329037bbb732b960611b60448201526064016100de565b604080514781524260208201527fbf2ed60bd5b5965d685680c01195c9514e4382e28e3a5a2d2d5244bf59411b93910160405180910390a16001546040516001600160a01b03909116904780156108fc02916000818181858888f193505050501580156101a9573d6000803e3d6000fd5b5056fea264697066735822122080e8d7a0c7ba4d68e6c164bd98c8b653cbaca8ae946484c0891b2be8230f2e4464736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_unlockTime";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "payable";
			readonly type: "constructor";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "when";
					readonly type: "uint256";
				}
			];
			readonly name: "Withdrawal";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "owner";
			readonly outputs: readonly [
				{
					readonly internalType: "address payable";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "unlockTime";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): LockInterface;
	static connect(address: string, runner?: ContractRunner | null): Lock$1;
}
declare class IDataFeed__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "int256";
					readonly name: "current";
					readonly type: "int256";
				},
				{
					readonly indexed: true;
					readonly internalType: "uint256";
					readonly name: "roundId";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "updatedAt";
					readonly type: "uint256";
				}
			];
			readonly name: "AnswerUpdated";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "asset";
					readonly type: "address";
				}
			];
			readonly name: "NewAsset";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "string";
					readonly name: "description";
					readonly type: "string";
				}
			];
			readonly name: "NewDescription";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "uint256";
					readonly name: "roundId";
					readonly type: "uint256";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "startedBy";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "startedAt";
					readonly type: "uint256";
				}
			];
			readonly name: "NewRound";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "asset";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "deploymentTimestamp";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "description";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_roundId";
					readonly type: "uint256";
				}
			];
			readonly name: "getAnswer";
			readonly outputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "answer";
					readonly type: "int256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint80";
					readonly name: "_roundId";
					readonly type: "uint80";
				}
			];
			readonly name: "getRoundData";
			readonly outputs: readonly [
				{
					readonly internalType: "uint80";
					readonly name: "roundId";
					readonly type: "uint80";
				},
				{
					readonly internalType: "int256";
					readonly name: "answer";
					readonly type: "int256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "startedAt";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "updatedAt";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint80";
					readonly name: "answeredInRound";
					readonly type: "uint80";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_roundId";
					readonly type: "uint256";
				}
			];
			readonly name: "getTimestamp";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "timestamp";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_timestamp";
					readonly type: "uint256";
				}
			];
			readonly name: "getTimestampAnswer";
			readonly outputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "answer";
					readonly type: "int256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_initOwner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				},
				{
					readonly internalType: "string";
					readonly name: "_description";
					readonly type: "string";
				},
				{
					readonly internalType: "int256";
					readonly name: "_initAnswer";
					readonly type: "int256";
				}
			];
			readonly name: "initializeFeed";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestAnswer";
			readonly outputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "";
					readonly type: "int256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestRound";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestRoundData";
			readonly outputs: readonly [
				{
					readonly internalType: "uint80";
					readonly name: "";
					readonly type: "uint80";
				},
				{
					readonly internalType: "int256";
					readonly name: "";
					readonly type: "int256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint80";
					readonly name: "";
					readonly type: "uint80";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestTimestamp";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				}
			];
			readonly name: "setAsset";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "_description";
					readonly type: "string";
				}
			];
			readonly name: "setDescription";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_version";
					readonly type: "uint256";
				}
			];
			readonly name: "setVersion";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "newAnswer";
					readonly type: "int256";
				}
			];
			readonly name: "updateAnswer";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "version";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): IDataFeedInterface;
	static connect(address: string, runner?: ContractRunner | null): IDataFeed;
}
declare class IERC20Exp__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IERC20ExpInterface;
	static connect(address: string, runner?: ContractRunner | null): IERC20Exp;
}
declare class IERC20Mintable__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "burn";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				}
			];
			readonly name: "burnFrom";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				}
			];
			readonly name: "mint";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IERC20MintableInterface;
	static connect(address: string, runner?: ContractRunner | null): IERC20Mintable;
}
declare class IERC20Lockable__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "Lock";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "LockedBy";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "isLocked";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "isLockedUntil";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "lock";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "bytes";
					readonly name: "signature";
					readonly type: "bytes";
				}
			];
			readonly name: "lockPermit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "lockedUntil";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "timestamp";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes4";
					readonly name: "interfaceId";
					readonly type: "bytes4";
				}
			];
			readonly name: "supportsInterface";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IERC20LockableInterface;
	static connect(address: string, runner?: ContractRunner | null): IERC20Lockable;
}
declare class IERC4626__factory$1 {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "Deposit";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "Withdraw";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "asset";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "asset";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "convertToAssets";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "convertToShares";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "deposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxDeposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxAssets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxMint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxShares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxRedeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxShares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxWithdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxAssets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "mint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "previewDeposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "previewMint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "previewRedeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "previewWithdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "redeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalAssets";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "totalAssets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IERC4626Interface$1;
	static connect(address: string, runner?: ContractRunner | null): IERC4626$1;
}
declare class IERC4626Pool__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "Deposit";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "Withdraw";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "asset";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "asset";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "convertToAssets";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "convertToShares";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "deposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_masterPool";
					readonly type: "address";
				},
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardToken";
					readonly type: "address";
				}
			];
			readonly name: "initializeToken";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "masterBurn";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "masterMint";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxDeposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxAssets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxMint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxShares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxRedeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxShares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxWithdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "maxAssets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "mint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "previewDeposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "previewMint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "previewRedeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "previewWithdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "redeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalAssets";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "totalAssets";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IERC4626PoolInterface;
	static connect(address: string, runner?: ContractRunner | null): IERC4626Pool;
}
declare class IInitializableProxy__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "string";
					readonly name: "description";
					readonly type: "string";
				}
			];
			readonly name: "DescriptionChanged";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newAdmin";
					readonly type: "address";
				}
			];
			readonly name: "changeProxyAdmin";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "_description";
					readonly type: "string";
				}
			];
			readonly name: "changeProxyDescription";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "implementation";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "_description";
					readonly type: "string";
				},
				{
					readonly internalType: "address";
					readonly name: "newAdmin";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "newImplementation";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes";
					readonly name: "data";
					readonly type: "bytes";
				}
			];
			readonly name: "initializeProxy";
			readonly outputs: readonly [
			];
			readonly stateMutability: "payable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "proxyAdmin";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "proxyDescription";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes";
					readonly name: "";
					readonly type: "bytes";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newImplementation";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes";
					readonly name: "data";
					readonly type: "bytes";
				}
			];
			readonly name: "upgradeToAndCall";
			readonly outputs: readonly [
			];
			readonly stateMutability: "payable";
			readonly type: "function";
		},
		{
			readonly stateMutability: "payable";
			readonly type: "receive";
		}
	];
	static createInterface(): IInitializableProxyInterface;
	static connect(address: string, runner?: ContractRunner | null): IInitializableProxy;
}
declare class IMasterChef__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "WETH";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_lpToken";
					readonly type: "address";
				},
				{
					readonly internalType: "uint32";
					readonly name: "_allocPoint";
					readonly type: "uint32";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "_withUpdate";
					readonly type: "bool";
				}
			];
			readonly name: "add";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "deposit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "payable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_deadline";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bytes";
					readonly name: "_signature";
					readonly type: "bytes";
				}
			];
			readonly name: "depositPermit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_fromTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_toTime";
					readonly type: "uint64";
				}
			];
			readonly name: "getMultiplier";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_fromTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_toTime";
					readonly type: "uint64";
				}
			];
			readonly name: "getPoolRewardsByTime";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "getPoolRewardsPerSec";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "getRewardsPerShare";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "rewardPerShare";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_lpToken";
					readonly type: "address";
				}
			];
			readonly name: "hasPool";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_WETH";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardToken";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardVault";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_rewardsPerSec";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "addPool";
					readonly type: "bool";
				}
			];
			readonly name: "initializeChef";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "massUpdatePools";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "address";
					readonly name: "_user";
					readonly type: "address";
				}
			];
			readonly name: "pendingRewards";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "pendingReward";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "pool";
					readonly type: "address";
				}
			];
			readonly name: "poolId";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				}
			];
			readonly name: "poolInfo";
			readonly outputs: readonly [
				{
					readonly components: readonly [
						{
							readonly internalType: "address";
							readonly name: "lpToken";
							readonly type: "address";
						},
						{
							readonly internalType: "uint32";
							readonly name: "allocPoint";
							readonly type: "uint32";
						},
						{
							readonly internalType: "uint64";
							readonly name: "startTime";
							readonly type: "uint64";
						},
						{
							readonly internalType: "uint64";
							readonly name: "endTime";
							readonly type: "uint64";
						},
						{
							readonly internalType: "uint64";
							readonly name: "lastRewardTime";
							readonly type: "uint64";
						},
						{
							readonly internalType: "uint256";
							readonly name: "accRewardsPerShare";
							readonly type: "uint256";
						}
					];
					readonly internalType: "struct IMasterChef.PoolInfo";
					readonly name: "";
					readonly type: "tuple";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "poolLength";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardToken";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardVault";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardsPerSec";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint32";
					readonly name: "_allocPoint";
					readonly type: "uint32";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "_withUpdate";
					readonly type: "bool";
				}
			];
			readonly name: "set";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_rewardPerSec";
					readonly type: "uint256";
				}
			];
			readonly name: "setRewardsPerSec";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalAllocPoint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint32";
					readonly name: "";
					readonly type: "uint32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "updatePool";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "address";
					readonly name: "user";
					readonly type: "address";
				}
			];
			readonly name: "userInfo";
			readonly outputs: readonly [
				{
					readonly components: readonly [
						{
							readonly internalType: "uint256";
							readonly name: "amount";
							readonly type: "uint256";
						},
						{
							readonly internalType: "uint256";
							readonly name: "rewardDebt";
							readonly type: "uint256";
						}
					];
					readonly internalType: "struct IMasterChef.UserInfo";
					readonly name: "";
					readonly type: "tuple";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IMasterChefInterface;
	static connect(address: string, runner?: ContractRunner | null): IMasterChef;
}
declare class IMasterPool__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "WETH";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_lpToken";
					readonly type: "address";
				},
				{
					readonly internalType: "uint32";
					readonly name: "_allocPoint";
					readonly type: "uint32";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "_withUpdate";
					readonly type: "bool";
				}
			];
			readonly name: "add";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "deposit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "payable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_deadline";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bytes";
					readonly name: "_signature";
					readonly type: "bytes";
				}
			];
			readonly name: "depositPermit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_fromTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_toTime";
					readonly type: "uint64";
				}
			];
			readonly name: "getMultiplier";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_fromTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_toTime";
					readonly type: "uint64";
				}
			];
			readonly name: "getPoolRewardsByTime";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "getPoolRewardsPerSec";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "getRewardsPerShare";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "rewardPerShare";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "halvingInterval";
			readonly outputs: readonly [
				{
					readonly internalType: "uint64";
					readonly name: "";
					readonly type: "uint64";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "halvingRate";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_lpToken";
					readonly type: "address";
				}
			];
			readonly name: "hasPool";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_poolToken";
					readonly type: "address";
				}
			];
			readonly name: "hasPoolToken";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_WETH";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardToken";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardVault";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_rewardsPerSec";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "addPool";
					readonly type: "bool";
				}
			];
			readonly name: "initializeChef";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_WETH";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_poolTokenImplementation";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardToken";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardVault";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_rewardsPerSec";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint16";
					readonly name: "_halvingRate";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_halvingInterval";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "addPool";
					readonly type: "bool";
				}
			];
			readonly name: "initializePool";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "massUpdatePools";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "address";
					readonly name: "_user";
					readonly type: "address";
				}
			];
			readonly name: "pendingRewards";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "pendingReward";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_user";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "poolDeposit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "pool";
					readonly type: "address";
				}
			];
			readonly name: "poolId";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "token";
					readonly type: "address";
				}
			];
			readonly name: "poolIdByTokens";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				}
			];
			readonly name: "poolInfo";
			readonly outputs: readonly [
				{
					readonly components: readonly [
						{
							readonly internalType: "address";
							readonly name: "lpToken";
							readonly type: "address";
						},
						{
							readonly internalType: "uint32";
							readonly name: "allocPoint";
							readonly type: "uint32";
						},
						{
							readonly internalType: "uint64";
							readonly name: "startTime";
							readonly type: "uint64";
						},
						{
							readonly internalType: "uint64";
							readonly name: "endTime";
							readonly type: "uint64";
						},
						{
							readonly internalType: "uint64";
							readonly name: "lastRewardTime";
							readonly type: "uint64";
						},
						{
							readonly internalType: "uint256";
							readonly name: "accRewardsPerShare";
							readonly type: "uint256";
						}
					];
					readonly internalType: "struct IMasterChef.PoolInfo";
					readonly name: "";
					readonly type: "tuple";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "poolLength";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_from";
					readonly type: "address";
				}
			];
			readonly name: "poolMint";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "poolTokenImplementation";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				}
			];
			readonly name: "poolTokens";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "token";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "poolTransfer";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_user";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "poolWithdraw";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardToken";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardVault";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardsPerSec";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint32";
					readonly name: "_allocPoint";
					readonly type: "uint32";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "_withUpdate";
					readonly type: "bool";
				}
			];
			readonly name: "set";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint64";
					readonly name: "_halvingInterval";
					readonly type: "uint64";
				}
			];
			readonly name: "setHalvingInterval";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_halvingRate";
					readonly type: "uint16";
				}
			];
			readonly name: "setHalvingRate";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_rewardPerSec";
					readonly type: "uint256";
				}
			];
			readonly name: "setRewardsPerSec";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalAllocPoint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint32";
					readonly name: "";
					readonly type: "uint32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "updatePool";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "address";
					readonly name: "user";
					readonly type: "address";
				}
			];
			readonly name: "userInfo";
			readonly outputs: readonly [
				{
					readonly components: readonly [
						{
							readonly internalType: "uint256";
							readonly name: "amount";
							readonly type: "uint256";
						},
						{
							readonly internalType: "uint256";
							readonly name: "rewardDebt";
							readonly type: "uint256";
						}
					];
					readonly internalType: "struct IMasterChef.UserInfo";
					readonly name: "";
					readonly type: "tuple";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IMasterPoolInterface;
	static connect(address: string, runner?: ContractRunner | null): IMasterPool;
}
declare class IRewardVault__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardPerSec";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "token";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "sendTo";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IRewardVaultInterface;
	static connect(address: string, runner?: ContractRunner | null): IRewardVault;
}
declare class IUniswapV2Factory__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly name: "allPairs";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "pair";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "allPairsLength";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "tokenA";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "tokenB";
					readonly type: "address";
				}
			];
			readonly name: "createPair";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "pair";
					readonly type: "address";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "feeTo";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "feeToSetter";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "tokenA";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "tokenB";
					readonly type: "address";
				}
			];
			readonly name: "getPair";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "pair";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "setFeeTo";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "setFeeToSetter";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IUniswapV2FactoryInterface;
	static connect(address: string, runner?: ContractRunner | null): IUniswapV2Factory;
}
declare class IUniswapV2Pair__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "MINIMUM_LIQUIDITY";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "pure";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				}
			];
			readonly name: "burn";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "amount0";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "amount1";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "factory";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "getReserves";
			readonly outputs: readonly [
				{
					readonly internalType: "uint112";
					readonly name: "reserve0";
					readonly type: "uint112";
				},
				{
					readonly internalType: "uint112";
					readonly name: "reserve1";
					readonly type: "uint112";
				},
				{
					readonly internalType: "uint32";
					readonly name: "blockTimestampLast";
					readonly type: "uint32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "kLast";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				}
			];
			readonly name: "mint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "liquidity";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "price0CumulativeLast";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "price1CumulativeLast";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				}
			];
			readonly name: "skim";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "amount0Out";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "amount1Out";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes";
					readonly name: "data";
					readonly type: "bytes";
				}
			];
			readonly name: "swap";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "sync";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "token0";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "token1";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IUniswapV2PairInterface;
	static connect(address: string, runner?: ContractRunner | null): IUniswapV2Pair;
}
declare class IV2SwapFeed__factory {
	static readonly abi: readonly [
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "int256";
					readonly name: "current";
					readonly type: "int256";
				},
				{
					readonly indexed: true;
					readonly internalType: "uint256";
					readonly name: "roundId";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "updatedAt";
					readonly type: "uint256";
				}
			];
			readonly name: "AnswerUpdated";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "asset";
					readonly type: "address";
				}
			];
			readonly name: "NewAsset";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "string";
					readonly name: "description";
					readonly type: "string";
				}
			];
			readonly name: "NewDescription";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "uint256";
					readonly name: "roundId";
					readonly type: "uint256";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "startedBy";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "startedAt";
					readonly type: "uint256";
				}
			];
			readonly name: "NewRound";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "USD";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "V2Price";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "WETH";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "asset";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "deploymentTimestamp";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "description";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "ethUsdPrice";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_roundId";
					readonly type: "uint256";
				}
			];
			readonly name: "getAnswer";
			readonly outputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "answer";
					readonly type: "int256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_pair";
					readonly type: "address";
				}
			];
			readonly name: "getLPTVL";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_pair";
					readonly type: "address";
				}
			];
			readonly name: "getLPUSD";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "baseToken";
					readonly type: "address";
				}
			];
			readonly name: "getPairByToken";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint80";
					readonly name: "_roundId";
					readonly type: "uint80";
				}
			];
			readonly name: "getRoundData";
			readonly outputs: readonly [
				{
					readonly internalType: "uint80";
					readonly name: "roundId";
					readonly type: "uint80";
				},
				{
					readonly internalType: "int256";
					readonly name: "answer";
					readonly type: "int256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "startedAt";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "updatedAt";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint80";
					readonly name: "answeredInRound";
					readonly type: "uint80";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_roundId";
					readonly type: "uint256";
				}
			];
			readonly name: "getTimestamp";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "timestamp";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_timestamp";
					readonly type: "uint256";
				}
			];
			readonly name: "getTimestampAnswer";
			readonly outputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "answer";
					readonly type: "int256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "baseToken";
					readonly type: "address";
				}
			];
			readonly name: "getTokenUSD";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_initOwner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				},
				{
					readonly internalType: "string";
					readonly name: "_description";
					readonly type: "string";
				},
				{
					readonly internalType: "int256";
					readonly name: "_initAnswer";
					readonly type: "int256";
				}
			];
			readonly name: "initializeFeed";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_feedImplementation";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_swapFactory";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_WETH";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_USD";
					readonly type: "address";
				}
			];
			readonly name: "initializeSwapFeed";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestAnswer";
			readonly outputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "";
					readonly type: "int256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestRound";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestRoundData";
			readonly outputs: readonly [
				{
					readonly internalType: "uint80";
					readonly name: "";
					readonly type: "uint80";
				},
				{
					readonly internalType: "int256";
					readonly name: "";
					readonly type: "int256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint80";
					readonly name: "";
					readonly type: "uint80";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestTimestamp";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				}
			];
			readonly name: "setAsset";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "_description";
					readonly type: "string";
				}
			];
			readonly name: "setDescription";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_version";
					readonly type: "uint256";
				}
			];
			readonly name: "setVersion";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "swapFactory";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "newAnswer";
					readonly type: "int256";
				}
			];
			readonly name: "updateAnswer";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "version";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "wethUsdPair";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): IV2SwapFeedInterface;
	static connect(address: string, runner?: ContractRunner | null): IV2SwapFeed;
}
declare class IWETH__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "deposit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "payable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): IWETHInterface;
	static connect(address: string, runner?: ContractRunner | null): IWETH;
}
declare class Ownable__factory$1 {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "OwnableInvalidOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "OwnableUnauthorizedAccount";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "previousOwner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "OwnershipTransferred";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "owner";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "renounceOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "transferOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): OwnableInterface$1;
	static connect(address: string, runner?: ContractRunner | null): Ownable$1;
}
export type SigLibConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class SigLib__factory extends ContractFactory {
	constructor(...args: SigLibConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<SigLib & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): SigLib__factory;
	static readonly bytecode = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204dc258daf60e4be456840afd8375a52fb8db880564f27f93434bb0343f155e7864736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidSignatureLength";
			readonly type: "error";
		}
	];
	static createInterface(): SigLibInterface;
	static connect(address: string, runner?: ContractRunner | null): SigLib;
}
export type WithSettlerConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class WithSettler__factory extends ContractFactory {
	constructor(...args: WithSettlerConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<WithSettler & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): WithSettler__factory;
	static readonly bytecode = "0x6080604052348015600f57600080fd5b506108828061001f6000396000f3fe608060405234801561001057600080fd5b506004361061007c5760003560e01c8063715018a61161005b578063715018a6146100bc5780638da5cb5b146100c4578063b1da41fe14610103578063f2fde38b1461011857600080fd5b8062b105e61461008157806314d3940d14610096578063329bad17146100a9575b600080fd5b61009461008f36600461078a565b61012b565b005b6100946100a436600461078a565b6101cd565b6100946100b736600461078a565b610266565b6100946103bc565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b0390911681526020015b60405180910390f35b61010b6103d0565b6040516100fa91906107b3565b61009461012636600461078a565b6103e1565b61013361041f565b61013e600082610495565b6101815760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fa9a2aa2a2622a960891b60448201526064015b60405180910390fd5b61018c6000826104bc565b506040516001600160a01b03821681527fc75b24622d5a8552bcfe775a11d9009ac47d4c050a3af79686aebe33f902fc03906020015b60405180910390a150565b6101d561041f565b6101e0600082610495565b156102215760405162461bcd60e51b8152602060048201526011602482015270222aa82624a1a0aa22afa9a2aa2a2622a960791b6044820152606401610178565b61022c6000826104d1565b506040516001600160a01b03821681527f0e8d4de8d62b8ad5b1837a4a13009121b82a40e3bdcd6e6f454a72418cc86b0e906020016101c2565b60006102706104e6565b805490915060ff600160401b820416159067ffffffffffffffff166000811580156102985750825b905060008267ffffffffffffffff1660011480156102b55750303b155b9050811580156102c3575080155b156102e15760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561030b57845460ff60401b1916600160401b1785555b6001600160a01b03861661031d573395505b6103268661050f565b6103316000876104d1565b506040516001600160a01b03871681527f0e8d4de8d62b8ad5b1837a4a13009121b82a40e3bdcd6e6f454a72418cc86b0e9060200160405180910390a183156103b457845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b6103c461041f565b6103ce6000610520565b565b60606103dc6000610591565b905090565b6103e961041f565b6001600160a01b03811661041357604051631e4fbdf760e01b815260006004820152602401610178565b61041c81610520565b50565b60006104527f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b90506001600160a01b0381161580159061047557506001600160a01b0381163314155b1561041c5760405163118cdaa760e01b8152336004820152602401610178565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b60006104b3836001600160a01b0384166105a5565b60006104b3836001600160a01b038416610698565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006104b6565b6105176106e7565b61041c8161070c565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6060600061059e83610714565b9392505050565b6000818152600183016020526040812054801561068e5760006105c96001836107ff565b85549091506000906105dd906001906107ff565b90508082146106425760008660000182815481106105fd576105fd610820565b906000526020600020015490508087600001848154811061062057610620610820565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061065357610653610836565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104b6565b60009150506104b6565b60008181526001830160205260408120546106df575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104b6565b5060006104b6565b6106ef610770565b6103ce57604051631afcd79f60e31b815260040160405180910390fd5b6103e96106e7565b60608160000180548060200260200160405190810160405280929190818152602001828054801561076457602002820191906000526020600020905b815481526020019060010190808311610750575b50505050509050919050565b600061077a6104e6565b54600160401b900460ff16919050565b60006020828403121561079c57600080fd5b81356001600160a01b038116811461059e57600080fd5b602080825282518282018190526000918401906040840190835b818110156107f45783516001600160a01b03168352602093840193909201916001016107cd565b509095945050505050565b818103818111156104b657634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea264697066735822122084a731e79a5b20357ba9e8e405ad3e2953b89382fe353d5b5fc6c45cd88fc06864736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "OwnableInvalidOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "OwnableUnauthorizedAccount";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "newSettler";
					readonly type: "address";
				}
			];
			readonly name: "AddSettler";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "previousOwner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "OwnershipTransferred";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "oldSettler";
					readonly type: "address";
				}
			];
			readonly name: "RemoveSettler";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_settler";
					readonly type: "address";
				}
			];
			readonly name: "addSettler";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_initOwner";
					readonly type: "address";
				}
			];
			readonly name: "initializeSettler";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "owner";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_settler";
					readonly type: "address";
				}
			];
			readonly name: "removeSettler";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "renounceOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "settlers";
			readonly outputs: readonly [
				{
					readonly internalType: "address[]";
					readonly name: "";
					readonly type: "address[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "transferOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): WithSettlerInterface;
	static connect(address: string, runner?: ContractRunner | null): WithSettler;
}
export type DataFeedConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class DataFeed__factory extends ContractFactory {
	constructor(...args: DataFeedConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<DataFeed & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): DataFeed__factory;
	static readonly bytecode = "";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "OwnableInvalidOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "OwnableUnauthorizedAccount";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "newSettler";
					readonly type: "address";
				}
			];
			readonly name: "AddSettler";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "int256";
					readonly name: "current";
					readonly type: "int256";
				},
				{
					readonly indexed: true;
					readonly internalType: "uint256";
					readonly name: "roundId";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "updatedAt";
					readonly type: "uint256";
				}
			];
			readonly name: "AnswerUpdated";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "asset";
					readonly type: "address";
				}
			];
			readonly name: "NewAsset";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "string";
					readonly name: "description";
					readonly type: "string";
				}
			];
			readonly name: "NewDescription";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "uint256";
					readonly name: "roundId";
					readonly type: "uint256";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "startedBy";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "startedAt";
					readonly type: "uint256";
				}
			];
			readonly name: "NewRound";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "previousOwner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "OwnershipTransferred";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "oldSettler";
					readonly type: "address";
				}
			];
			readonly name: "RemoveSettler";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_settler";
					readonly type: "address";
				}
			];
			readonly name: "addSettler";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "asset";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "deploymentTimestamp";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "description";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly name: "getAnswer";
			readonly outputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "";
					readonly type: "int256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint80";
					readonly name: "_roundId";
					readonly type: "uint80";
				}
			];
			readonly name: "getRoundData";
			readonly outputs: readonly [
				{
					readonly internalType: "uint80";
					readonly name: "roundId";
					readonly type: "uint80";
				},
				{
					readonly internalType: "int256";
					readonly name: "answer";
					readonly type: "int256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "startedAt";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "updatedAt";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint80";
					readonly name: "answeredInRound";
					readonly type: "uint80";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly name: "getTimestamp";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly name: "getTimestampAnswer";
			readonly outputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "";
					readonly type: "int256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_initOwner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				},
				{
					readonly internalType: "string";
					readonly name: "_description";
					readonly type: "string";
				},
				{
					readonly internalType: "int256";
					readonly name: "_initAnswer";
					readonly type: "int256";
				}
			];
			readonly name: "initializeFeed";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_initOwner";
					readonly type: "address";
				}
			];
			readonly name: "initializeSettler";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestAnswer";
			readonly outputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "";
					readonly type: "int256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestRound";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestRoundData";
			readonly outputs: readonly [
				{
					readonly internalType: "uint80";
					readonly name: "";
					readonly type: "uint80";
				},
				{
					readonly internalType: "int256";
					readonly name: "";
					readonly type: "int256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint80";
					readonly name: "";
					readonly type: "uint80";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestTimestamp";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "owner";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_settler";
					readonly type: "address";
				}
			];
			readonly name: "removeSettler";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "renounceOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				}
			];
			readonly name: "setAsset";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "_description";
					readonly type: "string";
				}
			];
			readonly name: "setDescription";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_version";
					readonly type: "uint256";
				}
			];
			readonly name: "setVersion";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "settlers";
			readonly outputs: readonly [
				{
					readonly internalType: "address[]";
					readonly name: "";
					readonly type: "address[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "transferOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "newAnswer";
					readonly type: "int256";
				}
			];
			readonly name: "updateAnswer";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "version";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): DataFeedInterface;
	static connect(address: string, runner?: ContractRunner | null): DataFeed;
}
export type V2SwapFeedConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class V2SwapFeed__factory extends ContractFactory {
	constructor(...args: V2SwapFeedConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<V2SwapFeed & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): V2SwapFeed__factory;
	static readonly bytecode = "0x60a060405260086080526006600255348015601957600080fd5b506080516119e061004a6000396000818161018f01528181610a2501528181610cf50152610d5201526119e06000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806363e16a82116100ad5780638205bf6a116100715780638205bf6a146102765780639478ab8c1461027c578063ad5c464814610284578063bfc12c0514610297578063d4d3e9a5146102a057600080fd5b806363e16a8214610220578063668a0f02146102355780636c3721ed1461023b5780637284e4161461024e5780637944f9441461026357600080fd5b806338d52e0f116100f457806338d52e0f146101d657806338e9781b146101e957806350d25bcd146101fc57806352ef619b1461020457806354fd4d501461021757600080fd5b8063178bc56e146101315780631bf6c21b14610161578063287bd79e14610174578063313ce5671461018a578063320eb93c146101c3575b600080fd5b600454610144906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600854610144906001600160a01b031681565b61017c6102b3565b604051908152602001610158565b6101b17f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610158565b61017c6101d136600461138c565b6102fc565b600054610144906001600160a01b031681565b61017c6101f736600461138c565b610316565b61017c6103d3565b600654610144906001600160a01b031681565b61017c60025481565b61023361022e3660046113b0565b6103dd565b005b4361017c565b61014461024936600461138c565b61072c565b610256610990565b6040516101589190611445565b600554610144906001600160a01b031681565b4261017c565b61017c610a1e565b600754610144906001600160a01b031681565b61017c60035481565b61017c6102ae36600461138c565b610a7c565b600080546102c9906001600160a01b0316610b6a565b6102e7576000546102e2906001600160a01b03166102fc565b905090565b6000546102e2906001600160a01b0316610a7c565b600061031061030a8361072c565b83610c41565b92915050565b60008061032283610dea565b905060006103308483610e8f565b50915050816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103969190611478565b6103a190600a611598565b816103ac8685610c41565b6103b691906115a7565b6103c19060026115a7565b6103cb91906115be565b949350505050565b60006102e26102b3565b60006103e7610f49565b805490915060ff600160401b820416159067ffffffffffffffff1660008115801561040f5750825b905060008267ffffffffffffffff16600114801561042c5750303b155b90508115801561043a575080155b156104585760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561048257845460ff60401b1916600160401b1785555b600080546001600160a01b0319166001600160a01b038c169081178255604080516395d89b4160e01b81529051610592936395d89b4192600480820193918290030181865afa1580156104d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261050191908101906115f6565b604080518082018252600381526201017960ed1b602082015260085482516395d89b4160e01b8152925161058d936001600160a01b03909216916395d89b419160048083019260009291908290030181865afa158015610565573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261058d91908101906115f6565b610f72565b60019061059f9082611734565b50600660025542600355600480546001600160a01b038b81166001600160a01b0319928316178355600580548c831693168317905560405163e6a4390560e01b81528a821693810193909352881660248301529063e6a4390590604401602060405180830381865afa158015610619573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063d91906117f3565b600680546001600160a01b03199081166001600160a01b03938416179091556007805482168a841617905560088054909116888316179055604051908b16907fc7d9598af6004de7fa9c489a50a55414c75cfbce9fe56fe46956970744d6bc2c90600090a27f16fbb51445345dabaa215e5f99a4bd4d8ba9818b508c76d5cd0ea30abcc491c660016040516106d29190611810565b60405180910390a1831561072057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050505050565b60055460085460405163e6a4390560e01b81526001600160a01b03848116600483015291821660248201526000928392169063e6a4390590604401602060405180830381865afa158015610784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a891906117f3565b60055460075460405163e6a4390560e01b81526001600160a01b038781166004830152918216602482015292935060009291169063e6a4390590604401602060405180830381865afa158015610802573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082691906117f3565b905060006001600160a01b03831661083f5760006108a9565b6040516370a0823160e01b81526001600160a01b0384811660048301528616906370a0823190602401602060405180830381865afa158015610885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a9919061189c565b905060006001600160a01b0383166108c257600061092c565b6040516370a0823160e01b81526001600160a01b0384811660048301528716906370a0823190602401602060405180830381865afa158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c919061189c565b90508115801561093a575080155b156109765760405162461bcd60e51b81526020600482015260076024820152662727afa820a4a960c91b60448201526064015b60405180910390fd5b808210156109845782610986565b835b9695505050505050565b6001805461099d906116ab565b80601f01602080910402602001604051908101604052809291908181526020018280546109c9906116ab565b8015610a165780601f106109eb57610100808354040283529160200191610a16565b820191906000526020600020905b8154815290600101906020018083116109f957829003601f168201915b505050505081565b6000610a4b7f000000000000000000000000000000000000000000000000000000000000000060126118b5565b610a5690600a611598565b600654600754610a72916001600160a01b039081169116610f9e565b6102e291906115be565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae0919061189c565b826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b429190611478565b610b4d90600a611598565b610b5684610316565b610b6091906115a7565b61031091906115be565b60408051600481526024810182526020810180516001600160e01b031663c45a015560e01b1790529051600091829182916001600160a01b0386169161c35091610bb3916118ce565b6000604051808303818686fa925050503d8060008114610bef576040519150601f19603f3d011682016040523d82523d6000602084013e610bf4565b606091505b5091509150811580610c0557508051155b15610c14575060009392505050565b80806020019051810190610c2891906117f3565b6005546001600160a01b03908116911614949350505050565b6000806000610c4f8561125c565b90925090506001600160a01b03848116908316148080610c805750816001600160a01b0316856001600160a01b0316145b610cc15760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa820a4a92faa27a5a2a760711b604482015260640161096d565b6000610cce86858561132c565b6008546007549192506001600160a01b0380841691811682149216148115610d4757610d1b7f000000000000000000000000000000000000000000000000000000000000000060126118b5565b610d2690600a611598565b610d308a8a610f9e565b610d3a91906115be565b9650505050505050610310565b8015610db357610d787f000000000000000000000000000000000000000000000000000000000000000060246118b5565b610d8390600a611598565b600654600754610d9f916001600160a01b039081169116610f9e565b610da98b8b610f9e565b610d3091906115a7565b60405162461bcd60e51b815260206004820152600c60248201526b24a72b20a624a22fa820a4a960a11b604482015260640161096d565b6000806000610df88461125c565b6008549193509150610e14906001600160a01b0316838361132c565b92506001600160a01b038316610e3e57600754610e3b906001600160a01b0316838361132c565b92505b6001600160a01b038316610e885760405162461bcd60e51b8152602060048201526011602482015270494e56414c49445f504149525f4241534560781b604482015260640161096d565b5050919050565b600080600080610e9e8661125c565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f069190611906565b5090925090506001600160a01b038781169084161480610f2857808284610f2c565b8083835b919b6001600160701b039182169b50911698509650505050505050565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610310565b60608282604051602001610f87929190611956565b604051602081830303815290604052905092915050565b6000806000610fac8561125c565b915091506000806000610fbf8888610e8f565b9250925092508280610fe25750836001600160a01b0316876001600160a01b0316145b6110235760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa820a4a92faa27a5a2a760711b604482015260640161096d565b811580159061103157508015155b61106c5760405162461bcd60e51b815260206004820152600c60248201526b4e4f5f4c495155494449545960a01b604482015260640161096d565b60008361115157856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d59190611478565b856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111379190611478565b611142906012611985565b61114c91906118b5565b61122a565b846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561118f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b39190611478565b866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112159190611478565b611220906012611985565b61122a91906118b5565b60ff1690508261123b82600a61199e565b61124590846115a7565b61124f91906115be565b9998505050505050505050565b600080826001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561129d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c191906117f3565b836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132391906117f3565b91509150915091565b6000826001600160a01b0316846001600160a01b03161461136d57816001600160a01b0316846001600160a01b0316146113675760006103cb565b826103cb565b5092915050565b6001600160a01b038116811461138957600080fd5b50565b60006020828403121561139e57600080fd5b81356113a981611374565b9392505050565b600080600080600060a086880312156113c857600080fd5b85356113d381611374565b945060208601356113e381611374565b935060408601356113f381611374565b9250606086013561140381611374565b9150608086013561141381611374565b809150509295509295909350565b60005b8381101561143c578181015183820152602001611424565b50506000910152565b6020815260008251806020840152611464816040850160208701611421565b601f01601f19169190910160400192915050565b60006020828403121561148a57600080fd5b815160ff811681146113a957600080fd5b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156114ec578085048111156114d0576114d061149b565b60018416156114de57908102905b60019390931c9280026114b5565b935093915050565b60008261150357506001610310565b8161151057506000610310565b816001811461152657600281146115305761154c565b6001915050610310565b60ff8411156115415761154161149b565b50506001821b610310565b5060208310610133831016604e8410600b841016171561156f575081810a610310565b61157c60001984846114b1565b80600019048211156115905761159061149b565b029392505050565b60006113a960ff8416836114f4565b80820281158282048414176103105761031061149b565b6000826115db57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561160857600080fd5b815167ffffffffffffffff81111561161f57600080fd5b8201601f8101841361163057600080fd5b805167ffffffffffffffff81111561164a5761164a6115e0565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715611679576116796115e0565b60405281815282820160200186101561169157600080fd5b6116a2826020830160208601611421565b95945050505050565b600181811c908216806116bf57607f821691505b6020821081036116df57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561172f57806000526020600020601f840160051c8101602085101561170c5750805b601f840160051c820191505b8181101561172c5760008155600101611718565b50505b505050565b815167ffffffffffffffff81111561174e5761174e6115e0565b6117628161175c84546116ab565b846116e5565b6020601f821160018114611796576000831561177e5750848201515b600019600385901b1c1916600184901b17845561172c565b600084815260208120601f198516915b828110156117c657878501518255602094850194600190920191016117a6565b50848210156117e45786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60006020828403121561180557600080fd5b81516113a981611374565b602081526000808354611822816116ab565b8060208601526001821660008114611841576001811461185d57611891565b60ff1983166040870152604082151560051b8701019350611891565b86600052602060002060005b8381101561188857815488820160400152600190910190602001611869565b87016040019450505b509195945050505050565b6000602082840312156118ae57600080fd5b5051919050565b60ff82811682821603908111156103105761031061149b565b600082516118e0818460208701611421565b9190910192915050565b80516001600160701b038116811461190157600080fd5b919050565b60008060006060848603121561191b57600080fd5b611924846118ea565b9250611932602085016118ea565b9150604084015163ffffffff8116811461194b57600080fd5b809150509250925092565b60008351611968818460208801611421565b83519083019061197c818360208801611421565b01949350505050565b60ff81811683821601908111156103105761031061149b565b60006113a983836114f456fea26469706673582212202e8df71008286ab23ddebb517b02ad7258839f5195f99f14654c6e878561eced64736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "int256";
					readonly name: "current";
					readonly type: "int256";
				},
				{
					readonly indexed: true;
					readonly internalType: "uint256";
					readonly name: "roundId";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "updatedAt";
					readonly type: "uint256";
				}
			];
			readonly name: "AnswerUpdated";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "asset";
					readonly type: "address";
				}
			];
			readonly name: "NewAsset";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "string";
					readonly name: "description";
					readonly type: "string";
				}
			];
			readonly name: "NewDescription";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "uint256";
					readonly name: "roundId";
					readonly type: "uint256";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "startedBy";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "startedAt";
					readonly type: "uint256";
				}
			];
			readonly name: "NewRound";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "USD";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IERC20Exp";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "V2Price";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "WETH";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IERC20Exp";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "asset";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "deploymentTimestamp";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "description";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "ethUsdPrice";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "feedImplementation";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "contract IUniswapV2Pair";
					readonly name: "_pair";
					readonly type: "address";
				}
			];
			readonly name: "getLPTVL";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "contract IUniswapV2Pair";
					readonly name: "_pair";
					readonly type: "address";
				}
			];
			readonly name: "getLPUSD";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "baseToken";
					readonly type: "address";
				}
			];
			readonly name: "getPairByToken";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IUniswapV2Pair";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "baseToken";
					readonly type: "address";
				}
			];
			readonly name: "getTokenUSD";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_feedImplementation";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_swapFactory";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_WETH";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_USD";
					readonly type: "address";
				}
			];
			readonly name: "initializeSwapFeed";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestAnswer";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestRound";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "latestTimestamp";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "swapFactory";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IUniswapV2Factory";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "version";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "wethUsdPair";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IUniswapV2Pair";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		}
	];
	static createInterface(): V2SwapFeedInterface;
	static connect(address: string, runner?: ContractRunner | null): V2SwapFeed;
}
export type V2SwapFeedFactoryConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class V2SwapFeedFactory__factory extends ContractFactory {
	constructor(...args: V2SwapFeedFactoryConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<V2SwapFeedFactory & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): V2SwapFeedFactory__factory;
	static readonly bytecode = "0x6080604052348015600f57600080fd5b50610af18061001f6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636e135eec11610097578063ad5c464811610066578063ad5c46481461024c578063c34e596f1461025f578063dbc4d32d14610272578063f2fde38b1461028557600080fd5b80636e135eec146101ee578063715018a6146102015780637944f944146102095780638da5cb5b1461021c57600080fd5b80634486b1c7116100d35780634486b1c714610186578063580a560e1461019957806358303b10146101ba5780635b769f3c146101db57600080fd5b8063178bc56e146101055780631bf6c21b146101355780632c626de5146101485780632fba4aa91461015d575b600080fd5b600254610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600554610118906001600160a01b031681565b61015b610156366004610a22565b610298565b005b61011861016b366004610a87565b6001602052600090815260409020546001600160a01b031681565b61015b610194366004610a87565b6103d0565b6101ac6101a7366004610a87565b61042d565b60405190815260200161012c565b6000546101c89061ffff1681565b60405161ffff909116815260200161012c565b61015b6101e9366004610a87565b6104bf565b61015b6101fc366004610a87565b610515565b61015b610715565b600354610118906001600160a01b031681565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610118565b600454610118906001600160a01b031681565b61015b61026d366004610a87565b610729565b61015b610280366004610a87565b61077f565b61015b610293366004610a87565b6107d5565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156102de5750825b905060008267ffffffffffffffff1660011480156102fb5750303b155b905081158015610309575080155b156103275760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561035157845460ff60401b1916600160401b1785555b61035a896103d0565b61036388610729565b61036c876104bf565b6103758661077f565b61037e8a610818565b83156103c457845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050505050565b6103d8610829565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527fce025e89252f6ab5a030250b37df78e66a1d92854226981373dff41586821a6d906020015b60405180910390a150565b6001600160a01b03808216600090815260016020526040812054909116806104565760006104b8565b806001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610494573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b89190610aa2565b9392505050565b6104c7610829565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527fe390bcec6614d6b1f8ae47a4d9d46531ce328e3d293ecd6ddd015cb01eff030090602001610422565b61051d610829565b6001600160a01b0381811660009081526001602090815260408083205460025460035460045460055494516bffffffffffffffffffffffff1960608b811b82169883019890985284881b8116603483015292871b8316604882015290861b8216605c8201529390941b90931660708301528416936105b59216906084016040516020818303038152906040528051906020012061089f565b600254600354600480546005546040516331f0b54160e11b81526001600160a01b038a81169482019490945294831660248601529282166044850152811660648401529081166084830152919250908216906363e16a829060a401600060405180830381600087803b15801561062a57600080fd5b505af115801561063e573d6000803e3d6000fd5b505050506001600160a01b0383811660008181526001602090815260409182902080546001600160a01b0319168686169081179091558251948716855233918501919091529261034892917fb56c4f88c3e344891ef92e51f036d7116e886f4ea57f5ba93e28b5f44925b9ce910160405180910390a4600054604080516001600160a01b03858116825261ffff9093166020820152338183015290518383169261034892908716917f27a180c70f2642f63d1694eb252b7df52e7ab2565e3f67adf7748acb7d82b9bc9181900360600190a4505050565b61071d610829565b61072760006108ad565b565b610731610829565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f07925669a65c6cfe24a7577e4b501bf561d0ffe36d8d6707802d2d17e596076790602001610422565b610787610829565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527f0760150a180a9ab0096f89d108362c0cf356435a5f98f4359e45dd152761dccc90602001610422565b6107dd610829565b6001600160a01b03811661080c57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610815816108ad565b50565b61082061091e565b61081581610967565b600061085c7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b90506001600160a01b0381161580159061087f57506001600160a01b0381163314155b156108155760405163118cdaa760e01b8152336004820152602401610803565b60006104b88383600061096f565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661072757604051631afcd79f60e31b815260040160405180910390fd5b6107dd61091e565b60008147101561099b5760405163cf47918160e01b815247600482015260248101839052604401610803565b763d602d80600a3d3981f3363d3d373d3d3d363d730000008460601b60e81c176000526e5af43d82803e903d91602b57fd5bf38460781b17602052826037600984f590506001600160a01b0381166104b85760405163b06ebf3d60e01b815260040160405180910390fd5b80356001600160a01b0381168114610a1d57600080fd5b919050565b600080600080600060a08688031215610a3a57600080fd5b610a4386610a06565b9450610a5160208701610a06565b9350610a5f60408701610a06565b9250610a6d60608701610a06565b9150610a7b60808701610a06565b90509295509295909350565b600060208284031215610a9957600080fd5b6104b882610a06565b600060208284031215610ab457600080fd5b505191905056fea2646970667358221220df9e4fb0d226a8c83669a385839c800c95889fc9406a1fb21dbee6e4228d1de464736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "FailedDeployment";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "OwnableInvalidOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "OwnableUnauthorizedAccount";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "asset";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "denomination";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "latestAggregator";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "previousAggregator";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint16";
					readonly name: "nextPhaseId";
					readonly type: "uint16";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "FeedConfirmed";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "asset";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "denomination";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "proposedAggregator";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "currentAggregator";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "FeedProposed";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "previousOwner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "OwnershipTransferred";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "feedImplementation";
					readonly type: "address";
				}
			];
			readonly name: "SetFeedImplementation";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "factory";
					readonly type: "address";
				}
			];
			readonly name: "SetSwapFactory";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "usd";
					readonly type: "address";
				}
			];
			readonly name: "SetUSD";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "weth";
					readonly type: "address";
				}
			];
			readonly name: "SetWETH";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "USD";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "WETH";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				}
			];
			readonly name: "createFeed";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "feedImplementation";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "feeds";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IV2SwapFeed";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_initOwner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_feedImplementation";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_swapFactory";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_WETH";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_USD";
					readonly type: "address";
				}
			];
			readonly name: "initializeFactory";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				}
			];
			readonly name: "latestAnswer";
			readonly outputs: readonly [
				{
					readonly internalType: "int256";
					readonly name: "";
					readonly type: "int256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "owner";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "phaseId";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "renounceOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_feedImplementation";
					readonly type: "address";
				}
			];
			readonly name: "setFeedImplementation";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_swapFactory";
					readonly type: "address";
				}
			];
			readonly name: "setSwapFactory";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_USD";
					readonly type: "address";
				}
			];
			readonly name: "setUSD";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_WETH";
					readonly type: "address";
				}
			];
			readonly name: "setWETH";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "swapFactory";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "transferOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): V2SwapFeedFactoryInterface;
	static connect(address: string, runner?: ContractRunner | null): V2SwapFeedFactory;
}
export type MasterChefConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class MasterChef__factory extends ContractFactory {
	constructor(...args: MasterChefConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<MasterChef & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): MasterChef__factory;
	static readonly bytecode = "0x6080604052348015600f57600080fd5b506120ae8061001f6000396000f3fe60806040526004361061019f5760003560e01c80638da5cb5b116100ec578063e907d8c01161008a578063f64ba28b11610064578063f64ba28b146105b8578063f7c618c1146105d8578063fc7e4227146105f8578063ff51a2721461061857600080fd5b8063e907d8c014610524578063efaf059714610544578063f2fde38b1461059857600080fd5b8063ad5c4648116100c6578063ad5c4648146104a4578063b072797e146104c4578063cf2770d6146104e4578063d024fe7b1461050457600080fd5b80638da5cb5b146104275780638ef3d24d14610464578063a373e68d1461048457600080fd5b80633a2c677711610159578063630b5ba111610133578063630b5ba1146103b2578063715018a6146103c7578063859fe6c7146103dc5780638ae74894146103ef57600080fd5b80633a2c67771461033a5780633d9120331461037257806361249d861461039257600080fd5b8062893452146102005780630407539914610229578063081e3eda146102495780631246dbf51461026d5780631526fe271461029d57806317caf6f11461030857600080fd5b366101fb576000546001600160a01b031633036101b857005b6000546101cd906001600160a01b0316610649565b156101f957600080546001600160a01b03168152600460205260409020546101f99061ffff16346106bb565b005b600080fd5b34801561020c57600080fd5b5061021660035481565b6040519081526020015b60405180910390f35b34801561023557600080fd5b506101f9610244366004611bd1565b61073b565b34801561025557600080fd5b506005545b60405161ffff9091168152602001610220565b34801561027957600080fd5b5061028d610288366004611c06565b610649565b6040519015158152602001610220565b3480156102a957600080fd5b506102bd6102b8366004611bd1565b61077e565b604080516001600160a01b03909716875263ffffffff90951660208701526001600160401b0393841694860194909452908216606085015216608083015260a082015260c001610220565b34801561031457600080fd5b506007546103259063ffffffff1681565b60405163ffffffff9091168152602001610220565b34801561034657600080fd5b5060025461035a906001600160a01b031681565b6040516001600160a01b039091168152602001610220565b34801561037e57600080fd5b506101f961038d366004611c33565b6107e9565b34801561039e57600080fd5b506102166103ad366004611c5d565b610831565b3480156103be57600080fd5b506101f9610848565b3480156103d357600080fd5b506101f9610873565b6101f96103ea366004611c33565b6106bb565b3480156103fb57600080fd5b5061040f61040a366004611c8f565b610887565b6040516001600160401b039091168152602001610220565b34801561043357600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661035a565b34801561047057600080fd5b506101f961047f366004611ce8565b61096b565b34801561049057600080fd5b5061021661049f366004611c8f565b610a47565b3480156104b057600080fd5b5060005461035a906001600160a01b031681565b3480156104d057600080fd5b506101f96104df366004611dd9565b610ae5565b3480156104f057600080fd5b506101f96104ff366004611c5d565b610c97565b34801561051057600080fd5b506101f961051f366004611e7d565b610cfc565b34801561053057600080fd5b5061021661053f366004611ee2565b610f1b565b34801561055057600080fd5b5061058361055f366004611ee2565b60066020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610220565b3480156105a457600080fd5b506101f96105b3366004611c06565b610f7e565b3480156105c457600080fd5b506102166105d3366004611c5d565b610fbc565b3480156105e457600080fd5b5060015461035a906001600160a01b031681565b34801561060457600080fd5b5061025a610613366004611f15565b6110fd565b34801561062457600080fd5b5061025a610633366004611c06565b60046020526000908152604090205461ffff1681565b6001600160a01b03811660009081526004602052604081205461ffff161515806106b5575060055460011480156106b55750816001600160a01b0316600560008154811061069957610699611f36565b60009182526020909120600390910201546001600160a01b0316145b92915050565b6106c3611363565b60055461ffff8316106106f15760405162461bcd60e51b81526004016106e890611f4c565b60405180910390fd5b6106fb82336113ad565b801561070e5761070c823383611546565b505b61073760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b5050565b6107436117b4565b60038190556040518181527f403d953100676c530ee357c0fe9f352dc6c18bd4e8594c49d2107ecbad6a6f099060200160405180910390a150565b6005818154811061078e57600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b038216935063ffffffff600160a01b830416926001600160401b03600160c01b90930483169281811692600160401b909204169086565b6107f1611363565b60055461ffff8316106108165760405162461bcd60e51b81526004016106e890611f4c565b61082082336113ad565b801561070e5761070c82338361182a565b60006106b582610842600142611f88565b42610a47565b60055460005b818161ffff1610156107375761086381610c97565b61086c81611f9b565b905061084e565b61087b6117b4565b61088560006118f2565b565b6000816001600160401b0316836001600160401b0316106108aa57506000610964565b600060058561ffff16815481106108c3576108c3611f36565b600091825260208220600390910201805460018201549193506001600160401b03600160c01b9091048116929181169190871683106109025782610904565b865b90506000826001600160401b0316876001600160401b0316106109275782610929565b865b9050806001600160401b0316826001600160401b03161061095257600095505050505050610964565b61095c8282611fbc565b955050505050505b9392505050565b600080600061097984611963565b92509250925060058761ffff168154811061099657610996611f36565b600091825260209091206003909102015460405163d505accf60e01b8152336004820152306024820152604481018890526001600160401b038716606482015260ff8516608482015260a4810184905260c481018390526001600160a01b039091169063d505accf9060e401600060405180830381600087803b158015610a1c57600080fd5b505af1158015610a30573d6000803e3d6000fd5b50505050610a3e87876106bb565b50505050505050565b60075460009063ffffffff168103610a6157506000610964565b600060058561ffff1681548110610a7a57610a7a611f36565b6000918252602090912060075460039283029091018054925490935063ffffffff91821692600160a01b900490911690610ab5888888610887565b6001600160401b0316610ac89190611fdb565b610ad29190611fdb565b610adc9190611ff2565b95945050505050565b6000610aef6119ad565b805490915060ff600160401b82041615906001600160401b0316600081158015610b165750825b90506000826001600160401b03166001148015610b325750303b155b905081158015610b40575080155b15610b5e5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b8857845460ff60401b1916600160401b1785555b610b906119d6565b600080546001600160a01b03808f166001600160a01b031992831617909255600180548e841690831617905560028054928d1692909116919091179055610bd68961073b565b8515610bee57610bec8b6103e88a8a60006110fd565b505b610bf78d6119e6565b604080516001600160a01b038e811682528d811660208301528c168183015290517fe86209b390e8076baf4c4a616512319eb81d91e8b1f8ca206e88c5ff1c264e149181900360600190a18315610c8857845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050505050505050565b600060058261ffff1681548110610cb057610cb0611f36565b90600052602060002090600302019050610cc982610fbc565b600282015560010180546fffffffffffffffff00000000000000001916600160401b426001600160401b03160217905550565b610d046117b4565b60055461ffff861610610d295760405162461bcd60e51b81526004016106e890611f4c565b8015610d3757610d37610848565b8360058661ffff1681548110610d4f57610d4f611f36565b6000918252602090912060039091020154600754610d7d9163ffffffff600160a01b90910481169116612014565b610d879190612030565b600760006101000a81548163ffffffff021916908363ffffffff1602179055508360058661ffff1681548110610dbf57610dbf611f36565b906000526020600020906003020160000160146101000a81548163ffffffff021916908363ffffffff1602179055508260058661ffff1681548110610e0657610e06611f36565b906000526020600020906003020160000160186101000a8154816001600160401b0302191690836001600160401b031602179055508160058661ffff1681548110610e5357610e53611f36565b906000526020600020906003020160010160006101000a8154816001600160401b0302191690836001600160401b0316021790555060058561ffff1681548110610e9f57610e9f611f36565b6000918252602091829020600390910201546040805163ffffffff881681526001600160401b0380881694820194909452928516908301526001600160a01b03169061ffff8716907f8d79088268352e1a4ae18346d3aa40ff9d49bb8ec82b846a0bc32d12a7e477e39060600160405180910390a35050505050565b61ffff821660009081526006602090815260408083206001600160a01b03851684529091528120600181015464e8d4a51000610f5686610fbc565b8354610f629190611fdb565b610f6c9190611ff2565b610f769190611f88565b949350505050565b610f866117b4565b6001600160a01b038116610fb057604051631e4fbdf760e01b8152600060048201526024016106e8565b610fb9816118f2565b50565b60008060058361ffff1681548110610fd657610fd6611f36565b600091825260208083206040805160c08101825260039490940290910180546001600160a01b038116808652600160a01b820463ffffffff1694860194909452600160c01b90046001600160401b039081168584015260018201548082166060870152600160401b90041660808501526002015460a0840181905290516370a0823160e01b815230600482015292945092916370a0823190602401602060405180830381865afa15801561108e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b2919061204c565b905080156110f55760006110cb86856080015142610a47565b9050816110dd8264e8d4a51000611fdb565b6110e79190611ff2565b6110f19084612065565b9250505b509392505050565b60006111076117b4565b61111086610649565b1561114f5760405162461bcd60e51b815260206004820152600f60248201526e111d5c1b1a58d85d195908141bdbdb608a1b60448201526064016106e8565b811561115d5761115d610848565b506005546007805486919060009061117c90849063ffffffff16612030565b825463ffffffff9182166101009390930a9283029282021916919091179091556001600160a01b038089166000818152600460209081526040808320805461ffff8a1661ffff199091168117909155815160c0810183528581528d88169381019384526001600160401b03808e168285019081528d8216606084019081526080840188815260a08501898152600580546001810182559a52945160039099027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db081018054995194518616600160c01b026001600160c01b0395909e16600160a01b026001600160c01b0319909a169a909c169990991797909717919091169990991790975596517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db18501805494518816600160401b026fffffffffffffffffffffffffffffffff1990951691909716179290921790945593517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db29091015590519092507f8d79088268352e1a4ae18346d3aa40ff9d49bb8ec82b846a0bc32d12a7e477e3906113529089908990899063ffffffff9390931683526001600160401b03918216602084015216604082015260600190565b60405180910390a395945050505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f008054600119016113a757604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600060058361ffff16815481106113c6576113c6611f36565b6000918252602080832061ffff871684526006825260408085206001600160a01b038816865290925292206003909102909101915061140484610c97565b805415611536576000816001015464e8d4a510008460020154846000015461142c9190611fdb565b6114369190611ff2565b6114409190611f88565b90508015611534576002546001600160a01b03166114c3576001546040516340c10f1960e01b81526001600160a01b03868116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b1580156114a657600080fd5b505af11580156114ba573d6000803e3d6000fd5b50505050611534565b60025460015460405163ae63932960e01b81526001600160a01b03918216600482015286821660248201526044810184905291169063ae63932990606401600060405180830381600087803b15801561151b57600080fd5b505af115801561152f573d6000803e3d6000fd5b505050505b505b61154084846119f7565b50505050565b60008060058561ffff168154811061156057611560611f36565b6000918252602080832061ffff891684526006825260408085206001600160a01b03808b1687529352842093546003909302018054909450811691161480156115a857508334145b156116195760008054906101000a90046001600160a01b03166001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156115fb57600080fd5b505af115801561160f573d6000803e3d6000fd5b5050505050611718565b81546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611661573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611685919061204c565b835490915061169f906001600160a01b0316873088611a74565b82546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156116e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170a919061204c565b6117149190611f88565b9450505b8381600001600082825461172c9190612065565b9091555061173c905086866119f7565b8561ffff16856001600160a01b03167f2c00706df3fbb4a8ead830d4c0a7f278823843af15ad7e680c4f7db763dd779c8660405161177c91815260200190565b60405180910390a35091949350505050565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b60006117e77f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b90506001600160a01b0381161580159061180a57506001600160a01b0381163314155b15610fb95760405163118cdaa760e01b81523360048201526024016106e8565b60008060058561ffff168154811061184457611844611f36565b6000918252602080832061ffff891684526006825260408085206001600160a01b038a16865290925290832080546003909302909101935091859183919061188d908490611f88565b909155505081546118a8906001600160a01b03168686611adb565b6118b286866119f7565b8561ffff16856001600160a01b03167f4e2ebfe79f50514ade8e774c7f3c01250d6aa3a91cd1f5c33a78df9c459f6e9d8660405161177c91815260200190565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6000806000835160410361198d5750505060208101516040820151606083015160001a91906119a6565b604051634be6321b60e01b815260040160405180910390fd5b9193909250565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006106b5565b6119de611b11565b610885611b36565b6119ee611b11565b610fb981611b3e565b600060058361ffff1681548110611a1057611a10611f36565b6000918252602080832061ffff871684526006825260408085206001600160a01b038816865290925292206002600390920290920190810154825491935064e8d4a5100091611a5f9190611fdb565b611a699190611ff2565b600190910155505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526115409186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611b46565b6040516001600160a01b03838116602483015260448201839052611b0c91859182169063a9059cbb90606401611aa9565b505050565b611b19611bb7565b61088557604051631afcd79f60e31b815260040160405180910390fd5b61178e611b11565b610f86611b11565b600080602060008451602086016000885af180611b69576040513d6000823e3d81fd5b50506000513d91508115611b81578060011415611b8e565b6001600160a01b0384163b155b1561154057604051635274afe760e01b81526001600160a01b03851660048201526024016106e8565b6000611bc16119ad565b54600160401b900460ff16919050565b600060208284031215611be357600080fd5b5035919050565b80356001600160a01b0381168114611c0157600080fd5b919050565b600060208284031215611c1857600080fd5b61096482611bea565b803561ffff81168114611c0157600080fd5b60008060408385031215611c4657600080fd5b611c4f83611c21565b946020939093013593505050565b600060208284031215611c6f57600080fd5b61096482611c21565b80356001600160401b0381168114611c0157600080fd5b600080600060608486031215611ca457600080fd5b611cad84611c21565b9250611cbb60208501611c78565b9150611cc960408501611c78565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611cfe57600080fd5b611d0785611c21565b935060208501359250611d1c60408601611c78565b915060608501356001600160401b03811115611d3757600080fd5b8501601f81018713611d4857600080fd5b80356001600160401b03811115611d6157611d61611cd2565b604051601f8201601f19908116603f011681016001600160401b0381118282101715611d8f57611d8f611cd2565b604052818152828201602001891015611da757600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b80358015158114611c0157600080fd5b600080600080600080600080610100898b031215611df657600080fd5b611dff89611bea565b9750611e0d60208a01611bea565b9650611e1b60408a01611bea565b9550611e2960608a01611bea565b945060808901359350611e3e60a08a01611c78565b9250611e4c60c08a01611c78565b9150611e5a60e08a01611dc9565b90509295985092959890939650565b803563ffffffff81168114611c0157600080fd5b600080600080600060a08688031215611e9557600080fd5b611e9e86611c21565b9450611eac60208701611e69565b9350611eba60408701611c78565b9250611ec860608701611c78565b9150611ed660808701611dc9565b90509295509295909350565b60008060408385031215611ef557600080fd5b611efe83611c21565b9150611f0c60208401611bea565b90509250929050565b600080600080600060a08688031215611f2d57600080fd5b611e9e86611bea565b634e487b7160e01b600052603260045260246000fd5b6020808252600c908201526b125b9d985b1a5908141bdbdb60a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156106b5576106b5611f72565b600061ffff821661ffff8103611fb357611fb3611f72565b60010192915050565b6001600160401b0382811682821603908111156106b5576106b5611f72565b80820281158282048414176106b5576106b5611f72565b60008261200f57634e487b7160e01b600052601260045260246000fd5b500490565b63ffffffff82811682821603908111156106b5576106b5611f72565b63ffffffff81811683821601908111156106b5576106b5611f72565b60006020828403121561205e57600080fd5b5051919050565b808201808211156106b5576106b5611f7256fea2646970667358221220d8c881200866abcc145accc9e0d2caad7c4a017dc90e26ad0f3ca1aaaab1e05f64736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidSignatureLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "OwnableInvalidOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "OwnableUnauthorizedAccount";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "ReentrancyGuardReentrantCall";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "token";
					readonly type: "address";
				}
			];
			readonly name: "SafeERC20FailedOperation";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "user";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				}
			];
			readonly name: "Deposit";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "WETH";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "rewardToken";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "rewardVault";
					readonly type: "address";
				}
			];
			readonly name: "InitializedChef";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "previousOwner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "OwnershipTransferred";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "lpToken";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint32";
					readonly name: "newAllocPoint";
					readonly type: "uint32";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "startTime";
					readonly type: "uint64";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "endTime";
					readonly type: "uint64";
				}
			];
			readonly name: "SetPool";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "rewardsPerSec";
					readonly type: "uint256";
				}
			];
			readonly name: "SetRewards";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "user";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				}
			];
			readonly name: "Withdraw";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "WETH";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IWETH";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_lpToken";
					readonly type: "address";
				},
				{
					readonly internalType: "uint32";
					readonly name: "_allocPoint";
					readonly type: "uint32";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "_withUpdate";
					readonly type: "bool";
				}
			];
			readonly name: "add";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "deposit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "payable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_deadline";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bytes";
					readonly name: "_signature";
					readonly type: "bytes";
				}
			];
			readonly name: "depositPermit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_fromTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_toTime";
					readonly type: "uint64";
				}
			];
			readonly name: "getMultiplier";
			readonly outputs: readonly [
				{
					readonly internalType: "uint64";
					readonly name: "";
					readonly type: "uint64";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_fromTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_toTime";
					readonly type: "uint64";
				}
			];
			readonly name: "getPoolRewardsByTime";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "getPoolRewardsPerSec";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "getRewardsPerShare";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_lpToken";
					readonly type: "address";
				}
			];
			readonly name: "hasPool";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_WETH";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardToken";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardVault";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_rewardsPerSec";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "addPool";
					readonly type: "bool";
				}
			];
			readonly name: "initializeChef";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "massUpdatePools";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "owner";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "address";
					readonly name: "_user";
					readonly type: "address";
				}
			];
			readonly name: "pendingRewards";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "poolId";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly name: "poolInfo";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IERC20";
					readonly name: "lpToken";
					readonly type: "address";
				},
				{
					readonly internalType: "uint32";
					readonly name: "allocPoint";
					readonly type: "uint32";
				},
				{
					readonly internalType: "uint64";
					readonly name: "startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "lastRewardTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint256";
					readonly name: "accRewardsPerShare";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "poolLength";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "renounceOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardToken";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IERC20Mintable";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardVault";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IRewardVault";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardsPerSec";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint32";
					readonly name: "_allocPoint";
					readonly type: "uint32";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "_withUpdate";
					readonly type: "bool";
				}
			];
			readonly name: "set";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_rewardsPerSec";
					readonly type: "uint256";
				}
			];
			readonly name: "setRewardsPerSec";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalAllocPoint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint32";
					readonly name: "";
					readonly type: "uint32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "transferOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "updatePool";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				},
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "userInfo";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "rewardDebt";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly stateMutability: "payable";
			readonly type: "receive";
		}
	];
	static createInterface(): MasterChefInterface;
	static connect(address: string, runner?: ContractRunner | null): MasterChef;
}
export type MasterPoolConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class MasterPool__factory extends ContractFactory {
	constructor(...args: MasterPoolConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<MasterPool & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): MasterPool__factory;
	static readonly bytecode = "0x6080604052348015600f57600080fd5b50612fac8061001f6000396000f3fe60806040526004361061023e5760003560e01c8063859fe6c71161012e578063cf2770d6116100ab578063f2fde38b1161006f578063f2fde38b14610807578063f64ba28b14610827578063f7c618c114610847578063fc7e422714610867578063ff51a2721461088757600080fd5b8063cf2770d614610733578063d024fe7b14610753578063db2aa12714610773578063e907d8c014610793578063efaf0597146107b357600080fd5b8063a373e68d116100f2578063a373e68d14610682578063aa020654146106a2578063ad5c4648146106d3578063b072797e146106f3578063cd09525d1461071357600080fd5b8063859fe6c7146105d25780638ae74894146105e55780638af96a66146106055780638da5cb5b146106255780638ef3d24d1461066257600080fd5b80633d912033116101bc57806369ff74f11161018057806369ff74f11461051c5780636a47aa0614610544578063715018a61461058257806377ba7950146105975780637e6335f4146105b757600080fd5b80633d912033146104715780634fb4bb8c1461049157806361249d86146104b1578063630b5ba1146104d157806369eb9cdb146104e657600080fd5b806317caf6f11161020357806317caf6f1146103a7578063192e30f8146103d95780631973aa47146103f9578063364a620e146104195780633a2c67771461043957600080fd5b80628934521461029f57806304075399146102c8578063081e3eda146102e85780631246dbf51461030c5780631526fe271461033c57600080fd5b3661029a576000546001600160a01b0316330361025757005b60005461026c906001600160a01b03166108b8565b1561029857600080546001600160a01b03168152600460205260409020546102989061ffff163461092a565b005b600080fd5b3480156102ab57600080fd5b506102b560035481565b6040519081526020015b60405180910390f35b3480156102d457600080fd5b506102986102e33660046128d4565b6109aa565b3480156102f457600080fd5b506005545b60405161ffff90911681526020016102bf565b34801561031857600080fd5b5061032c610327366004612909565b6108b8565b60405190151581526020016102bf565b34801561034857600080fd5b5061035c6103573660046128d4565b6109ee565b604080516001600160a01b03909716875263ffffffff90951660208701526001600160401b0393841694860194909452908216606085015216608083015260a082015260c0016102bf565b3480156103b357600080fd5b506007546103c49063ffffffff1681565b60405163ffffffff90911681526020016102bf565b3480156103e557600080fd5b506102986103f4366004612924565b610a59565b34801561040557600080fd5b5061029861041436600461299a565b610bc3565b34801561042557600080fd5b50610298610434366004612a5f565b610c1e565b34801561044557600080fd5b50600254610459906001600160a01b031681565b6040516001600160a01b0390911681526020016102bf565b34801561047d57600080fd5b5061029861048c366004612a7a565b610c7f565b34801561049d57600080fd5b5061032c6104ac366004612909565b610cc7565b3480156104bd57600080fd5b506102b56104cc366004612aa4565b610d29565b3480156104dd57600080fd5b50610298610d40565b3480156104f257600080fd5b50610459610501366004612aa4565b6008602052600090815260409020546001600160a01b031681565b34801561052857600080fd5b506007546104599064010000000090046001600160a01b031681565b34801561055057600080fd5b50600a5461056a906201000090046001600160401b031681565b6040516001600160401b0390911681526020016102bf565b34801561058e57600080fd5b50610298610d6b565b3480156105a357600080fd5b506102986105b2366004612abf565b610d7f565b3480156105c357600080fd5b50600a546102f99061ffff1681565b6102986105e0366004612a7a565b61092a565b3480156105f157600080fd5b5061056a610600366004612adb565b610dda565b34801561061157600080fd5b50610298610620366004612aa4565b610ebe565b34801561063157600080fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610459565b34801561066e57600080fd5b5061029861067d366004612b34565b610f0a565b34801561068e57600080fd5b506102b561069d366004612adb565b610fe6565b3480156106ae57600080fd5b506102f96106bd366004612909565b60096020526000908152604090205461ffff1681565b3480156106df57600080fd5b50600054610459906001600160a01b031681565b3480156106ff57600080fd5b5061029861070e366004612c15565b61128a565b34801561071f57600080fd5b5061029861072e366004612909565b61143c565b34801561073f57600080fd5b5061029861074e366004612aa4565b6114ce565b34801561075f57600080fd5b5061029861076e366004612cb9565b611533565b34801561077f57600080fd5b5061029861078e366004612abf565b611752565b34801561079f57600080fd5b506102b56107ae366004612d1e565b6117a6565b3480156107bf57600080fd5b506107f26107ce366004612d1e565b60066020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016102bf565b34801561081357600080fd5b50610298610822366004612909565b611809565b34801561083357600080fd5b506102b5610842366004612aa4565b611847565b34801561085357600080fd5b50600154610459906001600160a01b031681565b34801561087357600080fd5b506102f9610882366004612d51565b611988565b34801561089357600080fd5b506102f96108a2366004612909565b60046020526000908152604090205461ffff1681565b6001600160a01b03811660009081526004602052604081205461ffff16151580610924575060055460011480156109245750816001600160a01b0316600560008154811061090857610908612d72565b60009182526020909120600390910201546001600160a01b0316145b92915050565b610932611afa565b60055461ffff8316106109605760405162461bcd60e51b815260040161095790612d88565b60405180910390fd5b61096a8233611b44565b801561097d5761097b823383611cd7565b505b6109a660017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b5050565b6109b2611d8f565b60038190556040518181527f403d953100676c530ee357c0fe9f352dc6c18bd4e8594c49d2107ecbad6a6f09906020015b60405180910390a150565b600581815481106109fe57600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b038216935063ffffffff600160a01b830416926001600160401b03600160c01b90930483169281811692600160401b909204169086565b610a6233610cc7565b610a7e5760405162461bcd60e51b815260040161095790612dae565b3360009081526009602090815260408083205461ffff16808452600683528184206001600160a01b03888116808752919094528285209387168552919093209015801590610acd575081548411155b15610b3f5783826000016000828254610ae69190612de6565b90915550610af690508387611e05565b8261ffff16866001600160a01b03167f4e2ebfe79f50514ade8e774c7f3c01250d6aa3a91cd1f5c33a78df9c459f6e9d86604051610b3691815260200190565b60405180910390a35b6001600160a01b03851615610bbb5783816000016000828254610b629190612df9565b90915550610b7290508386611e05565b8261ffff16856001600160a01b03167f2c00706df3fbb4a8ead830d4c0a7f278823843af15ad7e680c4f7db763dd779c86604051610bb291815260200190565b60405180910390a35b505050505050565b610bcc85610ebe565b610bd584610c1e565b610be58b8b8a8a8a88888861128a565b5050600780546001600160a01b0390981664010000000002640100000000600160c01b0319909816979097179096555050505050505050565b610c26611d8f565b600a805469ffffffffffffffff00001916620100006001600160401b038416908102919091179091556040519081527fb392a7f1d54c25770aab00ccc58fb2c88bc54b543e8371b4673a7c9e0f2651ab906020016109e3565b610c87611afa565b60055461ffff831610610cac5760405162461bcd60e51b815260040161095790612d88565b610cb68233611b44565b801561097d5761097b823383611e82565b6001600160a01b03811660009081526009602052604081205461ffff161515806109245750506000805260086020527f5eff886ea0ce6ca488a3d6e336d6c0f75f46d19b42c06ce5ee98e42c96d256c7546001600160a01b0391821691161490565b600061092482610d3a600142612de6565b42610fe6565b60055460005b818161ffff1610156109a657610d5b816114ce565b610d6481612e0c565b9050610d46565b610d73611d8f565b610d7d6000611edd565b565b610d8833610cc7565b610da45760405162461bcd60e51b815260040161095790612dae565b3360009081526009602052604090205461ffff16610dc28184611b44565b8115610dd557610dd3818484611cd7565b505b505050565b6000816001600160401b0316836001600160401b031610610dfd57506000610eb7565b600060058561ffff1681548110610e1657610e16612d72565b600091825260208220600390910201805460018201549193506001600160401b03600160c01b909104811692918116919087168310610e555782610e57565b865b90506000826001600160401b0316876001600160401b031610610e7a5782610e7c565b865b9050806001600160401b0316826001600160401b031610610ea557600095505050505050610eb7565b610eaf8282612e2d565b955050505050505b9392505050565b610ec6611d8f565b600a805461ffff191661ffff83169081179091556040519081527f6c8d6880a607b5400f9b0ad0718c6c3c499da1d676ddfc670abbae188543112c906020016109e3565b6000806000610f1884611f4e565b92509250925060058761ffff1681548110610f3557610f35612d72565b600091825260209091206003909102015460405163d505accf60e01b8152336004820152306024820152604481018890526001600160401b038716606482015260ff8516608482015260a4810184905260c481018390526001600160a01b039091169063d505accf9060e401600060405180830381600087803b158015610fbb57600080fd5b505af1158015610fcf573d6000803e3d6000fd5b50505050610fdd878761092a565b50505050505050565b6000816001600160401b0316836001600160401b031610158061100f575060075463ffffffff16155b1561101c57506000610eb7565b600060058561ffff168154811061103557611035612d72565b600091825260208220600390910201805460018201549193506001600160401b03600160c01b9091048116929181169190871683106110745782611076565b865b90506000826001600160401b0316876001600160401b031610611099578261109b565b865b9050806001600160401b0316826001600160401b0316106110c457600095505050505050610eb7565b600a546201000090046001600160401b031660000361113757600754855460035463ffffffff92831692600160a01b909204909116906111048585612e2d565b6001600160401b03166111179190612e4c565b6111219190612e4c565b61112b9190612e79565b95505050505050610eb7565b600354600a5460009190849083906201000090046001600160401b031661115e8984612e2d565b6111689190612e8d565b90505b846001600160401b0316826001600160401b031610801561118b57508215155b1561124f57600a546000906201000090046001600160401b03166111b0836001612ebb565b6111ba9190612eda565b6111c4908a612ebb565b90506000816001600160401b0316876001600160401b0316106111e757816111e9565b865b9050846111f68583612e2d565b6001600160401b03166112099190612e4c565b6112139087612df9565b600a54909650909350839060649061122f9061ffff1687612e4c565b6112399190612e79565b94508261124581612f03565b935050505061116b565b600754895463ffffffff9182169161126f91600160a01b90041686612e4c565b6112799190612e79565b9d9c50505050505050505050505050565b6000611294611f98565b805490915060ff600160401b82041615906001600160401b03166000811580156112bb5750825b90506000826001600160401b031660011480156112d75750303b155b9050811580156112e5575080155b156113035760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561132d57845460ff60401b1916600160401b1785555b611335611fc1565b600080546001600160a01b03808f166001600160a01b031992831617909255600180548e841690831617905560028054928d169290911691909117905561137b896109aa565b8515611393576113918b6103e88a8a6000611988565b505b61139c8d611fd1565b604080516001600160a01b038e811682528d811660208301528c168183015290517fe86209b390e8076baf4c4a616512319eb81d91e8b1f8ca206e88c5ff1c264e149181900360600190a1831561142d57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050505050505050565b61144533610cc7565b6114615760405162461bcd60e51b815260040161095790612dae565b336000908152600960205260409020546001546005805461ffff909316926001600160a01b03909216918390811061149b5761149b612d72565b60009182526020909120600390910201546001600160a01b0316146114c4576109a68183611b44565b6109a68183611fe2565b600060058261ffff16815481106114e7576114e7612d72565b9060005260206000209060030201905061150082611847565b600282015560010180546fffffffffffffffff00000000000000001916600160401b426001600160401b03160217905550565b61153b611d8f565b60055461ffff8616106115605760405162461bcd60e51b815260040161095790612d88565b801561156e5761156e610d40565b8360058661ffff168154811061158657611586612d72565b60009182526020909120600390910201546007546115b49163ffffffff600160a01b90910481169116612f25565b6115be9190612f41565b600760006101000a81548163ffffffff021916908363ffffffff1602179055508360058661ffff16815481106115f6576115f6612d72565b906000526020600020906003020160000160146101000a81548163ffffffff021916908363ffffffff1602179055508260058661ffff168154811061163d5761163d612d72565b906000526020600020906003020160000160186101000a8154816001600160401b0302191690836001600160401b031602179055508160058661ffff168154811061168a5761168a612d72565b906000526020600020906003020160010160006101000a8154816001600160401b0302191690836001600160401b0316021790555060058561ffff16815481106116d6576116d6612d72565b6000918252602091829020600390910201546040805163ffffffff881681526001600160401b0380881694820194909452928516908301526001600160a01b03169061ffff8716907f8d79088268352e1a4ae18346d3aa40ff9d49bb8ec82b846a0bc32d12a7e477e39060600160405180910390a35050505050565b61175b33610cc7565b6117775760405162461bcd60e51b815260040161095790612dae565b3360009081526009602052604090205461ffff166117958184611b44565b8115610dd557610dd3818484611e82565b61ffff821660009081526006602090815260408083206001600160a01b03851684529091528120600181015464e8d4a510006117e186611847565b83546117ed9190612e4c565b6117f79190612e79565b6118019190612de6565b949350505050565b611811611d8f565b6001600160a01b03811661183b57604051631e4fbdf760e01b815260006004820152602401610957565b61184481611edd565b50565b60008060058361ffff168154811061186157611861612d72565b600091825260208083206040805160c08101825260039490940290910180546001600160a01b038116808652600160a01b820463ffffffff1694860194909452600160c01b90046001600160401b039081168584015260018201548082166060870152600160401b90041660808501526002015460a0840181905290516370a0823160e01b815230600482015292945092916370a0823190602401602060405180830381865afa158015611919573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193d9190612f5d565b9050801561198057600061195686856080015142610fe6565b9050816119688264e8d4a51000612e4c565b6119729190612e79565b61197c9084612df9565b9250505b509392505050565b6000611992611d8f565b61199f8686868686612161565b600754604051606089901b6bffffffffffffffffffffffff191660208201529192506000916119f89164010000000090046001600160a01b031690603401604051602081830303815290604052805190602001206123c7565b600154604051630367f0b360e41b815230600482015261ffff851660248201526001600160a01b038a81166044830152918216606482015291925082919082169063367f0b3090608401600060405180830381600087803b158015611a5c57600080fd5b505af1158015611a70573d6000803e3d6000fd5b5050505061ffff8316600081815260086020908152604080832080546001600160a01b0319166001600160a01b038781169190911790915586168084526009835292819020805461ffff191685179055519182527ffaaf525512a973415b1e0c1013407f1249e700df4f7ef24c051bc874434d66b4910160405180910390a2505095945050505050565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00805460011901611b3e57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b600060058361ffff1681548110611b5d57611b5d612d72565b6000918252602080832061ffff871684526006825260408085206001600160a01b0388168652909252922060039091029091019150611b9b846114ce565b805415611ccd576000816001015464e8d4a5100084600201548460000154611bc39190612e4c565b611bcd9190612e79565b611bd79190612de6565b90508015611ccb576002546001600160a01b0316611c5a576001546040516340c10f1960e01b81526001600160a01b03868116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b158015611c3d57600080fd5b505af1158015611c51573d6000803e3d6000fd5b50505050611ccb565b60025460015460405163ae63932960e01b81526001600160a01b03918216600482015286821660248201526044810184905291169063ae63932990606401600060405180830381600087803b158015611cb257600080fd5b505af1158015611cc6573d6000803e3d6000fd5b505050505b505b610dd38484611e05565b600080611ce58585856123d5565b61ffff861660009081526008602052604090819020549051631b96b2f960e01b81526001600160a01b03878116600483015260248201849052929350911690631b96b2f9906044015b600060405180830381600087803b158015611d4857600080fd5b505af1158015611d5c573d6000803e3d6000fd5b5092979650505050505050565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b6000611dc27f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b90506001600160a01b03811615801590611de557506001600160a01b0381163314155b156118445760405163118cdaa760e01b8152336004820152602401610957565b600060058361ffff1681548110611e1e57611e1e612d72565b6000918252602080832061ffff871684526006825260408085206001600160a01b038816865290925292206002600390920290920190810154825491935064e8d4a5100091611e6d9190612e4c565b611e779190612e79565b600190910155505050565b600080611e9085858561261d565b61ffff861660009081526008602052604090819020549051639fc8ae6d60e01b81526001600160a01b03878116600483015260248201849052929350911690639fc8ae6d90604401611d2e565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60008060008351604103611f785750505060208101516040820151606083015160001a9190611f91565b604051634be6321b60e01b815260040160405180910390fd5b9193909250565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610924565b611fc96126e5565b610d7d61270a565b611fd96126e5565b61184481612712565b600060058361ffff1681548110611ffb57611ffb612d72565b6000918252602080832061ffff871684526006825260408085206001600160a01b0388168652909252922060039091029091019150612039846114ce565b805415611ccd576000816001015464e8d4a51000846002015484600001546120619190612e4c565b61206b9190612e79565b6120759190612de6565b90508015611ccb57808260000160008282546120919190612df9565b909155505061ffff851660009081526008602052604090819020549051631b96b2f960e01b81526001600160a01b0386811660048301526024820184905290911690631b96b2f990604401600060405180830381600087803b1580156120f657600080fd5b505af115801561210a573d6000803e3d6000fd5b505050508461ffff16846001600160a01b03167f2c00706df3fbb4a8ead830d4c0a7f278823843af15ad7e680c4f7db763dd779c8360405161214e91815260200190565b60405180910390a350610dd38484611e05565b600061216b611d8f565b612174866108b8565b156121b35760405162461bcd60e51b815260206004820152600f60248201526e111d5c1b1a58d85d195908141bdbdb608a1b6044820152606401610957565b81156121c1576121c1610d40565b50600554600780548691906000906121e090849063ffffffff16612f41565b825463ffffffff9182166101009390930a9283029282021916919091179091556001600160a01b038089166000818152600460209081526040808320805461ffff8a1661ffff199091168117909155815160c0810183528581528d88169381019384526001600160401b03808e168285019081528d8216606084019081526080840188815260a08501898152600580546001810182559a52945160039099027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db081018054995194518616600160c01b026001600160c01b0395909e16600160a01b026001600160c01b0319909a169a909c169990991797909717919091169990991790975596517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db18501805494518816600160401b026fffffffffffffffffffffffffffffffff1990951691909716179290921790945593517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db29091015590519092507f8d79088268352e1a4ae18346d3aa40ff9d49bb8ec82b846a0bc32d12a7e477e3906123b69089908990899063ffffffff9390931683526001600160401b03918216602084015216604082015260600190565b60405180910390a395945050505050565b6000610eb78383600061271a565b60008060058561ffff16815481106123ef576123ef612d72565b6000918252602080832061ffff891684526006825260408085206001600160a01b03808b16875293528420935460039093020180549094508116911614801561243757508334145b156124a85760008054906101000a90046001600160a01b03166001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561248a57600080fd5b505af115801561249e573d6000803e3d6000fd5b50505050506125a7565b81546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156124f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125149190612f5d565b835490915061252e906001600160a01b03168730886127b1565b82546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015612575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125999190612f5d565b6125a39190612de6565b9450505b838160000160008282546125bb9190612df9565b909155506125cb90508686611e05565b8561ffff16856001600160a01b03167f2c00706df3fbb4a8ead830d4c0a7f278823843af15ad7e680c4f7db763dd779c8660405161260b91815260200190565b60405180910390a35091949350505050565b60008060058561ffff168154811061263757612637612d72565b6000918252602080832061ffff891684526006825260408085206001600160a01b038a168652909252908320805460039093029091019350918591839190612680908490612de6565b9091555050815461269b906001600160a01b03168686612818565b6126a58686611e05565b8561ffff16856001600160a01b03167f4e2ebfe79f50514ade8e774c7f3c01250d6aa3a91cd1f5c33a78df9c459f6e9d8660405161260b91815260200190565b6126ed612849565b610d7d57604051631afcd79f60e31b815260040160405180910390fd5b611d696126e5565b6118116126e5565b6000814710156127465760405163cf47918160e01b815247600482015260248101839052604401610957565b763d602d80600a3d3981f3363d3d373d3d3d363d730000008460601b60e81c176000526e5af43d82803e903d91602b57fd5bf38460781b17602052826037600984f590506001600160a01b038116610eb75760405163b06ebf3d60e01b815260040160405180910390fd5b6040516001600160a01b038481166024830152838116604483015260648201839052610dd39186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612863565b6040516001600160a01b03838116602483015260448201839052610dd591859182169063a9059cbb906064016127e6565b6000612853611f98565b54600160401b900460ff16919050565b600080602060008451602086016000885af180612886576040513d6000823e3d81fd5b50506000513d9150811561289e5780600114156128ab565b6001600160a01b0384163b155b15610dd357604051635274afe760e01b81526001600160a01b0385166004820152602401610957565b6000602082840312156128e657600080fd5b5035919050565b80356001600160a01b038116811461290457600080fd5b919050565b60006020828403121561291b57600080fd5b610eb7826128ed565b60008060006060848603121561293957600080fd5b612942846128ed565b9250612950602085016128ed565b929592945050506040919091013590565b803561ffff8116811461290457600080fd5b80356001600160401b038116811461290457600080fd5b8035801515811461290457600080fd5b60008060008060008060008060008060006101608c8e0312156129bc57600080fd5b6129c58c6128ed565b9a506129d360208d016128ed565b99506129e160408d016128ed565b98506129ef60608d016128ed565b97506129fd60808d016128ed565b965060a08c01359550612a1260c08d01612961565b9450612a2060e08d01612973565b9350612a2f6101008d01612973565b9250612a3e6101208d01612973565b9150612a4d6101408d0161298a565b90509295989b509295989b9093969950565b600060208284031215612a7157600080fd5b610eb782612973565b60008060408385031215612a8d57600080fd5b612a9683612961565b946020939093013593505050565b600060208284031215612ab657600080fd5b610eb782612961565b60008060408385031215612ad257600080fd5b612a96836128ed565b600080600060608486031215612af057600080fd5b612af984612961565b9250612b0760208501612973565b9150612b1560408501612973565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612b4a57600080fd5b612b5385612961565b935060208501359250612b6860408601612973565b915060608501356001600160401b03811115612b8357600080fd5b8501601f81018713612b9457600080fd5b80356001600160401b03811115612bad57612bad612b1e565b604051601f8201601f19908116603f011681016001600160401b0381118282101715612bdb57612bdb612b1e565b604052818152828201602001891015612bf357600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b600080600080600080600080610100898b031215612c3257600080fd5b612c3b896128ed565b9750612c4960208a016128ed565b9650612c5760408a016128ed565b9550612c6560608a016128ed565b945060808901359350612c7a60a08a01612973565b9250612c8860c08a01612973565b9150612c9660e08a0161298a565b90509295985092959890939650565b803563ffffffff8116811461290457600080fd5b600080600080600060a08688031215612cd157600080fd5b612cda86612961565b9450612ce860208701612ca5565b9350612cf660408701612973565b9250612d0460608701612973565b9150612d126080870161298a565b90509295509295909350565b60008060408385031215612d3157600080fd5b612d3a83612961565b9150612d48602084016128ed565b90509250929050565b600080600080600060a08688031215612d6957600080fd5b612cda866128ed565b634e487b7160e01b600052603260045260246000fd5b6020808252600c908201526b125b9d985b1a5908141bdbdb60a21b604082015260600190565b6020808252600890820152671393d517d413d3d360c21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561092457610924612dd0565b8082018082111561092457610924612dd0565b600061ffff821661ffff8103612e2457612e24612dd0565b60010192915050565b6001600160401b03828116828216039081111561092457610924612dd0565b808202811582820484141761092457610924612dd0565b634e487b7160e01b600052601260045260246000fd5b600082612e8857612e88612e63565b500490565b60006001600160401b03831680612ea657612ea6612e63565b806001600160401b0384160491505092915050565b6001600160401b03818116838216019081111561092457610924612dd0565b6001600160401b038181168382160290811690818114612efc57612efc612dd0565b5092915050565b60006001600160401b0382166001600160401b038103612e2457612e24612dd0565b63ffffffff828116828216039081111561092457610924612dd0565b63ffffffff818116838216019081111561092457610924612dd0565b600060208284031215612f6f57600080fd5b505191905056fea264697066735822122045526ffd2a86c7d061b27954e8514001b4f73200a5975398403c9b966c93c8fc64736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "FailedDeployment";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidSignatureLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "OwnableInvalidOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "OwnableUnauthorizedAccount";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "ReentrancyGuardReentrantCall";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "token";
					readonly type: "address";
				}
			];
			readonly name: "SafeERC20FailedOperation";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "user";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				}
			];
			readonly name: "Deposit";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "WETH";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "rewardToken";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "rewardVault";
					readonly type: "address";
				}
			];
			readonly name: "InitializedChef";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "previousOwner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "OwnershipTransferred";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "halvingInterval";
					readonly type: "uint64";
				}
			];
			readonly name: "SetHalvingInterval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint16";
					readonly name: "halvingRate";
					readonly type: "uint16";
				}
			];
			readonly name: "SetHalvingRate";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "lpToken";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint32";
					readonly name: "newAllocPoint";
					readonly type: "uint32";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "startTime";
					readonly type: "uint64";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "endTime";
					readonly type: "uint64";
				}
			];
			readonly name: "SetPool";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "poolToken";
					readonly type: "address";
				}
			];
			readonly name: "SetPoolToken";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "rewardsPerSec";
					readonly type: "uint256";
				}
			];
			readonly name: "SetRewards";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "user";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				}
			];
			readonly name: "Withdraw";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "WETH";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IWETH";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_lpToken";
					readonly type: "address";
				},
				{
					readonly internalType: "uint32";
					readonly name: "_allocPoint";
					readonly type: "uint32";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "_withUpdate";
					readonly type: "bool";
				}
			];
			readonly name: "add";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "deposit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "payable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_deadline";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bytes";
					readonly name: "_signature";
					readonly type: "bytes";
				}
			];
			readonly name: "depositPermit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_fromTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_toTime";
					readonly type: "uint64";
				}
			];
			readonly name: "getMultiplier";
			readonly outputs: readonly [
				{
					readonly internalType: "uint64";
					readonly name: "";
					readonly type: "uint64";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_fromTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_toTime";
					readonly type: "uint64";
				}
			];
			readonly name: "getPoolRewardsByTime";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "getPoolRewardsPerSec";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "getRewardsPerShare";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "halvingInterval";
			readonly outputs: readonly [
				{
					readonly internalType: "uint64";
					readonly name: "";
					readonly type: "uint64";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "halvingRate";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_lpToken";
					readonly type: "address";
				}
			];
			readonly name: "hasPool";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_poolToken";
					readonly type: "address";
				}
			];
			readonly name: "hasPoolToken";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_WETH";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardToken";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardVault";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_rewardsPerSec";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "addPool";
					readonly type: "bool";
				}
			];
			readonly name: "initializeChef";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_WETH";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_poolTokenImplementation";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardToken";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardVault";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_rewardsPerSec";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint16";
					readonly name: "_halvingRate";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_halvingInterval";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "addPool";
					readonly type: "bool";
				}
			];
			readonly name: "initializePool";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "massUpdatePools";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "owner";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "address";
					readonly name: "_user";
					readonly type: "address";
				}
			];
			readonly name: "pendingRewards";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_user";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "poolDeposit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "poolId";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "poolIdByTokens";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly name: "poolInfo";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IERC20";
					readonly name: "lpToken";
					readonly type: "address";
				},
				{
					readonly internalType: "uint32";
					readonly name: "allocPoint";
					readonly type: "uint32";
				},
				{
					readonly internalType: "uint64";
					readonly name: "startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "lastRewardTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint256";
					readonly name: "accRewardsPerShare";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "poolLength";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				}
			];
			readonly name: "poolMint";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "poolTokenImplementation";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly name: "poolTokens";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IERC4626Pool";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "poolTransfer";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_user";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "poolWithdraw";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "renounceOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardToken";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IERC20Mintable";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardVault";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IRewardVault";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardsPerSec";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint32";
					readonly name: "_allocPoint";
					readonly type: "uint32";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_startTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "uint64";
					readonly name: "_endTime";
					readonly type: "uint64";
				},
				{
					readonly internalType: "bool";
					readonly name: "_withUpdate";
					readonly type: "bool";
				}
			];
			readonly name: "set";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint64";
					readonly name: "_halvingInterval";
					readonly type: "uint64";
				}
			];
			readonly name: "setHalvingInterval";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_halvingRate";
					readonly type: "uint16";
				}
			];
			readonly name: "setHalvingRate";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "_rewardsPerSec";
					readonly type: "uint256";
				}
			];
			readonly name: "setRewardsPerSec";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalAllocPoint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint32";
					readonly name: "";
					readonly type: "uint32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "transferOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				}
			];
			readonly name: "updatePool";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				},
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "userInfo";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "rewardDebt";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly stateMutability: "payable";
			readonly type: "receive";
		}
	];
	static createInterface(): MasterPoolInterface;
	static connect(address: string, runner?: ContractRunner | null): MasterPool;
}
export type RewardVaultConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class RewardVault__factory extends ContractFactory {
	constructor(...args: RewardVaultConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<RewardVault & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): RewardVault__factory;
	static readonly bytecode = "0x6080604052348015600f57600080fd5b50610aff8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063ae63932911610066578063ae6393291461010d578063ccb6a27014610120578063d9caed1214610133578063e7e31e7a14610146578063f2fde38b1461015957600080fd5b80631241803814610098578063715018a6146100b65780638ce5877c146100c05780638da5cb5b146100d3575b600080fd5b6100a061016c565b6040516100ad91906109bd565b60405180910390f35b6100be61017d565b005b6100be6100ce366004610a1e565b610191565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b0390911681526020016100ad565b6100be61011b366004610a3b565b610233565b6100be61012e366004610a1e565b6102ec565b6100be610141366004610a3b565b610442565b6100be610154366004610a1e565b6104ad565b6100be610167366004610a1e565b610546565b60606101786000610584565b905090565b610185610598565b61018f600061060e565b565b610199610598565b6101a460008261067f565b6101e75760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fa9a822a72222a960891b60448201526064015b60405180910390fd5b6101f26000826106a6565b506040516001600160a01b03821681527f508e01dc09a24291350cfc3ad6e6ee056cfa6df6780f82e57e60190be9f35524906020015b60405180910390a150565b61023e60003361067f565b61027c5760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fa9a822a72222a960891b60448201526064016101de565b6102906001600160a01b03841683836106bb565b816001600160a01b0316336001600160a01b0316846001600160a01b03167fa209447764afbca4d7c43c9962941f114f3465f7fde32167c76661eb75b3ef77846040516102df91815260200190565b60405180910390a4505050565b60006102f6610712565b805490915060ff600160401b820416159067ffffffffffffffff1660008115801561031e5750825b905060008267ffffffffffffffff16600114801561033b5750303b155b905081158015610349575080155b156103675760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561039157845460ff60401b1916600160401b1785555b6001600160a01b0386166103a3573395505b6103ac8661073b565b6103b760008761074c565b506040516001600160a01b03871681527ffb461a9d124e123750171741a89341defba2596b06be0c452e3e0f990c18bb9e9060200160405180910390a1831561043a57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b61044a610598565b61045e6001600160a01b03841683836106bb565b816001600160a01b0316336001600160a01b0316846001600160a01b03167fa4195c37c2947bbe89165f03e320b6903116f0b10d8cfdb522330f7ce6f9fa24846040516102df91815260200190565b6104b5610598565b6104c060008261067f565b156105015760405162461bcd60e51b8152602060048201526011602482015270222aa82624a1a0aa22afa9a822a72222a960791b60448201526064016101de565b61050c60008261074c565b506040516001600160a01b03821681527ffb461a9d124e123750171741a89341defba2596b06be0c452e3e0f990c18bb9e90602001610228565b61054e610598565b6001600160a01b03811661057857604051631e4fbdf760e01b8152600060048201526024016101de565b6105818161060e565b50565b6060600061059183610761565b9392505050565b60006105cb7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b90506001600160a01b038116158015906105ee57506001600160a01b0381163314155b156105815760405163118cdaa760e01b81523360048201526024016101de565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b600061069d836001600160a01b0384166107bd565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261070d9084906108b0565b505050565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006106a0565b610743610927565b6105818161094c565b600061069d836001600160a01b038416610954565b6060816000018054806020026020016040519081016040528092919081815260200182805480156107b157602002820191906000526020600020905b81548152602001906001019080831161079d575b50505050509050919050565b600081815260018301602052604081205480156108a65760006107e1600183610a7c565b85549091506000906107f590600190610a7c565b905080821461085a57600086600001828154811061081557610815610a9d565b906000526020600020015490508087600001848154811061083857610838610a9d565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061086b5761086b610ab3565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106a0565b60009150506106a0565b600080602060008451602086016000885af1806108d3576040513d6000823e3d81fd5b50506000513d915081156108eb5780600114156108f8565b6001600160a01b0384163b155b1561092157604051635274afe760e01b81526001600160a01b03851660048201526024016101de565b50505050565b61092f6109a3565b61018f57604051631afcd79f60e31b815260040160405180910390fd5b61054e610927565b600081815260018301602052604081205461099b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106a0565b5060006106a0565b60006109ad610712565b54600160401b900460ff16919050565b602080825282518282018190526000918401906040840190835b818110156109fe5783516001600160a01b03168352602093840193909201916001016109d7565b509095945050505050565b6001600160a01b038116811461058157600080fd5b600060208284031215610a3057600080fd5b813561059181610a09565b600080600060608486031215610a5057600080fd5b8335610a5b81610a09565b92506020840135610a6b81610a09565b929592945050506040919091013590565b818103818111156106a057634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea26469706673582212205437642f17423f28cf12c6c5b64751f1960abeb73a8c7377940c4d313458154464736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "OwnableInvalidOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "OwnableUnauthorizedAccount";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "token";
					readonly type: "address";
				}
			];
			readonly name: "SafeERC20FailedOperation";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "newSpender";
					readonly type: "address";
				}
			];
			readonly name: "AddSpender";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "previousOwner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "OwnershipTransferred";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "oldSpender";
					readonly type: "address";
				}
			];
			readonly name: "RemoveSpender";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "token";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Rewarded";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "token";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Withdrawn";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_spender";
					readonly type: "address";
				}
			];
			readonly name: "addSpender";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_initOwner";
					readonly type: "address";
				}
			];
			readonly name: "initializeVault";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "owner";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_spender";
					readonly type: "address";
				}
			];
			readonly name: "removeSpender";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "renounceOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "contract IERC20";
					readonly name: "token";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "sendTo";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "spenders";
			readonly outputs: readonly [
				{
					readonly internalType: "address[]";
					readonly name: "";
					readonly type: "address[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "transferOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "contract IERC20";
					readonly name: "token";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): RewardVaultInterface;
	static connect(address: string, runner?: ContractRunner | null): RewardVault;
}
export type InitializableProxyConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class InitializableProxy__factory extends ContractFactory {
	constructor(...args: InitializableProxyConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<InitializableProxy & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): InitializableProxy__factory;
	static readonly bytecode = "0x6080604052348015600f57600080fd5b50610acf8061001f6000396000f3fe6080604052600436106100745760003560e01c80635c60da1b1161004e5780635c60da1b146100f05780639f712f2f14610105578063aba0017314610125578063ee0530f41461013857610083565b80633e47158c1461008b5780634f1ef286146100bd5780635a28dda4146100d057610083565b366100835761008161015a565b005b61008161015a565b34801561009757600080fd5b506100a061016c565b6040516001600160a01b0390911681526020015b60405180910390f35b6100816100cb366004610785565b61017b565b3480156100dc57600080fd5b506100816100eb3660046107d3565b61030e565b3480156100fc57600080fd5b506100a06103cd565b34801561011157600080fd5b50610081610120366004610810565b6103d7565b610081610133366004610832565b610431565b34801561014457600080fd5b5061014d6104bf565b6040516100b491906108e0565b61016a610165610570565b61057a565b565b60006101766105a3565b905090565b61018361016c565b6001600160a01b0316336001600160a01b031614806101b057506101a561016c565b6001600160a01b0316155b6101d55760405162461bcd60e51b81526004016101cc90610913565b60405180910390fd5b816001600160a01b03163b60000361020b57604051634c9c8ce360e01b81526001600160a01b03831660048201526024016101cc565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0384169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a28051156102eb57600080836001600160a01b0316836040516102939190610936565b600060405180830381855af49150503d80600081146102ce576040519150601f19603f3d011682016040523d82523d6000602084013e6102d3565b606091505b5091509150816102e557805181602001fd5b50505050565b341561030a5760405163b398979f60e01b815260040160405180910390fd5b5050565b61031661016c565b6001600160a01b0316336001600160a01b03161480610343575061033861016c565b6001600160a01b0316155b61035f5760405162461bcd60e51b81526004016101cc90610913565b8051156103ca577ffcba12fcf625f4823c7c0c86b97ab29721afc9e784836bc00bf04553a0c8dff461039182826109da565b507f8a1bce929b257bfd582fa164d9b9fa4d4b0b7442b10b3aad23e2c56aa4e0d61a816040516103c191906108e0565b60405180910390a15b50565b6000610176610570565b6103df61016c565b6001600160a01b0316336001600160a01b0316148061040c575061040161016c565b6001600160a01b0316155b6104285760405162461bcd60e51b81526004016101cc90610913565b6103ca816105d6565b600061043b610570565b6001600160a01b03161480156104615750600061045661016c565b6001600160a01b0316145b6104a35760405162461bcd60e51b81526020600482015260136024820152721053149150511657d253925512505312569151606a1b60448201526064016101cc565b6104ad828261017b565b6104b68461030e565b6102e5836103d7565b60607ffcba12fcf625f4823c7c0c86b97ab29721afc9e784836bc00bf04553a0c8dff480546104ed90610952565b80601f016020809104026020016040519081016040528092919081815260200182805461051990610952565b80156105665780601f1061053b57610100808354040283529160200191610566565b820191906000526020600020905b81548152906001019060200180831161054957829003601f168201915b5050505050905090565b600061017661062a565b3660008037600080366000845af43d6000803e808015610599573d6000f35b3d6000fd5b505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6105ff6105a3565b604080516001600160a01b03928316815291841660208301520160405180910390a16103ca81610652565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6105c7565b6001600160a01b03811661067c57604051633173bdd160e11b8152600060048201526024016101cc565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610380546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b03811681146106d457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261070057600080fd5b81356020830160008067ffffffffffffffff841115610721576107216106d9565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff82111715610750576107506106d9565b60405283815290508082840187101561076857600080fd5b838360208301376000602085830101528094505050505092915050565b6000806040838503121561079857600080fd5b6107a1836106bd565b9150602083013567ffffffffffffffff8111156107bd57600080fd5b6107c9858286016106ef565b9150509250929050565b6000602082840312156107e557600080fd5b813567ffffffffffffffff8111156107fc57600080fd5b610808848285016106ef565b949350505050565b60006020828403121561082257600080fd5b61082b826106bd565b9392505050565b6000806000806080858703121561084857600080fd5b843567ffffffffffffffff81111561085f57600080fd5b61086b878288016106ef565b94505061087a602086016106bd565b9250610888604086016106bd565b9150606085013567ffffffffffffffff8111156108a457600080fd5b6108b0878288016106ef565b91505092959194509250565b60005b838110156108d75781810151838201526020016108bf565b50506000910152565b60208152600082518060208401526108ff8160408501602087016108bc565b601f01601f19169190910160400192915050565b6020808252600990820152682727aa2fa0a226a4a760b91b604082015260600190565b600082516109488184602087016108bc565b9190910192915050565b600181811c9082168061096657607f821691505b60208210810361098657634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561059e57806000526020600020601f840160051c810160208510156109b35750805b601f840160051c820191505b818110156109d357600081556001016109bf565b5050505050565b815167ffffffffffffffff8111156109f4576109f46106d9565b610a0881610a028454610952565b8461098c565b6020601f821160018114610a3c5760008315610a245750848201515b600019600385901b1c1916600184901b1784556109d3565b600084815260208120601f198516915b82811015610a6c5787850151825560209485019460019092019101610a4c565b5084821015610a8a5786840151600019600387901b60f8161c191681555b50505050600190811b0190555056fea26469706673582212204d57a77bddefd131f417a2ae9dbad35cbd8ebbd1d00c38b0b945c3b1a8c8205064736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "admin";
					readonly type: "address";
				}
			];
			readonly name: "ERC1967InvalidAdmin";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "implementation";
					readonly type: "address";
				}
			];
			readonly name: "ERC1967InvalidImplementation";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "ERC1967NonPayable";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "previousAdmin";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "newAdmin";
					readonly type: "address";
				}
			];
			readonly name: "AdminChanged";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "string";
					readonly name: "description";
					readonly type: "string";
				}
			];
			readonly name: "DescriptionChanged";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "implementation";
					readonly type: "address";
				}
			];
			readonly name: "Upgraded";
			readonly type: "event";
		},
		{
			readonly stateMutability: "payable";
			readonly type: "fallback";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newAdmin";
					readonly type: "address";
				}
			];
			readonly name: "changeProxyAdmin";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "_description";
					readonly type: "string";
				}
			];
			readonly name: "changeProxyDescription";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "implementation";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "_description";
					readonly type: "string";
				},
				{
					readonly internalType: "address";
					readonly name: "newAdmin";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "newImplementation";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes";
					readonly name: "data";
					readonly type: "bytes";
				}
			];
			readonly name: "initializeProxy";
			readonly outputs: readonly [
			];
			readonly stateMutability: "payable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "proxyAdmin";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "proxyDescription";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newImplementation";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes";
					readonly name: "data";
					readonly type: "bytes";
				}
			];
			readonly name: "upgradeToAndCall";
			readonly outputs: readonly [
			];
			readonly stateMutability: "payable";
			readonly type: "function";
		},
		{
			readonly stateMutability: "payable";
			readonly type: "receive";
		}
	];
	static createInterface(): InitializableProxyInterface;
	static connect(address: string, runner?: ContractRunner | null): InitializableProxy;
}
declare class ERC20Lockable__factory {
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "ECDSAInvalidSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "length";
					readonly type: "uint256";
				}
			];
			readonly name: "ECDSAInvalidSignatureLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "ECDSAInvalidSignatureS";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC20Locked";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC2612ExpiredSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "signer";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC2612InvalidSigner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "currentNonce";
					readonly type: "uint256";
				}
			];
			readonly name: "InvalidAccountNonce";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
			];
			readonly name: "EIP712DomainChanged";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "Lock";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "LockedBy";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "eip712Domain";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes1";
					readonly name: "fields";
					readonly type: "bytes1";
				},
				{
					readonly internalType: "string";
					readonly name: "name";
					readonly type: "string";
				},
				{
					readonly internalType: "string";
					readonly name: "version";
					readonly type: "string";
				},
				{
					readonly internalType: "uint256";
					readonly name: "chainId";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "verifyingContract";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "salt";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "uint256[]";
					readonly name: "extensions";
					readonly type: "uint256[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "isLocked";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "isLockedUntil";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "lock";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "bytes";
					readonly name: "signature";
					readonly type: "bytes";
				}
			];
			readonly name: "lockPermit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "lockedUntil";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes4";
					readonly name: "interfaceId";
					readonly type: "bytes4";
				}
			];
			readonly name: "supportsInterface";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): ERC20LockableInterface;
	static connect(address: string, runner?: ContractRunner | null): ERC20Lockable;
}
export type ERC20MockConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class ERC20Mock__factory extends ContractFactory {
	constructor(...args: ERC20MockConstructorParams);
	getDeployTransaction(name_: string, symbol_: string, decimals_: BigNumberish, supply_: BigNumberish, overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(name_: string, symbol_: string, decimals_: BigNumberish, supply_: BigNumberish, overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ERC20Mock & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): ERC20Mock__factory;
	static readonly bytecode = "0x61018060405234801561001157600080fd5b506040516118a63803806118a68339810160408190526100309161045f565b338480604051806040016040528060018152602001603160f81b8152508787816003908161005e9190610571565b50600461006b8282610571565b5061007b91508390506005610175565b6101205261008a816006610175565b61014052815160208084019190912060e052815190820120610100524660a05261011760e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506001600160a01b03811661015057604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b610159816101a8565b5060ff82166101605261016c33826101fa565b505050506106a7565b60006020835110156101915761018a83610234565b90506101a2565b8161019c8482610571565b5060ff90505b92915050565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166102245760405163ec442f0560e01b815260006004820152602401610147565b61023060008383610272565b5050565b600080829050601f8151111561025f578260405163305a27a960e01b8152600401610147919061062f565b805161026a82610662565b179392505050565b6001600160a01b03831661029d5780600260008282546102929190610686565b9091555061030f9050565b6001600160a01b038316600090815260208190526040902054818110156102f05760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610147565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661032b5760028054829003905561034a565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161038f91815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103cd5781810151838201526020016103b5565b50506000910152565b600082601f8301126103e757600080fd5b81516001600160401b038111156104005761040061039c565b604051601f8201601f19908116603f011681016001600160401b038111828210171561042e5761042e61039c565b60405281815283820160200185101561044657600080fd5b6104578260208301602087016103b2565b949350505050565b6000806000806080858703121561047557600080fd5b84516001600160401b0381111561048b57600080fd5b610497878288016103d6565b602087015190955090506001600160401b038111156104b557600080fd5b6104c1878288016103d6565b935050604085015160ff811681146104d857600080fd5b6060959095015193969295505050565b600181811c908216806104fc57607f821691505b60208210810361051c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561056c57806000526020600020601f840160051c810160208510156105495750805b601f840160051c820191505b818110156105695760008155600101610555565b50505b505050565b81516001600160401b0381111561058a5761058a61039c565b61059e8161059884546104e8565b84610522565b6020601f8211600181146105d257600083156105ba5750848201515b600019600385901b1c1916600184901b178455610569565b600084815260208120601f198516915b8281101561060257878501518255602094850194600190920191016105e2565b50848210156106205786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b602081526000825180602084015261064e8160408501602087016103b2565b601f01601f19169190910160400192915050565b8051602080830151919081101561051c5760001960209190910360031b1b16919050565b808201808211156101a257634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e0516101005161012051610140516101605161119a61070c600039600061019e015260006109840152600061095701526000610814015260006107ec01526000610747015260006107710152600061079b015261119a6000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806379cc6790116100ad578063a0712d6811610071578063a0712d681461028d578063a9059cbb146102a0578063d505accf146102b3578063dd62ed3e146102c6578063f2fde38b146102ff57600080fd5b806379cc6790146102295780637ecebe001461023c57806384b0196e1461024f5780638da5cb5b1461026a57806395d89b411461028557600080fd5b80633644e515116100f45780633644e515146101c857806340c10f19146101d057806342966c68146101e557806370a08231146101f8578063715018a61461022157600080fd5b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017257806323b872dd14610184578063313ce56714610197575b600080fd5b610139610312565b6040516101469190610ee4565b60405180910390f35b61016261015d366004610f1a565b6103a4565b6040519015158152602001610146565b6002545b604051908152602001610146565b610162610192366004610f44565b6103be565b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610146565b6101766103e2565b6101e36101de366004610f1a565b6103f1565b005b6101e36101f3366004610f81565b610407565b610176610206366004610f9a565b6001600160a01b031660009081526020819052604090205490565b6101e3610414565b6101e3610237366004610f1a565b610428565b61017661024a366004610f9a565b61043d565b61025761045b565b6040516101469796959493929190610fb5565b6008546040516001600160a01b039091168152602001610146565b6101396104a1565b6101e361029b366004610f81565b6104b0565b6101626102ae366004610f1a565b6104c2565b6101e36102c136600461104d565b6104d0565b6101766102d43660046110c0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101e361030d366004610f9a565b61060f565b606060038054610321906110f3565b80601f016020809104026020016040519081016040528092919081815260200182805461034d906110f3565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b5050505050905090565b6000336103b281858561064a565b60019150505b92915050565b6000336103cc85828561065c565b6103d78585856106db565b506001949350505050565b60006103ec61073a565b905090565b6103f9610865565b6104038282610892565b5050565b61041133826108c8565b50565b61041c610865565b61042660006108fe565b565b61043382338361065c565b61040382826108c8565b6001600160a01b0381166000908152600760205260408120546103b8565b60006060806000806000606061046f610950565b61047761097d565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b606060048054610321906110f3565b6104b8610865565b6104113382610892565b6000336103b28185856106db565b834211156104f95760405163313c898160e11b8152600481018590526024015b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886105468c6001600160a01b0316600090815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006105a1826109aa565b905060006105b1828787876109d7565b9050896001600160a01b0316816001600160a01b0316146105f8576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016104f0565b6106038a8a8a61064a565b50505050505050505050565b610617610865565b6001600160a01b03811661064157604051631e4fbdf760e01b8152600060048201526024016104f0565b610411816108fe565b6106578383836001610a05565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198110156106d557818110156106c657604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016104f0565b6106d584848484036000610a05565b50505050565b6001600160a01b03831661070557604051634b637e8f60e11b8152600060048201526024016104f0565b6001600160a01b03821661072f5760405163ec442f0560e01b8152600060048201526024016104f0565b610657838383610ada565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561079357507f000000000000000000000000000000000000000000000000000000000000000046145b156107bd57507f000000000000000000000000000000000000000000000000000000000000000090565b6103ec604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b6008546001600160a01b031633146104265760405163118cdaa760e01b81523360048201526024016104f0565b6001600160a01b0382166108bc5760405163ec442f0560e01b8152600060048201526024016104f0565b61040360008383610ada565b6001600160a01b0382166108f257604051634b637e8f60e11b8152600060048201526024016104f0565b61040382600083610ada565b600880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60606103ec7f00000000000000000000000000000000000000000000000000000000000000006005610c04565b60606103ec7f00000000000000000000000000000000000000000000000000000000000000006006610c04565b60006103b86109b761073a565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806000806109e988888888610caf565b9250925092506109f98282610d7e565b50909695505050505050565b6001600160a01b038416610a2f5760405163e602df0560e01b8152600060048201526024016104f0565b6001600160a01b038316610a5957604051634a1406b160e11b8152600060048201526024016104f0565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156106d557826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610acc91815260200190565b60405180910390a350505050565b6001600160a01b038316610b05578060026000828254610afa919061112d565b90915550610b779050565b6001600160a01b03831660009081526020819052604090205481811015610b585760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016104f0565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216610b9357600280548290039055610bb2565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610bf791815260200190565b60405180910390a3505050565b606060ff8314610c1e57610c1783610e37565b90506103b8565b818054610c2a906110f3565b80601f0160208091040260200160405190810160405280929190818152602001828054610c56906110f3565b8015610ca35780601f10610c7857610100808354040283529160200191610ca3565b820191906000526020600020905b815481529060010190602001808311610c8657829003601f168201915b505050505090506103b8565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610cea5750600091506003905082610d74565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610d3e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610d6a57506000925060019150829050610d74565b9250600091508190505b9450945094915050565b6000826003811115610d9257610d9261114e565b03610d9b575050565b6001826003811115610daf57610daf61114e565b03610dcd5760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610de157610de161114e565b03610e025760405163fce698f760e01b8152600481018290526024016104f0565b6003826003811115610e1657610e1661114e565b03610403576040516335e2f38360e21b8152600481018290526024016104f0565b60606000610e4483610e76565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f8111156103b857604051632cd44ac360e21b815260040160405180910390fd5b6000815180845260005b81811015610ec457602081850181015186830182015201610ea8565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610ef76020830184610e9e565b9392505050565b80356001600160a01b0381168114610f1557600080fd5b919050565b60008060408385031215610f2d57600080fd5b610f3683610efe565b946020939093013593505050565b600080600060608486031215610f5957600080fd5b610f6284610efe565b9250610f7060208501610efe565b929592945050506040919091013590565b600060208284031215610f9357600080fd5b5035919050565b600060208284031215610fac57600080fd5b610ef782610efe565b60ff60f81b8816815260e060208201526000610fd460e0830189610e9e565b8281036040840152610fe68189610e9e565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b8181101561103c57835183526020938401939092019160010161101e565b50909b9a5050505050505050505050565b600080600080600080600060e0888a03121561106857600080fd5b61107188610efe565b965061107f60208901610efe565b95506040880135945060608801359350608088013560ff811681146110a357600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156110d357600080fd5b6110dc83610efe565b91506110ea60208401610efe565b90509250929050565b600181811c9082168061110757607f821691505b60208210810361112757634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156103b857634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212206507e1fc5bdea4e01649335370151e1bc39e110e11e831b82b09339216d6bd2e64736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "name_";
					readonly type: "string";
				},
				{
					readonly internalType: "string";
					readonly name: "symbol_";
					readonly type: "string";
				},
				{
					readonly internalType: "uint8";
					readonly name: "decimals_";
					readonly type: "uint8";
				},
				{
					readonly internalType: "uint256";
					readonly name: "supply_";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "constructor";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "ECDSAInvalidSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "length";
					readonly type: "uint256";
				}
			];
			readonly name: "ECDSAInvalidSignatureLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "ECDSAInvalidSignatureS";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC2612ExpiredSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "signer";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC2612InvalidSigner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "currentNonce";
					readonly type: "uint256";
				}
			];
			readonly name: "InvalidAccountNonce";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidShortString";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "OwnableInvalidOwner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "OwnableUnauthorizedAccount";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "str";
					readonly type: "string";
				}
			];
			readonly name: "StringTooLong";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
			];
			readonly name: "EIP712DomainChanged";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "previousOwner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "OwnershipTransferred";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "burn";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "burnFrom";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "eip712Domain";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes1";
					readonly name: "fields";
					readonly type: "bytes1";
				},
				{
					readonly internalType: "string";
					readonly name: "name";
					readonly type: "string";
				},
				{
					readonly internalType: "string";
					readonly name: "version";
					readonly type: "string";
				},
				{
					readonly internalType: "uint256";
					readonly name: "chainId";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "verifyingContract";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "salt";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "uint256[]";
					readonly name: "extensions";
					readonly type: "uint256[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				}
			];
			readonly name: "mint";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				}
			];
			readonly name: "mint";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "owner";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "renounceOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "newOwner";
					readonly type: "address";
				}
			];
			readonly name: "transferOwnership";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): ERC20MockInterface;
	static connect(address: string, runner?: ContractRunner | null): ERC20Mock;
}
export type ERC4626PoolConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class ERC4626Pool__factory extends ContractFactory {
	constructor(...args: ERC4626PoolConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ERC4626Pool & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): ERC4626Pool__factory;
	static readonly bytecode = "0x6080604052348015600f57600080fd5b506126008061001f6000396000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c806384b0196e11610151578063c6e6f592116100c3578063dd62ed3e11610087578063dd62ed3e1461051a578063ef8b30f7146102d6578063f10684541461052d578063f5eb42dc14610555578063f7c618c114610568578063f97d3d071461057b57600080fd5b8063c6e6f592146102d6578063ce96cb77146104ce578063d505accf146104e1578063d905777e146104f4578063dd4670641461050757600080fd5b80639fc8ae6d116101155780639fc8ae6d14610482578063a9059cbb14610495578063b3d7f6b9146102d6578063b460af94146104a8578063ba087652146104bb578063c63d75b6146103b057600080fd5b806384b0196e146104195780638c7ab1d71461043457806394bf804d1461044757806395d89b411461045a5780639bc289f11461046257600080fd5b8063313ce567116101ea5780634a4fbeec116101ae5780634a4fbeec146103c55780634cdad506146102d65780636bcfdc34146103d85780636e553f65146103e057806370a08231146103f35780637ecebe001461040657600080fd5b8063313ce567146103495780633644e51514610363578063367f0b301461036b57806338d52e0f1461037e578063402d267d146103b057600080fd5b8063095ea7b311610231578063095ea7b3146102e95780630a28a477146102d657806318160ddd146102fc5780631b96b2f91461032357806323b872dd1461033657600080fd5b806301e1d1141461026e57806301ffc9a71461028957806302a19a9e146102ac57806306fdde03146102c157806307a2d13a146102d6575b600080fd5b6102766105a9565b6040519081526020015b60405180910390f35b61029c610297366004611e7d565b6105d8565b6040519015158152602001610280565b6102bf6102ba366004611f32565b61060f565b005b6102c9610778565b6040516102809190612037565b6102766102e436600461204a565b610821565b61029c6102f7366004612063565b610829565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254610276565b6102bf610331366004612063565b610841565b61029c61034436600461208d565b61089c565b6103516108c0565b60405160ff9091168152602001610280565b6102766108ca565b6102bf6103793660046120ca565b6108d4565b6000805160206125ab833981519152546001600160a01b03165b6040516001600160a01b039091168152602001610280565b6102766103be366004612127565b5060001990565b61029c6103d3366004612127565b610b3e565b61029c610b5f565b6102766103ee366004612142565b610b9c565b610276610401366004612127565b610bc2565b610276610414366004612127565b610c6c565b610421610c77565b604051610280979695949392919061216e565b600154610398906001600160a01b031681565b610276610455366004612142565b610d23565b6102c9610d41565b610276610470366004612127565b60006020819052908152604090205481565b6102bf610490366004612063565b610d80565b61029c6104a3366004612063565b610dd7565b6102766104b6366004612206565b610de5565b6102766104c9366004612206565b610e3d565b6102766104dc366004612127565b610e8c565b6102bf6104ef366004612242565b610e9d565b610276610502366004612127565b610fb9565b6102bf61051536600461204a565b610fc4565b6102766105283660046122b5565b610fd1565b60015461054290600160a01b900461ffff1681565b60405161ffff9091168152602001610280565b610276610563366004612127565b61101b565b600254610398906001600160a01b031681565b61029c610589366004612063565b6001600160a01b0391909116600090815260208190526040902054101590565b60006105d37f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace025490565b905090565b60006001600160e01b031982166307b8bf0760e51b148061060957506301ffc9a760e01b6001600160e01b03198316145b92915050565b814211156106385760405163313c898160e11b8152600481018390526024015b60405180910390fd5b60007f35eff6d814ac6266dcac97b73c7e53eaf4dabccaded194ea1b0d8c021e5060a18686866106678a611026565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810184905260e00160405160208183030381529060405280519060200120905060006106c282611068565b905060006106d08285611095565b9050876001600160a01b0316816001600160a01b031614610717576040516325c0072360e11b81526001600160a01b0380831660048301528916602482015260440161062f565b61072188876110bf565b866001600160a01b0316886001600160a01b03167fa2d3a0f9c14b593023a7113a6db3582e73f8990cedd0d8bb222ab65e20b1a1f68860405161076691815260200190565b60405180910390a35050505050505050565b6060600060008051602061256b8339815191525b905080600301805461079d906122df565b80601f01602080910402602001604051908101604052809291908181526020018280546107c9906122df565b80156108165780601f106107eb57610100808354040283529160200191610816565b820191906000526020600020905b8154815290600101906020018083116107f957829003601f168201915b505050505091505090565b600081610609565b600033610837818585611130565b5060019392505050565b6001546001600160a01b0316331461088e5760405162461bcd60e51b815260206004820152601060248201526f13d3931657d35054d5115497d413d3d360821b604482015260640161062f565b6108988282611142565b5050565b6000336108aa858285611178565b6108b58585856111cc565b506001949350505050565b60006105d361122b565b60006105d361125d565b60006108de611267565b805490915060ff600160401b820416159067ffffffffffffffff166000811580156109065750825b905060008267ffffffffffffffff1660011480156109235750303b155b905081158015610931575080155b1561094f5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561097957845460ff60401b1916600160401b1785555b600180546001600160a01b038b81166001600160b01b031990921691909117600160a01b61ffff8c160217909155600280546001600160a01b031916888316179055604080516395d89b4160e01b815290516000928a16916395d89b4191600480830192869291908290030181865afa1580156109fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a229190810190612319565b90506000610a4f60405180604001604052806007815260200166029ba30b5b2b2160cd1b81525083611290565b90506000610a77604051806040016040528060028152602001611cdd60f21b81525084611290565b9050610a8382826112bc565b610a8c826112ce565b610a958a6112f9565b604080516001600160a01b038e8116825261ffff8e1660208301528c8116828401528b16606082015290517f198ee228dde3a8038dd17502f21ee11bfa7273aea909a6ecaf1768195a6bea889181900360800190a15050508315610b3357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b6001600160a01b038116600090815260208190526040812054421115610609565b6002546000906001600160a01b0316610b8d6000805160206125ab833981519152546001600160a01b031690565b6001600160a01b031614905090565b60006000196000610bac85610821565b9050610bba3385878461130a565b949350505050565b600080610bce836113bf565b9050610bd8610b5f565b15610609576001546040516303a41f6360e61b8152600160a01b820461ffff1660048201526001600160a01b0385811660248301529091169063e907d8c090604401602060405180830381865afa158015610c37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b91906123a8565b610c6590826123d7565b9392505050565b6000610609826113f2565b6000606080828080838160008051602061258b8339815191528054909150158015610ca457506001810154155b610ce85760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b604482015260640161062f565b610cf061141b565b610cf861145a565b60408051600080825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b60006000196000610d3385610821565b9050610bba3385838861130a565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace04805460609160008051602061256b8339815191529161079d906122df565b6001546001600160a01b03163314610dcd5760405162461bcd60e51b815260206004820152601060248201526f13d3931657d35054d5115497d413d3d360821b604482015260640161062f565b6108988282611472565b6000336108378185856111cc565b600080610df183610e8c565b905080851115610e1a57828582604051633fa733bb60e21b815260040161062f93929190612387565b6000610e2586610821565b9050610e3433868689856114a8565b95945050505050565b600080610e4983610fb9565b905080851115610e7257828582604051632e52afbb60e21b815260040161062f93929190612387565b6000610e7d86610821565b9050610e34338686848a6114a8565b6000610609610e9a83610bc2565b90565b83421115610ec15760405163313c898160e11b81526004810185905260240161062f565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610ef08c611026565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090506000610f4b82611068565b90506000610f5b828787876115a7565b9050896001600160a01b0316816001600160a01b031614610fa2576040516325c0072360e11b81526001600160a01b0380831660048301528b16602482015260440161062f565b610fad8a8a8a611130565b50505050505050505050565b600061060982610bc2565b610fce33826110bf565b50565b6001600160a01b0391821660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b6000610609826113bf565b6001600160a01b031660009081527f5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb006020526040902080546001810190915590565b600061060961107561125d565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806000806110a586866115d5565b9250925092506110b58282611622565b5090949350505050565b6001600160a01b038216600090815260208190526040902054811115610898576001600160a01b0382166000818152602081815260409182902084905590518381527f625fed9875dada8643f2418b838ae0bc78d9a148a18eee4ee1979ff0f3f5d427910160405180910390a25050565b61113d83838360016116db565b505050565b6001600160a01b03821661116c5760405163ec442f0560e01b81526000600482015260240161062f565b610898600083836117c3565b60006111848484610fd1565b90506000198110156111c657818110156111b757828183604051637dc7a0d960e11b815260040161062f93929190612387565b6111c6848484840360006116db565b50505050565b6001600160a01b0383166111f657604051634b637e8f60e11b81526000600482015260240161062f565b6001600160a01b0382166112205760405163ec442f0560e01b81526000600482015260240161062f565b61113d8383836117c3565b6000806000805160206125ab8339815191529050600081546112579190600160a01b900460ff166123ea565b91505090565b60006105d36118f2565b6000807ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610609565b606082826040516020016112a5929190612403565b604051602081830303815290604052905092915050565b6112c4611966565b610898828261198d565b6112d6611966565b610fce81604051806040016040528060018152602001603160f81b8152506119de565b611301611966565b610fce81611a3f565b60015460405163077ba79560e41b81526001600160a01b03858116600483015260248201859052909116906377ba795090604401600060405180830381600087803b15801561135857600080fd5b505af115801561136c573d6000803e3d6000fd5b505060408051858152602081018590526001600160a01b038088169450881692507fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791015b60405180910390a350505050565b60008060008051602061256b8339815191525b6001600160a01b0390931660009081526020939093525050604090205490565b6000807f5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb006113d2565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d102805460609160008051602061258b8339815191529161079d906122df565b6060600060008051602061258b83398151915261078c565b6001600160a01b03821661149c57604051634b637e8f60e11b81526000600482015260240161062f565b610898826000836117c3565b60006114b38461101b565b905060006114bf610b5f565b80156114ca57508183115b6114d457826114d6565b815b60015460405163db2aa12760e01b81526001600160a01b0388811660048301526024820184905292935091169063db2aa12790604401600060405180830381600087803b15801561152657600080fd5b505af115801561153a573d6000803e3d6000fd5b50505050846001600160a01b0316866001600160a01b0316886001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8787604051611596929190918252602082015260400190565b60405180910390a450505050505050565b6000806000806115b988888888611ab1565b9250925092506115c98282611622565b50909695505050505050565b6000806000835160410361160f5760208401516040850151606086015160001a61160188828585611ab1565b95509550955050505061161b565b50508151600091506002905b9250925092565b600082600381111561163657611636612432565b0361163f575050565b600182600381111561165357611653612432565b036116715760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561168557611685612432565b036116a65760405163fce698f760e01b81526004810182905260240161062f565b60038260038111156116ba576116ba612432565b03610898576040516335e2f38360e21b81526004810182905260240161062f565b60008051602061256b8339815191526001600160a01b0385166117145760405163e602df0560e01b81526000600482015260240161062f565b6001600160a01b03841661173e57604051634a1406b160e11b81526000600482015260240161062f565b6001600160a01b038086166000908152600183016020908152604080832093881683529290522083905581156117bc57836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925856040516117b391815260200190565b60405180910390a35b5050505050565b6117cb610b5f565b80156117df57506001600160a01b03831615155b156118445760015460405163cd09525d60e01b81526001600160a01b0385811660048301529091169063cd09525d90602401600060405180830381600087803b15801561182b57600080fd5b505af115801561183f573d6000803e3d6000fd5b505050505b61184f838383611b80565b6001600160a01b0383161580159061186f57506001600160a01b03821615155b801561187a57508015155b1561113d57600154604051630325c61f60e31b81526001600160a01b0385811660048301528481166024830152604482018490529091169063192e30f890606401600060405180830381600087803b1580156118d557600080fd5b505af11580156118e9573d6000803e3d6000fd5b50505050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61191d611bbc565b611925611c26565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b61196e611c6a565b61198b57604051631afcd79f60e31b815260040160405180910390fd5b565b611995611966565b60008051602061256b8339815191527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace036119cf848261248f565b50600481016111c6838261248f565b6119e6611966565b60008051602061258b8339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d102611a20848261248f565b5060038101611a2f838261248f565b5060008082556001909101555050565b611a47611966565b6000805160206125ab833981519152600080611a6284611c84565b9150915081611a72576012611a74565b805b83546001600160a81b031916600160a01b60ff92909216919091026001600160a01b031916176001600160a01b0394909416939093179091555050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611aec5750600091506003905082611b76565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611b40573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611b6c57506000925060019150829050611b76565b9250600091508190505b9450945094915050565b611b8983610b3e565b15611bb1576040516233044d60e31b81526001600160a01b038416600482015260240161062f565b61113d838383611d60565b600060008051602061258b83398151915281611bd661141b565b805190915015611bee57805160209091012092915050565b81548015611bfd579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b600060008051602061258b83398151915281611c4061145a565b805190915015611c5857805160209091012092915050565b60018201548015611bfd579392505050565b6000611c74611267565b54600160401b900460ff16919050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000918291829182916001600160a01b03871691611ccb9161254e565b600060405180830381855afa9150503d8060008114611d06576040519150601f19603f3d011682016040523d82523d6000602084013e611d0b565b606091505b5091509150818015611d1f57506020815110155b15611d5357600081806020019051810190611d3a91906123a8565b905060ff8111611d51576001969095509350505050565b505b5060009485945092505050565b60008051602061256b8339815191526001600160a01b038416611d9c5781816002016000828254611d9191906123d7565b90915550611dfb9050565b6001600160a01b03841660009081526020829052604090205482811015611ddc5784818460405163391434e360e21b815260040161062f93929190612387565b6001600160a01b03851660009081526020839052604090209083900390555b6001600160a01b038316611e19576002810180548390039055611e38565b6001600160a01b03831660009081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113b191815260200190565b600060208284031215611e8f57600080fd5b81356001600160e01b031981168114610c6557600080fd5b80356001600160a01b0381168114611ebe57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611f0257611f02611ec3565b604052919050565b600067ffffffffffffffff821115611f2457611f24611ec3565b50601f01601f191660200190565b600080600080600060a08688031215611f4a57600080fd5b611f5386611ea7565b9450611f6160208701611ea7565b93506040860135925060608601359150608086013567ffffffffffffffff811115611f8b57600080fd5b8601601f81018813611f9c57600080fd5b8035611faf611faa82611f0a565b611ed9565b818152896020838501011115611fc457600080fd5b816020840160208301376000602083830101528093505050509295509295909350565b60005b83811015612002578181015183820152602001611fea565b50506000910152565b60008151808452612023816020860160208601611fe7565b601f01601f19169290920160200192915050565b602081526000610c65602083018461200b565b60006020828403121561205c57600080fd5b5035919050565b6000806040838503121561207657600080fd5b61207f83611ea7565b946020939093013593505050565b6000806000606084860312156120a257600080fd5b6120ab84611ea7565b92506120b960208501611ea7565b929592945050506040919091013590565b600080600080608085870312156120e057600080fd5b6120e985611ea7565b9350602085013561ffff8116811461210057600080fd5b925061210e60408601611ea7565b915061211c60608601611ea7565b905092959194509250565b60006020828403121561213957600080fd5b610c6582611ea7565b6000806040838503121561215557600080fd5b8235915061216560208401611ea7565b90509250929050565b60ff60f81b8816815260e06020820152600061218d60e083018961200b565b828103604084015261219f818961200b565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b818110156121f55783518352602093840193909201916001016121d7565b50909b9a5050505050505050505050565b60008060006060848603121561221b57600080fd5b8335925061222b60208501611ea7565b915061223960408501611ea7565b90509250925092565b600080600080600080600060e0888a03121561225d57600080fd5b61226688611ea7565b965061227460208901611ea7565b95506040880135945060608801359350608088013560ff8116811461229857600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156122c857600080fd5b6122d183611ea7565b915061216560208401611ea7565b600181811c908216806122f357607f821691505b60208210810361231357634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561232b57600080fd5b815167ffffffffffffffff81111561234257600080fd5b8201601f8101841361235357600080fd5b8051612361611faa82611f0a565b81815285602083850101111561237657600080fd5b610e34826020830160208601611fe7565b6001600160a01b039390931683526020830191909152604082015260600190565b6000602082840312156123ba57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610609576106096123c1565b60ff8181168382160190811115610609576106096123c1565b60008351612415818460208801611fe7565b835190830190612429818360208801611fe7565b01949350505050565b634e487b7160e01b600052602160045260246000fd5b601f82111561113d57806000526020600020601f840160051c8101602085101561246f5750805b601f840160051c820191505b818110156117bc576000815560010161247b565b815167ffffffffffffffff8111156124a9576124a9611ec3565b6124bd816124b784546122df565b84612448565b6020601f8211600181146124f157600083156124d95750848201515b600019600385901b1c1916600184901b1784556117bc565b600084815260208120601f198516915b828110156125215787850151825560209485019460019092019101612501565b508482101561253f5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60008251612560818460208701611fe7565b919091019291505056fe52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1000773e532dfede91f04b12a73d3d2acd361424f41f76b4fb79f090161e36b4e00a264697066735822122009aa976afd22f7c6fac1cd1ea004a48703a333b832567212089a826aa3e6d6d664736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "ECDSAInvalidSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "length";
					readonly type: "uint256";
				}
			];
			readonly name: "ECDSAInvalidSignatureLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "ECDSAInvalidSignatureS";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC20Locked";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC2612ExpiredSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "signer";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC2612InvalidSigner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "max";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC4626ExceededMaxDeposit";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "max";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC4626ExceededMaxMint";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "max";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC4626ExceededMaxRedeem";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "max";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC4626ExceededMaxWithdraw";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "currentNonce";
					readonly type: "uint256";
				}
			];
			readonly name: "InvalidAccountNonce";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidInitialization";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "NotInitializing";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "Deposit";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
			];
			readonly name: "EIP712DomainChanged";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "uint64";
					readonly name: "version";
					readonly type: "uint64";
				}
			];
			readonly name: "Initialized";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "masterPool";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint16";
					readonly name: "pid";
					readonly type: "uint16";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "asset";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "address";
					readonly name: "rewardToken";
					readonly type: "address";
				}
			];
			readonly name: "InitializedPool";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "Lock";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "LockedBy";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "Withdraw";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "asset";
			readonly outputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "convertToAssets";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "convertToShares";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "deposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "eip712Domain";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes1";
					readonly name: "fields";
					readonly type: "bytes1";
				},
				{
					readonly internalType: "string";
					readonly name: "name";
					readonly type: "string";
				},
				{
					readonly internalType: "string";
					readonly name: "version";
					readonly type: "string";
				},
				{
					readonly internalType: "uint256";
					readonly name: "chainId";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "verifyingContract";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "salt";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "uint256[]";
					readonly name: "extensions";
					readonly type: "uint256[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_masterPool";
					readonly type: "address";
				},
				{
					readonly internalType: "uint16";
					readonly name: "_pid";
					readonly type: "uint16";
				},
				{
					readonly internalType: "address";
					readonly name: "_asset";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "_rewardToken";
					readonly type: "address";
				}
			];
			readonly name: "initializeToken";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "isLocked";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "isLockedUntil";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "isRewardNative";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				}
			];
			readonly name: "lock";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "until";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "bytes";
					readonly name: "signature";
					readonly type: "bytes";
				}
			];
			readonly name: "lockPermit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "lockedUntil";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_user";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "masterBurn";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "_user";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "_amount";
					readonly type: "uint256";
				}
			];
			readonly name: "masterMint";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "masterPool";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IMasterPool";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "maxDeposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly name: "maxMint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxRedeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "maxWithdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "mint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "pid";
			readonly outputs: readonly [
				{
					readonly internalType: "uint16";
					readonly name: "";
					readonly type: "uint16";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "previewDeposit";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "previewMint";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				}
			];
			readonly name: "previewRedeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				}
			];
			readonly name: "previewWithdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "shares";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "redeem";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "rewardToken";
			readonly outputs: readonly [
				{
					readonly internalType: "contract IERC20";
					readonly name: "";
					readonly type: "address";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "sharesOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes4";
					readonly name: "interfaceId";
					readonly type: "bytes4";
				}
			];
			readonly name: "supportsInterface";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalAssets";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "assets";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		}
	];
	static createInterface(): ERC4626PoolInterface;
	static connect(address: string, runner?: ContractRunner | null): ERC4626Pool;
}
export type WETHConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class WETH__factory extends ContractFactory {
	constructor(...args: WETHConstructorParams);
	getDeployTransaction(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<WETH & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): WETH__factory;
	static readonly bytecode = "0x61016060405234801561001157600080fd5b506040518060400160405280600d81526020016c2bb930b83832b21022ba3432b960991b81525080604051806040016040528060018152602001603160f81b8152506040518060400160405280600d81526020016c2bb930b83832b21022ba3432b960991b815250604051806040016040528060048152602001630ae8aa8960e31b81525081600390816100a59190610286565b5060046100b28282610286565b506100c29150839050600561016d565b610120526100d181600661016d565b61014052815160208084019190912060e052815190820120610100524660a05261015e60e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506103b6565b600060208351101561018957610182836101a0565b905061019a565b816101948482610286565b5060ff90505b92915050565b600080829050601f815111156101d4578260405163305a27a960e01b81526004016101cb9190610344565b60405180910390fd5b80516101df82610392565b179392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061021157607f821691505b60208210810361023157634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561028157806000526020600020601f840160051c8101602085101561025e5750805b601f840160051c820191505b8181101561027e576000815560010161026a565b50505b505050565b81516001600160401b0381111561029f5761029f6101e7565b6102b3816102ad84546101fd565b84610237565b6020601f8211600181146102e757600083156102cf5750848201515b600019600385901b1c1916600184901b17845561027e565b600084815260208120601f198516915b8281101561031757878501518255602094850194600190920191016102f7565b50848210156103355786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b602081526000825180602084015260005b818110156103725760208186018101516040868401015201610355565b506000604082850101526040601f19601f83011684010191505092915050565b805160208083015191908110156102315760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051611131610410600039600061091b015260006108ee015260006108960152600061086e015260006107c9015260006107f30152600061081d01526111316000f3fe6080604052600436106100ec5760003560e01c806370a082311161008a578063a9059cbb11610059578063a9059cbb1461027e578063d0e30db01461029e578063d505accf146102a6578063dd62ed3e146102c657600080fd5b806370a08231146101eb5780637ecebe001461022157806384b0196e1461024157806395d89b411461026957600080fd5b806323b872dd116100c657806323b872dd1461017a5780632e1a7d4d1461019a578063313ce567146101ba5780633644e515146101d657600080fd5b806306fdde0314610100578063095ea7b31461012b57806318160ddd1461015b57600080fd5b366100fb576100f961030c565b005b600080fd5b34801561010c57600080fd5b5061011561034d565b6040516101229190610e7b565b60405180910390f35b34801561013757600080fd5b5061014b610146366004610eb1565b6103df565b6040519015158152602001610122565b34801561016757600080fd5b506002545b604051908152602001610122565b34801561018657600080fd5b5061014b610195366004610edb565b6103f9565b3480156101a657600080fd5b506100f96101b5366004610f18565b61041d565b3480156101c657600080fd5b5060405160128152602001610122565b3480156101e257600080fd5b5061016c61048d565b3480156101f757600080fd5b5061016c610206366004610f31565b6001600160a01b031660009081526020819052604090205490565b34801561022d57600080fd5b5061016c61023c366004610f31565b61049c565b34801561024d57600080fd5b506102566104ba565b6040516101229796959493929190610f4c565b34801561027557600080fd5b50610115610500565b34801561028a57600080fd5b5061014b610299366004610eb1565b61050f565b6100f961030c565b3480156102b257600080fd5b506100f96102c1366004610fe4565b61051d565b3480156102d257600080fd5b5061016c6102e1366004611057565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610316333461065c565b60405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2565b60606003805461035c9061108a565b80601f01602080910402602001604051908101604052809291908181526020018280546103889061108a565b80156103d55780601f106103aa576101008083540402835291602001916103d5565b820191906000526020600020905b8154815290600101906020018083116103b857829003601f168201915b5050505050905090565b6000336103ed818585610696565b60019150505b92915050565b6000336104078582856106a8565b610412858585610727565b506001949350505050565b6104273382610786565b604051339082156108fc029083906000818181858888f19350505050158015610454573d6000803e3d6000fd5b5060405181815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659060200160405180910390a250565b60006104976107bc565b905090565b6001600160a01b0381166000908152600760205260408120546103f3565b6000606080600080600060606104ce6108e7565b6104d6610914565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461035c9061108a565b6000336103ed818585610727565b834211156105465760405163313c898160e11b8152600481018590526024015b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886105938c6001600160a01b0316600090815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006105ee82610941565b905060006105fe8287878761096e565b9050896001600160a01b0316816001600160a01b031614610645576040516325c0072360e11b81526001600160a01b0380831660048301528b16602482015260440161053d565b6106508a8a8a610696565b50505050505050505050565b6001600160a01b0382166106865760405163ec442f0560e01b81526000600482015260240161053d565b6106926000838361099c565b5050565b6106a38383836001610ac6565b505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811015610721578181101561071257604051637dc7a0d960e11b81526001600160a01b0384166004820152602481018290526044810183905260640161053d565b61072184848484036000610ac6565b50505050565b6001600160a01b03831661075157604051634b637e8f60e11b81526000600482015260240161053d565b6001600160a01b03821661077b5760405163ec442f0560e01b81526000600482015260240161053d565b6106a383838361099c565b6001600160a01b0382166107b057604051634b637e8f60e11b81526000600482015260240161053d565b6106928260008361099c565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561081557507f000000000000000000000000000000000000000000000000000000000000000046145b1561083f57507f000000000000000000000000000000000000000000000000000000000000000090565b610497604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60606104977f00000000000000000000000000000000000000000000000000000000000000006005610b9b565b60606104977f00000000000000000000000000000000000000000000000000000000000000006006610b9b565b60006103f361094e6107bc565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060008061098088888888610c46565b9250925092506109908282610d15565b50909695505050505050565b6001600160a01b0383166109c75780600260008282546109bc91906110c4565b90915550610a399050565b6001600160a01b03831660009081526020819052604090205481811015610a1a5760405163391434e360e21b81526001600160a01b0385166004820152602481018290526044810183905260640161053d565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b038216610a5557600280548290039055610a74565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610ab991815260200190565b60405180910390a3505050565b6001600160a01b038416610af05760405163e602df0560e01b81526000600482015260240161053d565b6001600160a01b038316610b1a57604051634a1406b160e11b81526000600482015260240161053d565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561072157826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610b8d91815260200190565b60405180910390a350505050565b606060ff8314610bb557610bae83610dce565b90506103f3565b818054610bc19061108a565b80601f0160208091040260200160405190810160405280929190818152602001828054610bed9061108a565b8015610c3a5780601f10610c0f57610100808354040283529160200191610c3a565b820191906000526020600020905b815481529060010190602001808311610c1d57829003601f168201915b505050505090506103f3565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610c815750600091506003905082610d0b565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610cd5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610d0157506000925060019150829050610d0b565b9250600091508190505b9450945094915050565b6000826003811115610d2957610d296110e5565b03610d32575050565b6001826003811115610d4657610d466110e5565b03610d645760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610d7857610d786110e5565b03610d995760405163fce698f760e01b81526004810182905260240161053d565b6003826003811115610dad57610dad6110e5565b03610692576040516335e2f38360e21b81526004810182905260240161053d565b60606000610ddb83610e0d565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f8111156103f357604051632cd44ac360e21b815260040160405180910390fd5b6000815180845260005b81811015610e5b57602081850181015186830182015201610e3f565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610e8e6020830184610e35565b9392505050565b80356001600160a01b0381168114610eac57600080fd5b919050565b60008060408385031215610ec457600080fd5b610ecd83610e95565b946020939093013593505050565b600080600060608486031215610ef057600080fd5b610ef984610e95565b9250610f0760208501610e95565b929592945050506040919091013590565b600060208284031215610f2a57600080fd5b5035919050565b600060208284031215610f4357600080fd5b610e8e82610e95565b60ff60f81b8816815260e060208201526000610f6b60e0830189610e35565b8281036040840152610f7d8189610e35565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015610fd3578351835260209384019390920191600101610fb5565b50909b9a5050505050505050505050565b600080600080600080600060e0888a031215610fff57600080fd5b61100888610e95565b965061101660208901610e95565b95506040880135945060608801359350608088013560ff8116811461103a57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561106a57600080fd5b61107383610e95565b915061108160208401610e95565b90509250929050565b600181811c9082168061109e57607f821691505b6020821081036110be57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156103f357634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212202fa6487606e7d71601b924821884662dad63252677deeea1cbee1842cb12bfe564736f6c634300081e0033";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
			];
			readonly name: "ECDSAInvalidSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "length";
					readonly type: "uint256";
				}
			];
			readonly name: "ECDSAInvalidSignatureLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "ECDSAInvalidSignatureS";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC2612ExpiredSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "signer";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC2612InvalidSigner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "currentNonce";
					readonly type: "uint256";
				}
			];
			readonly name: "InvalidAccountNonce";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidShortString";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "str";
					readonly type: "string";
				}
			];
			readonly name: "StringTooLong";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "dst";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "wad";
					readonly type: "uint256";
				}
			];
			readonly name: "Deposit";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
			];
			readonly name: "EIP712DomainChanged";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "src";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "wad";
					readonly type: "uint256";
				}
			];
			readonly name: "Withdrawal";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "deposit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "payable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "eip712Domain";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes1";
					readonly name: "fields";
					readonly type: "bytes1";
				},
				{
					readonly internalType: "string";
					readonly name: "name";
					readonly type: "string";
				},
				{
					readonly internalType: "string";
					readonly name: "version";
					readonly type: "string";
				},
				{
					readonly internalType: "uint256";
					readonly name: "chainId";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "verifyingContract";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "salt";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "uint256[]";
					readonly name: "extensions";
					readonly type: "uint256[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly stateMutability: "payable";
			readonly type: "receive";
		}
	];
	static createInterface(): WETHInterface;
	static connect(address: string, runner?: ContractRunner | null): WETH;
}
export type WETHMockConstructorParams = [
	signer?: Signer
] | ConstructorParameters<typeof ContractFactory>;
declare class WETHMock__factory extends ContractFactory {
	constructor(...args: WETHMockConstructorParams);
	getDeployTransaction(supply_: BigNumberish, overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<ContractDeployTransaction>;
	deploy(supply_: BigNumberish, overrides?: NonPayableOverrides & {
		from?: string;
	}): Promise<WETHMock & {
		deploymentTransaction(): ContractTransactionResponse;
	}>;
	connect(runner: ContractRunner | null): WETHMock__factory;
	static readonly bytecode = "";
	static readonly abi: readonly [
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "supply_";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "constructor";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "ECDSAInvalidSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "length";
					readonly type: "uint256";
				}
			];
			readonly name: "ECDSAInvalidSignatureLength";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "ECDSAInvalidSignatureS";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "allowance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientAllowance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "balance";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "needed";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC20InsufficientBalance";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "approver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidApprover";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "receiver";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidReceiver";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "sender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "ERC20InvalidSpender";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				}
			];
			readonly name: "ERC2612ExpiredSignature";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "signer";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "ERC2612InvalidSigner";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "currentNonce";
					readonly type: "uint256";
				}
			];
			readonly name: "InvalidAccountNonce";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "InvalidShortString";
			readonly type: "error";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "str";
					readonly type: "string";
				}
			];
			readonly name: "StringTooLong";
			readonly type: "error";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Approval";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "dst";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "wad";
					readonly type: "uint256";
				}
			];
			readonly name: "Deposit";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
			];
			readonly name: "EIP712DomainChanged";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "Transfer";
			readonly type: "event";
		},
		{
			readonly anonymous: false;
			readonly inputs: readonly [
				{
					readonly indexed: true;
					readonly internalType: "address";
					readonly name: "src";
					readonly type: "address";
				},
				{
					readonly indexed: false;
					readonly internalType: "uint256";
					readonly name: "wad";
					readonly type: "uint256";
				}
			];
			readonly name: "Withdrawal";
			readonly type: "event";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "DOMAIN_SEPARATOR";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes32";
					readonly name: "";
					readonly type: "bytes32";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				}
			];
			readonly name: "allowance";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "approve";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "account";
					readonly type: "address";
				}
			];
			readonly name: "balanceOf";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "decimals";
			readonly outputs: readonly [
				{
					readonly internalType: "uint8";
					readonly name: "";
					readonly type: "uint8";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "deposit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "payable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "eip712Domain";
			readonly outputs: readonly [
				{
					readonly internalType: "bytes1";
					readonly name: "fields";
					readonly type: "bytes1";
				},
				{
					readonly internalType: "string";
					readonly name: "name";
					readonly type: "string";
				},
				{
					readonly internalType: "string";
					readonly name: "version";
					readonly type: "string";
				},
				{
					readonly internalType: "uint256";
					readonly name: "chainId";
					readonly type: "uint256";
				},
				{
					readonly internalType: "address";
					readonly name: "verifyingContract";
					readonly type: "address";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "salt";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "uint256[]";
					readonly name: "extensions";
					readonly type: "uint256[]";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "name";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				}
			];
			readonly name: "nonces";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "owner";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "spender";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint256";
					readonly name: "deadline";
					readonly type: "uint256";
				},
				{
					readonly internalType: "uint8";
					readonly name: "v";
					readonly type: "uint8";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "r";
					readonly type: "bytes32";
				},
				{
					readonly internalType: "bytes32";
					readonly name: "s";
					readonly type: "bytes32";
				}
			];
			readonly name: "permit";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "symbol";
			readonly outputs: readonly [
				{
					readonly internalType: "string";
					readonly name: "";
					readonly type: "string";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
			];
			readonly name: "totalSupply";
			readonly outputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "";
					readonly type: "uint256";
				}
			];
			readonly stateMutability: "view";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transfer";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "address";
					readonly name: "from";
					readonly type: "address";
				},
				{
					readonly internalType: "address";
					readonly name: "to";
					readonly type: "address";
				},
				{
					readonly internalType: "uint256";
					readonly name: "value";
					readonly type: "uint256";
				}
			];
			readonly name: "transferFrom";
			readonly outputs: readonly [
				{
					readonly internalType: "bool";
					readonly name: "";
					readonly type: "bool";
				}
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly inputs: readonly [
				{
					readonly internalType: "uint256";
					readonly name: "amount";
					readonly type: "uint256";
				}
			];
			readonly name: "withdraw";
			readonly outputs: readonly [
			];
			readonly stateMutability: "nonpayable";
			readonly type: "function";
		},
		{
			readonly stateMutability: "payable";
			readonly type: "receive";
		}
	];
	static createInterface(): WETHMockInterface;
	static connect(address: string, runner?: ContractRunner | null): WETHMock;
}
export interface BaseToken {
	pid?: number;
	address?: string;
	name?: string;
	symbol?: string;
	decimals?: number;
	totalSupply?: number;
	oracle?: string;
	lpTokens?: string[];
	mockUsdPrice?: number;
	allocPoint?: number;
	rewardFromTimestamp?: number;
	rewardToTimestamp?: number;
	deposit?: number;
	withdraw?: number;
}
export interface BaseConfig {
	chainId?: number;
	initRewardsPerSec?: number;
	rewardFromTimestamp?: number;
	rewardToTimestamp?: number;
	halvingRate?: number;
	halvingInterval?: number;
	masterChef?: string;
	rewardVault?: string;
	rewardToken?: BaseToken;
	WETH?: BaseToken;
	pools?: BaseToken[];
}
export interface AddToken extends BaseToken {
}
export interface AddConfig extends Omit<BaseConfig, "initRewardsPerSec" | "rewardFromTimestamp" | "rewardToTimestamp"> {
	initRewardsPerSec: number;
	rewardFromTimestamp: number;
	rewardToTimestamp: number;
}
export interface FrontToken extends Omit<BaseToken, "pid" | "address"> {
	pid: number;
	address: string;
	oracle: string;
}
export interface FrontConfig extends Omit<BaseConfig, "masterChef" | "rewardToken" | "WETH" | "pools"> {
	masterChef: string;
	rewardToken: FrontToken & {
		pid?: number;
	};
	WETH: FrontToken & {
		pid?: number;
	};
	pools: FrontToken[];
}
export interface ContractToken extends Omit<FrontToken, "address" | "oracle"> {
	address?: string;
	token: ERC20Mock;
	oracle: IDataFeed;
}
export interface ContractConfig extends Omit<FrontConfig, "masterChef" | "rewardToken" | "WETH" | "pools"> {
	masterChef: MasterChef | MasterPool;
	rewardToken: ContractToken & {
		pid?: number;
	};
	WETH: ContractToken & {
		pid?: number;
	};
	pools: ContractToken[];
}
export declare const SECOND_PER_YEAR = 31622400;
/**
 * Get farm APR value in %
 * @param rewardsPerSec rewards given per second for pool in decimals ( not 1 wei )
 * @param rewardTokenUSD USD value per 1 TOKEN ( not 1 wei )
 * @param stakingTokenUSD USD value per 1 Staking TOKEN ( not 1 wei )
 * @param totalStakedBalance TOKEN balance staked on pool
 */
export declare function getFarmApr(rewardsPerSec: number, rewardTokenUSD: number, stakingTokenUSD: number, totalStakedBalance: number): number;
export declare enum Networks {
	MAINNET = 1,
	ARBITRUM_SEPOLIA = 421614
}
export type Runner = SignerWithAddress | Provider;
export declare function findFarmByToken(config: FrontConfig, tokenAddress: string): FrontToken | undefined;
export declare function getContractConfig(config: FrontConfig, runner?: Runner): ContractConfig;
export declare function getTotalRewards(config: BaseConfig, timestamp?: number): {
	initRewardsPerSec: number;
	rewardFromTimestamp: number;
	rewardToTimestamp: number;
	halvingRate: number;
	halvingInterval: number;
	totalRewards: number;
};
export declare function getFarmStats(config: ContractConfig): Promise<{
	rewardTokenDecimals: number;
	rewardTokenUsd: number;
}>;
export declare function getFarms(config: ContractConfig, user?: SignerWithAddress | string): Promise<{
	rewardsPerSec: number;
	apr: number;
	allocPoint: number;
	stakingTokenUsd: number;
	totalStakedBalance: number;
	totalStakedUSD: number;
	userTokenBalance: number;
	userTokenUSD: number;
	userStakedBalance: number;
	userStakedUSD: number;
	rewardsPerSecBN: bigint | undefined;
	address?: string;
	token: ERC20Mock;
	oracle: IDataFeed;
	symbol?: string | undefined;
	name?: string | undefined;
	totalSupply?: number | undefined;
	decimals?: number | undefined;
	deposit?: number | undefined;
	withdraw?: number | undefined;
	pid: number;
	rewardFromTimestamp?: number | undefined;
	rewardToTimestamp?: number | undefined;
	lpTokens?: string[] | undefined;
	mockUsdPrice?: number | undefined;
}[]>;

declare namespace ownableSol {
	export { Ownable };
}
declare namespace utils {
	export { addressSol, create2Sol, cryptography, errorsSol, introspection, math, noncesSol, shortStringsSol, stringsSol };
}
declare namespace draftIerc6093Sol {
	export { IERC1155Errors, IERC20Errors, IERC721Errors };
}
declare namespace ierc1363Sol {
	export { IERC1363 };
}
declare namespace ierc1967Sol {
	export { IERC1967 };
}
declare namespace ierc4626Sol {
	export { IERC4626 };
}
declare namespace ierc5267Sol {
	export { IERC5267 };
}
declare namespace erc1967UtilsSol {
	export { ERC1967Utils };
}
declare namespace beacon {
	export { iBeaconSol };
}
declare namespace iBeaconSol {
	export { IBeacon };
}
declare namespace clonesSol {
	export { Clones };
}
declare namespace erc1967 {
	export { erc1967UtilsSol };
}
declare namespace proxySol {
	export { Proxy$1 as Proxy };
}
declare namespace ierc20PermitSol {
	export { IERC20Permit };
}
declare namespace erc20BurnableSol {
	export { ERC20Burnable };
}
declare namespace erc20PermitSol {
	export { ERC20Permit };
}
declare namespace ierc20MetadataSol {
	export { IERC20Metadata };
}
declare namespace utils$1 {
	export { safeErc20Sol };
}
declare namespace safeErc20Sol {
	export { SafeERC20 };
}
declare namespace erc20Sol {
	export { ERC20 };
}
declare namespace ierc20Sol {
	export { IERC20 };
}
declare namespace extensions {
	export { erc20BurnableSol, erc20PermitSol, ierc20MetadataSol, ierc20PermitSol };
}
declare namespace erc20 {
	export { erc20Sol, extensions, ierc20Sol, utils$1 as utils };
}
declare namespace eip712Sol {
	export { EIP712 };
}
declare namespace ecdsaSol {
	export { ECDSA };
}
declare namespace math {
	export { safeCastSol };
}
declare namespace ierc165Sol {
	export { IERC165 };
}
declare namespace erc165Sol {
	export { ERC165 };
}
declare namespace safeCastSol {
	export { SafeCast };
}
declare namespace addressSol {
	export { Address };
}
declare namespace create2Sol {
	export { Create2 };
}
declare namespace errorsSol {
	export { Errors };
}
declare namespace noncesSol {
	export { Nonces };
}
declare namespace shortStringsSol {
	export { ShortStrings };
}
declare namespace stringsSol {
	export { Strings };
}
declare namespace cryptography {
	export { ecdsaSol, eip712Sol };
}
declare namespace introspection {
	export { erc165Sol, ierc165Sol };
}
declare namespace access {
	export { ownableSol };
}
declare namespace interfaces {
	export { draftIerc6093Sol, ierc1363Sol, ierc1967Sol, ierc4626Sol, ierc5267Sol };
}
declare namespace proxy {
	export { beacon, clonesSol, erc1967, proxySol };
}
declare namespace token {
	export { erc20 };
}
declare namespace contractsUpgradeable {
	export { access$1 as access, proxy$1 as proxy, token$1 as token, utils$2 as utils };
}
declare namespace ownableUpgradeableSol {
	export { OwnableUpgradeable };
}
declare namespace utils$2 {
	export { contextUpgradeableSol, cryptography$1 as cryptography, noncesUpgradeableSol, reentrancyGuardUpgradeableSol };
}
declare namespace initializableSol {
	export { Initializable };
}
declare namespace utils$3 {
	export { initializableSol };
}
declare namespace erc4626UpgradeableSol {
	export { ERC4626Upgradeable };
}
declare namespace erc20PermitUpgradeableSol {
	export { ERC20PermitUpgradeable };
}
declare namespace extensions$1 {
	export { erc20PermitUpgradeableSol, erc4626UpgradeableSol };
}
declare namespace erc20UpgradeableSol {
	export { ERC20Upgradeable };
}
declare namespace erc20$1 {
	export { erc20UpgradeableSol, extensions$1 as extensions };
}
declare namespace eip712UpgradeableSol {
	export { EIP712Upgradeable };
}
declare namespace cryptography$1 {
	export { eip712UpgradeableSol };
}
declare namespace contextUpgradeableSol {
	export { ContextUpgradeable };
}
declare namespace noncesUpgradeableSol {
	export { NoncesUpgradeable };
}
declare namespace reentrancyGuardUpgradeableSol {
	export { ReentrancyGuardUpgradeable };
}
declare namespace access$1 {
	export { ownableUpgradeableSol };
}
declare namespace proxy$1 {
	export { utils$3 as utils };
}
declare namespace token$1 {
	export { erc20$1 as erc20 };
}
declare namespace contracts {
	export { access, interfaces, proxy, token, utils };
}
declare namespace factories {
	export { contracts$2 as contracts, openzeppelin };
}
declare namespace iwethSol {
	export { IWETH };
}
declare namespace iDataFeedSol {
	export { IDataFeed };
}
declare namespace ierc20Sol$1 {
	export { IERC20Exp, IERC20Mintable };
}
declare namespace ierc20LockableSol {
	export { IERC20Lockable };
}
declare namespace ierc4626Sol$1 {
	export { IERC4626$1 as IERC4626 };
}
declare namespace ierc4626PoolSol {
	export { IERC4626Pool };
}
declare namespace iInitializableProxySol {
	export { IInitializableProxy };
}
declare namespace iMasterChefSol {
	export { IMasterChef };
}
declare namespace iMasterPoolSol {
	export { IMasterPool };
}
declare namespace iRewardVaultSol {
	export { IRewardVault };
}
declare namespace iUniswapV2FactorySol {
	export { IUniswapV2Factory };
}
declare namespace iUniswapV2PairSol {
	export { IUniswapV2Pair };
}
declare namespace iv2SwapFeedSol {
	export { IV2SwapFeed };
}
declare namespace tokens {
	export { erc20LockableSol, erc20MockSol, erc4626PoolSol, wethMockSol, wethSol };
}
declare namespace withSettlerSol {
	export { WithSettler };
}
declare namespace ownableSol$1 {
	export { Ownable$1 as Ownable };
}
declare namespace sigLibSol {
	export { SigLib };
}
declare namespace v2SwapFeedFactorySol {
	export { V2SwapFeedFactory };
}
declare namespace dataFeedSol {
	export { DataFeed };
}
declare namespace v2SwapFeedSol {
	export { V2SwapFeed };
}
declare namespace rewardVaultSol {
	export { RewardVault };
}
declare namespace masterChefSol {
	export { MasterChef };
}
declare namespace masterPoolSol {
	export { MasterPool };
}
declare namespace initializableProxySol {
	export { InitializableProxy };
}
declare namespace wethMockSol {
	export { WETHMock };
}
declare namespace erc20LockableSol {
	export { ERC20Lockable };
}
declare namespace erc20MockSol {
	export { ERC20Mock };
}
declare namespace erc4626PoolSol {
	export { ERC4626Pool };
}
declare namespace wethSol {
	export { WETH };
}
declare namespace lockSol {
	export { Lock$1 as Lock };
}
declare namespace interfaces$1 {
	export { iDataFeedSol, iInitializableProxySol, iMasterChefSol, iMasterPoolSol, iRewardVaultSol, iUniswapV2FactorySol, iUniswapV2PairSol, ierc20LockableSol, ierc20Sol$1 as ierc20Sol, ierc4626PoolSol, ierc4626Sol$1 as ierc4626Sol, iv2SwapFeedSol, iwethSol };
}
declare namespace libraries {
	export { ownableSol$1 as ownableSol, sigLibSol, withSettlerSol };
}
declare namespace oracle {
	export { dataFeedSol, v2SwapFeedFactorySol, v2SwapFeedSol };
}
declare namespace pools {
	export { masterChefSol, masterPoolSol, rewardVaultSol };
}
declare namespace proxy$2 {
	export { initializableProxySol };
}
declare namespace ownableSol$2 {
	export { Ownable__factory };
}
declare namespace utils$4 {
	export { addressSol$1 as addressSol, create2Sol$1 as create2Sol, cryptography$2 as cryptography, errorsSol$1 as errorsSol, introspection$1 as introspection, math$1 as math, noncesSol$1 as noncesSol, shortStringsSol$1 as shortStringsSol, stringsSol$1 as stringsSol };
}
declare namespace draftIerc6093Sol$1 {
	export { IERC1155Errors__factory, IERC20Errors__factory, IERC721Errors__factory };
}
declare namespace ierc1363Sol$1 {
	export { IERC1363__factory };
}
declare namespace ierc1967Sol$1 {
	export { IERC1967__factory };
}
declare namespace ierc4626Sol$2 {
	export { IERC4626__factory };
}
declare namespace ierc5267Sol$1 {
	export { IERC5267__factory };
}
declare namespace erc1967UtilsSol$1 {
	export { ERC1967Utils__factory };
}
declare namespace beacon$1 {
	export { iBeaconSol$1 as iBeaconSol };
}
declare namespace iBeaconSol$1 {
	export { IBeacon__factory };
}
declare namespace clonesSol$1 {
	export { Clones__factory };
}
declare namespace erc1967$1 {
	export { erc1967UtilsSol$1 as erc1967UtilsSol };
}
declare namespace proxySol$1 {
	export { Proxy__factory };
}
declare namespace ierc20PermitSol$1 {
	export { IERC20Permit__factory };
}
declare namespace erc20BurnableSol$1 {
	export { ERC20Burnable__factory };
}
declare namespace erc20PermitSol$1 {
	export { ERC20Permit__factory };
}
declare namespace ierc20MetadataSol$1 {
	export { IERC20Metadata__factory };
}
declare namespace utils$5 {
	export { safeErc20Sol$1 as safeErc20Sol };
}
declare namespace safeErc20Sol$1 {
	export { SafeERC20__factory };
}
declare namespace erc20Sol$1 {
	export { ERC20__factory };
}
declare namespace ierc20Sol$2 {
	export { IERC20__factory };
}
declare namespace extensions$2 {
	export { erc20BurnableSol$1 as erc20BurnableSol, erc20PermitSol$1 as erc20PermitSol, ierc20MetadataSol$1 as ierc20MetadataSol, ierc20PermitSol$1 as ierc20PermitSol };
}
declare namespace erc20$2 {
	export { erc20Sol$1 as erc20Sol, extensions$2 as extensions, ierc20Sol$2 as ierc20Sol, utils$5 as utils };
}
declare namespace eip712Sol$1 {
	export { EIP712__factory };
}
declare namespace ecdsaSol$1 {
	export { ECDSA__factory };
}
declare namespace math$1 {
	export { safeCastSol$1 as safeCastSol };
}
declare namespace ierc165Sol$1 {
	export { IERC165__factory };
}
declare namespace erc165Sol$1 {
	export { ERC165__factory };
}
declare namespace safeCastSol$1 {
	export { SafeCast__factory };
}
declare namespace addressSol$1 {
	export { Address__factory };
}
declare namespace create2Sol$1 {
	export { Create2__factory };
}
declare namespace errorsSol$1 {
	export { Errors__factory };
}
declare namespace noncesSol$1 {
	export { Nonces__factory };
}
declare namespace shortStringsSol$1 {
	export { ShortStrings__factory };
}
declare namespace stringsSol$1 {
	export { Strings__factory };
}
declare namespace cryptography$2 {
	export { ecdsaSol$1 as ecdsaSol, eip712Sol$1 as eip712Sol };
}
declare namespace introspection$1 {
	export { erc165Sol$1 as erc165Sol, ierc165Sol$1 as ierc165Sol };
}
declare namespace access$2 {
	export { ownableSol$2 as ownableSol };
}
declare namespace interfaces$2 {
	export { draftIerc6093Sol$1 as draftIerc6093Sol, ierc1363Sol$1 as ierc1363Sol, ierc1967Sol$1 as ierc1967Sol, ierc4626Sol$2 as ierc4626Sol, ierc5267Sol$1 as ierc5267Sol };
}
declare namespace proxy$3 {
	export { beacon$1 as beacon, clonesSol$1 as clonesSol, erc1967$1 as erc1967, proxySol$1 as proxySol };
}
declare namespace token$2 {
	export { erc20$2 as erc20 };
}
declare namespace contractsUpgradeable$1 {
	export { access$3 as access, proxy$4 as proxy, token$3 as token, utils$6 as utils };
}
declare namespace ownableUpgradeableSol$1 {
	export { OwnableUpgradeable__factory };
}
declare namespace utils$6 {
	export { contextUpgradeableSol$1 as contextUpgradeableSol, cryptography$3 as cryptography, noncesUpgradeableSol$1 as noncesUpgradeableSol, reentrancyGuardUpgradeableSol$1 as reentrancyGuardUpgradeableSol };
}
declare namespace initializableSol$1 {
	export { Initializable__factory };
}
declare namespace utils$7 {
	export { initializableSol$1 as initializableSol };
}
declare namespace erc4626UpgradeableSol$1 {
	export { ERC4626Upgradeable__factory };
}
declare namespace erc20PermitUpgradeableSol$1 {
	export { ERC20PermitUpgradeable__factory };
}
declare namespace extensions$3 {
	export { erc20PermitUpgradeableSol$1 as erc20PermitUpgradeableSol, erc4626UpgradeableSol$1 as erc4626UpgradeableSol };
}
declare namespace erc20UpgradeableSol$1 {
	export { ERC20Upgradeable__factory };
}
declare namespace erc20$3 {
	export { erc20UpgradeableSol$1 as erc20UpgradeableSol, extensions$3 as extensions };
}
declare namespace eip712UpgradeableSol$1 {
	export { EIP712Upgradeable__factory };
}
declare namespace cryptography$3 {
	export { eip712UpgradeableSol$1 as eip712UpgradeableSol };
}
declare namespace contextUpgradeableSol$1 {
	export { ContextUpgradeable__factory };
}
declare namespace noncesUpgradeableSol$1 {
	export { NoncesUpgradeable__factory };
}
declare namespace reentrancyGuardUpgradeableSol$1 {
	export { ReentrancyGuardUpgradeable__factory };
}
declare namespace access$3 {
	export { ownableUpgradeableSol$1 as ownableUpgradeableSol };
}
declare namespace proxy$4 {
	export { utils$7 as utils };
}
declare namespace token$3 {
	export { erc20$3 as erc20 };
}
declare namespace contracts$1 {
	export { access$2 as access, interfaces$2 as interfaces, proxy$3 as proxy, token$2 as token, utils$4 as utils };
}
declare namespace contracts$2 {
	export { interfaces$3 as interfaces, libraries$1 as libraries, lockSol$1 as lockSol, oracle$1 as oracle, pools$1 as pools, proxy$5 as proxy, tokens$1 as tokens };
}
declare namespace iwethSol$1 {
	export { IWETH__factory };
}
declare namespace iDataFeedSol$1 {
	export { IDataFeed__factory };
}
declare namespace ierc20Sol$3 {
	export { IERC20Exp__factory, IERC20Mintable__factory };
}
declare namespace ierc20LockableSol$1 {
	export { IERC20Lockable__factory };
}
declare namespace ierc4626Sol$3 {
	export { IERC4626__factory$1 as IERC4626__factory };
}
declare namespace ierc4626PoolSol$1 {
	export { IERC4626Pool__factory };
}
declare namespace iInitializableProxySol$1 {
	export { IInitializableProxy__factory };
}
declare namespace iMasterChefSol$1 {
	export { IMasterChef__factory };
}
declare namespace iMasterPoolSol$1 {
	export { IMasterPool__factory };
}
declare namespace iRewardVaultSol$1 {
	export { IRewardVault__factory };
}
declare namespace iUniswapV2FactorySol$1 {
	export { IUniswapV2Factory__factory };
}
declare namespace iUniswapV2PairSol$1 {
	export { IUniswapV2Pair__factory };
}
declare namespace iv2SwapFeedSol$1 {
	export { IV2SwapFeed__factory };
}
declare namespace tokens$1 {
	export { erc20LockableSol$1 as erc20LockableSol, erc20MockSol$1 as erc20MockSol, erc4626PoolSol$1 as erc4626PoolSol, wethMockSol$1 as wethMockSol, wethSol$1 as wethSol };
}
declare namespace withSettlerSol$1 {
	export { WithSettler__factory };
}
declare namespace ownableSol$3 {
	export { Ownable__factory$1 as Ownable__factory };
}
declare namespace sigLibSol$1 {
	export { SigLib__factory };
}
declare namespace v2SwapFeedFactorySol$1 {
	export { V2SwapFeedFactory__factory };
}
declare namespace dataFeedSol$1 {
	export { DataFeed__factory };
}
declare namespace v2SwapFeedSol$1 {
	export { V2SwapFeed__factory };
}
declare namespace rewardVaultSol$1 {
	export { RewardVault__factory };
}
declare namespace masterChefSol$1 {
	export { MasterChef__factory };
}
declare namespace masterPoolSol$1 {
	export { MasterPool__factory };
}
declare namespace initializableProxySol$1 {
	export { InitializableProxy__factory };
}
declare namespace wethMockSol$1 {
	export { WETHMock__factory };
}
declare namespace erc20LockableSol$1 {
	export { ERC20Lockable__factory };
}
declare namespace erc20MockSol$1 {
	export { ERC20Mock__factory };
}
declare namespace erc4626PoolSol$1 {
	export { ERC4626Pool__factory };
}
declare namespace wethSol$1 {
	export { WETH__factory };
}
declare namespace lockSol$1 {
	export { Lock__factory };
}
declare namespace interfaces$3 {
	export { iDataFeedSol$1 as iDataFeedSol, iInitializableProxySol$1 as iInitializableProxySol, iMasterChefSol$1 as iMasterChefSol, iMasterPoolSol$1 as iMasterPoolSol, iRewardVaultSol$1 as iRewardVaultSol, iUniswapV2FactorySol$1 as iUniswapV2FactorySol, iUniswapV2PairSol$1 as iUniswapV2PairSol, ierc20LockableSol$1 as ierc20LockableSol, ierc20Sol$3 as ierc20Sol, ierc4626PoolSol$1 as ierc4626PoolSol, ierc4626Sol$3 as ierc4626Sol, iv2SwapFeedSol$1 as iv2SwapFeedSol, iwethSol$1 as iwethSol };
}
declare namespace libraries$1 {
	export { ownableSol$3 as ownableSol, sigLibSol$1 as sigLibSol, withSettlerSol$1 as withSettlerSol };
}
declare namespace oracle$1 {
	export { dataFeedSol$1 as dataFeedSol, v2SwapFeedFactorySol$1 as v2SwapFeedFactorySol, v2SwapFeedSol$1 as v2SwapFeedSol };
}
declare namespace pools$1 {
	export { masterChefSol$1 as masterChefSol, masterPoolSol$1 as masterPoolSol, rewardVaultSol$1 as rewardVaultSol };
}
declare namespace proxy$5 {
	export { initializableProxySol$1 as initializableProxySol };
}
declare namespace openzeppelin {
	export { contracts$1 as contracts, contractsUpgradeable$1 as contractsUpgradeable };
}
declare namespace openzeppelin$1 {
	export { contracts, contractsUpgradeable };
}
declare namespace contracts$3 {
	export { interfaces$1 as interfaces, libraries, lockSol, oracle, pools, proxy$2 as proxy, tokens };
}
declare namespace contracts$4 {
	export { Address, Address__factory, Clones, Clones__factory, ContextUpgradeable, ContextUpgradeable__factory, Create2, Create2__factory, DataFeed, DataFeed__factory, ECDSA, ECDSA__factory, EIP712, EIP712Upgradeable, EIP712Upgradeable__factory, EIP712__factory, ERC165, ERC165__factory, ERC1967Utils, ERC1967Utils__factory, ERC20, ERC20Burnable, ERC20Burnable__factory, ERC20Lockable, ERC20Lockable__factory, ERC20Mock, ERC20Mock__factory, ERC20Permit, ERC20PermitUpgradeable, ERC20PermitUpgradeable__factory, ERC20Permit__factory, ERC20Upgradeable, ERC20Upgradeable__factory, ERC20__factory, ERC4626Pool, ERC4626Pool__factory, ERC4626Upgradeable, ERC4626Upgradeable__factory, Errors, Errors__factory, IBeacon, IBeacon__factory, IDataFeed, IDataFeed__factory, IERC1155Errors, IERC1155Errors__factory, IERC1363, IERC1363__factory, IERC165, IERC165__factory, IERC1967, IERC1967__factory, IERC20, IERC20Errors, IERC20Errors__factory, IERC20Exp, IERC20Exp__factory, IERC20Lockable, IERC20Lockable__factory, IERC20Metadata, IERC20Metadata__factory, IERC20Mintable, IERC20Mintable__factory, IERC20Permit, IERC20Permit__factory, IERC20__factory, IERC4626$1 as IERC4626, IERC4626Pool, IERC4626Pool__factory, IERC4626__factory$1 as IERC4626__factory, IERC5267, IERC5267__factory, IERC721Errors, IERC721Errors__factory, IInitializableProxy, IInitializableProxy__factory, IMasterChef, IMasterChef__factory, IMasterPool, IMasterPool__factory, IRewardVault, IRewardVault__factory, IUniswapV2Factory, IUniswapV2Factory__factory, IUniswapV2Pair, IUniswapV2Pair__factory, IV2SwapFeed, IV2SwapFeed__factory, IWETH, IWETH__factory, Initializable, InitializableProxy, InitializableProxy__factory, Initializable__factory, Lock$1 as Lock, Lock__factory, MasterChef, MasterChef__factory, MasterPool, MasterPool__factory, Nonces, NoncesUpgradeable, NoncesUpgradeable__factory, Nonces__factory, Ownable$1 as Ownable, OwnableUpgradeable, OwnableUpgradeable__factory, Ownable__factory$1 as Ownable__factory, Proxy$1 as Proxy, Proxy__factory, ReentrancyGuardUpgradeable, ReentrancyGuardUpgradeable__factory, RewardVault, RewardVault__factory, SafeCast, SafeCast__factory, SafeERC20, SafeERC20__factory, ShortStrings, ShortStrings__factory, SigLib, SigLib__factory, Strings, Strings__factory, V2SwapFeed, V2SwapFeedFactory, V2SwapFeedFactory__factory, V2SwapFeed__factory, WETH, WETHMock, WETHMock__factory, WETH__factory, WithSettler, WithSettler__factory, contracts$3 as contracts, factories, openzeppelin$1 as openzeppelin };
}

export {
	contracts$4 as contracts,
};

export {};
