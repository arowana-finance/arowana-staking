/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface MasterPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WETH"
      | "add"
      | "deposit"
      | "depositPermit"
      | "getMultiplier"
      | "getPoolRewardsByTime"
      | "getPoolRewardsPerSec"
      | "getRewardsPerShare"
      | "halvingInterval"
      | "halvingRate"
      | "hasPool"
      | "hasPoolToken"
      | "initializeChef"
      | "initializePool"
      | "massUpdatePools"
      | "owner"
      | "pendingRewards"
      | "poolDeposit"
      | "poolId"
      | "poolIdByTokens"
      | "poolInfo"
      | "poolLength"
      | "poolMint"
      | "poolTokenImplementation"
      | "poolTokens"
      | "poolTransfer"
      | "poolWithdraw"
      | "renounceOwnership"
      | "rewardToken"
      | "rewardVault"
      | "rewardsPerSec"
      | "set"
      | "setHalvingInterval"
      | "setHalvingRate"
      | "setRewardsPerSec"
      | "totalAllocPoint"
      | "transferOwnership"
      | "updatePool"
      | "userInfo"
      | "withdraw",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "Initialized"
      | "InitializedChef"
      | "OwnershipTransferred"
      | "SetHalvingInterval"
      | "SetHalvingRate"
      | "SetPool"
      | "SetPoolToken"
      | "SetRewards"
      | "Withdraw",
  ): EventFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "depositPermit",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolRewardsByTime",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolRewardsPerSec",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsPerShare",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "halvingInterval",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "halvingRate",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "hasPool",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "hasPoolToken",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "initializeChef",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "initializePool",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "poolDeposit",
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "poolId", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "poolIdByTokens",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "poolMint",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "poolTokenImplementation",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "poolTokens",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "poolTransfer",
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "poolWithdraw",
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "rewardVault",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPerSec",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: "setHalvingInterval",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setHalvingRate",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsPerSec",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositPermit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolRewardsByTime",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolRewardsPerSec",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsPerShare",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "halvingInterval",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "halvingRate",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "hasPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPoolToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeChef",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePool",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolDeposit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolIdByTokens",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolTokenImplementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "poolTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolTransfer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolWithdraw",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardVault",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerSec",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHalvingInterval",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHalvingRate",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsPerSec",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish,
  ];
  export type OutputTuple = [user: string, pid: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedChefEvent {
  export type InputTuple = [
    WETH: AddressLike,
    rewardToken: AddressLike,
    rewardVault: AddressLike,
  ];
  export type OutputTuple = [
    WETH: string,
    rewardToken: string,
    rewardVault: string,
  ];
  export interface OutputObject {
    WETH: string;
    rewardToken: string;
    rewardVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetHalvingIntervalEvent {
  export type InputTuple = [halvingInterval: BigNumberish];
  export type OutputTuple = [halvingInterval: bigint];
  export interface OutputObject {
    halvingInterval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetHalvingRateEvent {
  export type InputTuple = [halvingRate: BigNumberish];
  export type OutputTuple = [halvingRate: bigint];
  export interface OutputObject {
    halvingRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolEvent {
  export type InputTuple = [
    pid: BigNumberish,
    lpToken: AddressLike,
    newAllocPoint: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
  ];
  export type OutputTuple = [
    pid: bigint,
    lpToken: string,
    newAllocPoint: bigint,
    startTime: bigint,
    endTime: bigint,
  ];
  export interface OutputObject {
    pid: bigint;
    lpToken: string;
    newAllocPoint: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPoolTokenEvent {
  export type InputTuple = [pid: BigNumberish, poolToken: AddressLike];
  export type OutputTuple = [pid: bigint, poolToken: string];
  export interface OutputObject {
    pid: bigint;
    poolToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRewardsEvent {
  export type InputTuple = [rewardsPerSec: BigNumberish];
  export type OutputTuple = [rewardsPerSec: bigint];
  export interface OutputObject {
    rewardsPerSec: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    user: AddressLike,
    pid: BigNumberish,
    amount: BigNumberish,
  ];
  export type OutputTuple = [user: string, pid: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    pid: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MasterPool extends BaseContract {
  connect(runner?: ContractRunner | null): MasterPool;
  waitForDeployment(): Promise<this>;

  interface: MasterPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  WETH: TypedContractMethod<[], [string], "view">;

  add: TypedContractMethod<
    [
      _lpToken: AddressLike,
      _allocPoint: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _withUpdate: boolean,
    ],
    [bigint],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;

  depositPermit: TypedContractMethod<
    [
      _pid: BigNumberish,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  getMultiplier: TypedContractMethod<
    [_pid: BigNumberish, _fromTime: BigNumberish, _toTime: BigNumberish],
    [bigint],
    "view"
  >;

  getPoolRewardsByTime: TypedContractMethod<
    [_pid: BigNumberish, _fromTime: BigNumberish, _toTime: BigNumberish],
    [bigint],
    "view"
  >;

  getPoolRewardsPerSec: TypedContractMethod<
    [_pid: BigNumberish],
    [bigint],
    "view"
  >;

  getRewardsPerShare: TypedContractMethod<
    [_pid: BigNumberish],
    [bigint],
    "view"
  >;

  halvingInterval: TypedContractMethod<[], [bigint], "view">;

  halvingRate: TypedContractMethod<[], [bigint], "view">;

  hasPool: TypedContractMethod<[_lpToken: AddressLike], [boolean], "view">;

  hasPoolToken: TypedContractMethod<
    [_poolToken: AddressLike],
    [boolean],
    "view"
  >;

  initializeChef: TypedContractMethod<
    [
      _owner: AddressLike,
      _WETH: AddressLike,
      _rewardToken: AddressLike,
      _rewardVault: AddressLike,
      _rewardsPerSec: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      addPool: boolean,
    ],
    [void],
    "nonpayable"
  >;

  initializePool: TypedContractMethod<
    [
      _owner: AddressLike,
      _WETH: AddressLike,
      _poolTokenImplementation: AddressLike,
      _rewardToken: AddressLike,
      _rewardVault: AddressLike,
      _rewardsPerSec: BigNumberish,
      _halvingRate: BigNumberish,
      _halvingInterval: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      addPool: boolean,
    ],
    [void],
    "nonpayable"
  >;

  massUpdatePools: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingRewards: TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  poolDeposit: TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  poolId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  poolIdByTokens: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  poolInfo: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        lpToken: string;
        allocPoint: bigint;
        startTime: bigint;
        endTime: bigint;
        lastRewardTime: bigint;
        accRewardsPerShare: bigint;
      },
    ],
    "view"
  >;

  poolLength: TypedContractMethod<[], [bigint], "view">;

  poolMint: TypedContractMethod<[from: AddressLike], [void], "nonpayable">;

  poolTokenImplementation: TypedContractMethod<[], [string], "view">;

  poolTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  poolTransfer: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  poolWithdraw: TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardToken: TypedContractMethod<[], [string], "view">;

  rewardVault: TypedContractMethod<[], [string], "view">;

  rewardsPerSec: TypedContractMethod<[], [bigint], "view">;

  set: TypedContractMethod<
    [
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _withUpdate: boolean,
    ],
    [void],
    "nonpayable"
  >;

  setHalvingInterval: TypedContractMethod<
    [_halvingInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setHalvingRate: TypedContractMethod<
    [_halvingRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardsPerSec: TypedContractMethod<
    [_rewardsPerSec: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalAllocPoint: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePool: TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;

  userInfo: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { amount: bigint; rewardDebt: bigint }],
    "view"
  >;

  withdraw: TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "WETH",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "add",
  ): TypedContractMethod<
    [
      _lpToken: AddressLike,
      _allocPoint: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _withUpdate: boolean,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit",
  ): TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositPermit",
  ): TypedContractMethod<
    [
      _pid: BigNumberish,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMultiplier",
  ): TypedContractMethod<
    [_pid: BigNumberish, _fromTime: BigNumberish, _toTime: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolRewardsByTime",
  ): TypedContractMethod<
    [_pid: BigNumberish, _fromTime: BigNumberish, _toTime: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolRewardsPerSec",
  ): TypedContractMethod<[_pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardsPerShare",
  ): TypedContractMethod<[_pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "halvingInterval",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "halvingRate",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasPool",
  ): TypedContractMethod<[_lpToken: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasPoolToken",
  ): TypedContractMethod<[_poolToken: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "initializeChef",
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _WETH: AddressLike,
      _rewardToken: AddressLike,
      _rewardVault: AddressLike,
      _rewardsPerSec: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      addPool: boolean,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initializePool",
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _WETH: AddressLike,
      _poolTokenImplementation: AddressLike,
      _rewardToken: AddressLike,
      _rewardVault: AddressLike,
      _rewardsPerSec: BigNumberish,
      _halvingRate: BigNumberish,
      _halvingInterval: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      addPool: boolean,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "massUpdatePools",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingRewards",
  ): TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolDeposit",
  ): TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolId",
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolIdByTokens",
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolInfo",
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        lpToken: string;
        allocPoint: bigint;
        startTime: bigint;
        endTime: bigint;
        lastRewardTime: bigint;
        accRewardsPerShare: bigint;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolLength",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolMint",
  ): TypedContractMethod<[from: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "poolTokenImplementation",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolTokens",
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "poolTransfer",
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolWithdraw",
  ): TypedContractMethod<
    [_user: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardToken",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardVault",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardsPerSec",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "set",
  ): TypedContractMethod<
    [
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _withUpdate: boolean,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHalvingInterval",
  ): TypedContractMethod<
    [_halvingInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHalvingRate",
  ): TypedContractMethod<[_halvingRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardsPerSec",
  ): TypedContractMethod<[_rewardsPerSec: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalAllocPoint",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership",
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePool",
  ): TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userInfo",
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [[bigint, bigint] & { amount: bigint; rewardDebt: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw",
  ): TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deposit",
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized",
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "InitializedChef",
  ): TypedContractEvent<
    InitializedChefEvent.InputTuple,
    InitializedChefEvent.OutputTuple,
    InitializedChefEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetHalvingInterval",
  ): TypedContractEvent<
    SetHalvingIntervalEvent.InputTuple,
    SetHalvingIntervalEvent.OutputTuple,
    SetHalvingIntervalEvent.OutputObject
  >;
  getEvent(
    key: "SetHalvingRate",
  ): TypedContractEvent<
    SetHalvingRateEvent.InputTuple,
    SetHalvingRateEvent.OutputTuple,
    SetHalvingRateEvent.OutputObject
  >;
  getEvent(
    key: "SetPool",
  ): TypedContractEvent<
    SetPoolEvent.InputTuple,
    SetPoolEvent.OutputTuple,
    SetPoolEvent.OutputObject
  >;
  getEvent(
    key: "SetPoolToken",
  ): TypedContractEvent<
    SetPoolTokenEvent.InputTuple,
    SetPoolTokenEvent.OutputTuple,
    SetPoolTokenEvent.OutputObject
  >;
  getEvent(
    key: "SetRewards",
  ): TypedContractEvent<
    SetRewardsEvent.InputTuple,
    SetRewardsEvent.OutputTuple,
    SetRewardsEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw",
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint16,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "InitializedChef(address,address,address)": TypedContractEvent<
      InitializedChefEvent.InputTuple,
      InitializedChefEvent.OutputTuple,
      InitializedChefEvent.OutputObject
    >;
    InitializedChef: TypedContractEvent<
      InitializedChefEvent.InputTuple,
      InitializedChefEvent.OutputTuple,
      InitializedChefEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetHalvingInterval(uint48)": TypedContractEvent<
      SetHalvingIntervalEvent.InputTuple,
      SetHalvingIntervalEvent.OutputTuple,
      SetHalvingIntervalEvent.OutputObject
    >;
    SetHalvingInterval: TypedContractEvent<
      SetHalvingIntervalEvent.InputTuple,
      SetHalvingIntervalEvent.OutputTuple,
      SetHalvingIntervalEvent.OutputObject
    >;

    "SetHalvingRate(uint16)": TypedContractEvent<
      SetHalvingRateEvent.InputTuple,
      SetHalvingRateEvent.OutputTuple,
      SetHalvingRateEvent.OutputObject
    >;
    SetHalvingRate: TypedContractEvent<
      SetHalvingRateEvent.InputTuple,
      SetHalvingRateEvent.OutputTuple,
      SetHalvingRateEvent.OutputObject
    >;

    "SetPool(uint16,address,uint32,uint48,uint48)": TypedContractEvent<
      SetPoolEvent.InputTuple,
      SetPoolEvent.OutputTuple,
      SetPoolEvent.OutputObject
    >;
    SetPool: TypedContractEvent<
      SetPoolEvent.InputTuple,
      SetPoolEvent.OutputTuple,
      SetPoolEvent.OutputObject
    >;

    "SetPoolToken(uint16,address)": TypedContractEvent<
      SetPoolTokenEvent.InputTuple,
      SetPoolTokenEvent.OutputTuple,
      SetPoolTokenEvent.OutputObject
    >;
    SetPoolToken: TypedContractEvent<
      SetPoolTokenEvent.InputTuple,
      SetPoolTokenEvent.OutputTuple,
      SetPoolTokenEvent.OutputObject
    >;

    "SetRewards(uint256)": TypedContractEvent<
      SetRewardsEvent.InputTuple,
      SetRewardsEvent.OutputTuple,
      SetRewardsEvent.OutputObject
    >;
    SetRewards: TypedContractEvent<
      SetRewardsEvent.InputTuple,
      SetRewardsEvent.OutputTuple,
      SetRewardsEvent.OutputObject
    >;

    "Withdraw(address,uint16,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
