/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface RewardVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addSpender"
      | "initializeVault"
      | "owner"
      | "removeSpender"
      | "renounceOwnership"
      | "sendTo"
      | "spenders"
      | "transferOwnership"
      | "withdraw",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddSpender"
      | "Initialized"
      | "OwnershipTransferred"
      | "RemoveSpender"
      | "Rewarded"
      | "Withdrawn",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addSpender",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "initializeVault",
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSpender",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "sendTo",
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "spenders", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: "addSpender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeVault",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSpender",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "sendTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spenders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AddSpenderEvent {
  export type InputTuple = [newSpender: AddressLike];
  export type OutputTuple = [newSpender: string];
  export interface OutputObject {
    newSpender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveSpenderEvent {
  export type InputTuple = [oldSpender: AddressLike];
  export type OutputTuple = [oldSpender: string];
  export interface OutputObject {
    oldSpender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardedEvent {
  export type InputTuple = [
    token: AddressLike,
    spender: AddressLike,
    to: AddressLike,
    value: BigNumberish,
  ];
  export type OutputTuple = [
    token: string,
    spender: string,
    to: string,
    value: bigint,
  ];
  export interface OutputObject {
    token: string;
    spender: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    token: AddressLike,
    spender: AddressLike,
    to: AddressLike,
    value: BigNumberish,
  ];
  export type OutputTuple = [
    token: string,
    spender: string,
    to: string,
    value: bigint,
  ];
  export interface OutputObject {
    token: string;
    spender: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardVault extends BaseContract {
  connect(runner?: ContractRunner | null): RewardVault;
  waitForDeployment(): Promise<this>;

  interface: RewardVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  addSpender: TypedContractMethod<
    [_spender: AddressLike],
    [void],
    "nonpayable"
  >;

  initializeVault: TypedContractMethod<
    [_initOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeSpender: TypedContractMethod<
    [_spender: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sendTo: TypedContractMethod<
    [token: AddressLike, to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  spenders: TypedContractMethod<[], [string[]], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "addSpender",
  ): TypedContractMethod<[_spender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeVault",
  ): TypedContractMethod<[_initOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeSpender",
  ): TypedContractMethod<[_spender: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendTo",
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spenders",
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "transferOwnership",
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw",
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddSpender",
  ): TypedContractEvent<
    AddSpenderEvent.InputTuple,
    AddSpenderEvent.OutputTuple,
    AddSpenderEvent.OutputObject
  >;
  getEvent(
    key: "Initialized",
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RemoveSpender",
  ): TypedContractEvent<
    RemoveSpenderEvent.InputTuple,
    RemoveSpenderEvent.OutputTuple,
    RemoveSpenderEvent.OutputObject
  >;
  getEvent(
    key: "Rewarded",
  ): TypedContractEvent<
    RewardedEvent.InputTuple,
    RewardedEvent.OutputTuple,
    RewardedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn",
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "AddSpender(address)": TypedContractEvent<
      AddSpenderEvent.InputTuple,
      AddSpenderEvent.OutputTuple,
      AddSpenderEvent.OutputObject
    >;
    AddSpender: TypedContractEvent<
      AddSpenderEvent.InputTuple,
      AddSpenderEvent.OutputTuple,
      AddSpenderEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RemoveSpender(address)": TypedContractEvent<
      RemoveSpenderEvent.InputTuple,
      RemoveSpenderEvent.OutputTuple,
      RemoveSpenderEvent.OutputObject
    >;
    RemoveSpender: TypedContractEvent<
      RemoveSpenderEvent.InputTuple,
      RemoveSpenderEvent.OutputTuple,
      RemoveSpenderEvent.OutputObject
    >;

    "Rewarded(address,address,address,uint256)": TypedContractEvent<
      RewardedEvent.InputTuple,
      RewardedEvent.OutputTuple,
      RewardedEvent.OutputObject
    >;
    Rewarded: TypedContractEvent<
      RewardedEvent.InputTuple,
      RewardedEvent.OutputTuple,
      RewardedEvent.OutputObject
    >;

    "Withdrawn(address,address,address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
