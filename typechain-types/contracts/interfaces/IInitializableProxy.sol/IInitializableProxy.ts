/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface IInitializableProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "changeProxyAdmin"
      | "changeProxyDescription"
      | "implementation"
      | "initializeProxy"
      | "proxyAdmin"
      | "proxyDescription"
      | "upgradeToAndCall",
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DescriptionChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "changeProxyAdmin",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "changeProxyDescription",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "initializeProxy",
    values: [string, AddressLike, AddressLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAdmin",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "proxyDescription",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: "changeProxyAdmin",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProxyDescription",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeProxy",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "proxyAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyDescription",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike,
  ): Result;
}

export namespace DescriptionChangedEvent {
  export type InputTuple = [description: string];
  export type OutputTuple = [description: string];
  export interface OutputObject {
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IInitializableProxy extends BaseContract {
  connect(runner?: ContractRunner | null): IInitializableProxy;
  waitForDeployment(): Promise<this>;

  interface: IInitializableProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  changeProxyAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  changeProxyDescription: TypedContractMethod<
    [_description: string],
    [void],
    "nonpayable"
  >;

  implementation: TypedContractMethod<[], [string], "view">;

  initializeProxy: TypedContractMethod<
    [
      _description: string,
      newAdmin: AddressLike,
      newImplementation: AddressLike,
      data: BytesLike,
    ],
    [void],
    "payable"
  >;

  proxyAdmin: TypedContractMethod<[], [string], "view">;

  proxyDescription: TypedContractMethod<[], [string], "view">;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "changeProxyAdmin",
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeProxyDescription",
  ): TypedContractMethod<[_description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "implementation",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initializeProxy",
  ): TypedContractMethod<
    [
      _description: string,
      newAdmin: AddressLike,
      newImplementation: AddressLike,
      data: BytesLike,
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "proxyAdmin",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxyDescription",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "upgradeToAndCall",
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "DescriptionChanged",
  ): TypedContractEvent<
    DescriptionChangedEvent.InputTuple,
    DescriptionChangedEvent.OutputTuple,
    DescriptionChangedEvent.OutputObject
  >;

  filters: {
    "DescriptionChanged(string)": TypedContractEvent<
      DescriptionChangedEvent.InputTuple,
      DescriptionChangedEvent.OutputTuple,
      DescriptionChangedEvent.OutputObject
    >;
    DescriptionChanged: TypedContractEvent<
      DescriptionChangedEvent.InputTuple,
      DescriptionChangedEvent.OutputTuple,
      DescriptionChangedEvent.OutputObject
    >;
  };
}
