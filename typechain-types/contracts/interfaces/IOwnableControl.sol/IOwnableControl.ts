/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface IOwnableControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_SUBOWNER_ROLE"
      | "addSubowner"
      | "isSubowner"
      | "owner"
      | "removeSubowner"
      | "renounceOwnership"
      | "subowners"
      | "transferOwnership",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "SubownerAdded"
      | "SubownerRemoved",
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_SUBOWNER_ROLE",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "addSubowner",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "isSubowner",
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSubowner",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "subowners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike],
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_SUBOWNER_ROLE",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSubowner",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "isSubowner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSubowner",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "subowners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubownerAddedEvent {
  export type InputTuple = [newSubowner: AddressLike];
  export type OutputTuple = [newSubowner: string];
  export interface OutputObject {
    newSubowner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubownerRemovedEvent {
  export type InputTuple = [oldSubowner: AddressLike];
  export type OutputTuple = [oldSubowner: string];
  export interface OutputObject {
    oldSubowner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOwnableControl extends BaseContract {
  connect(runner?: ContractRunner | null): IOwnableControl;
  waitForDeployment(): Promise<this>;

  interface: IOwnableControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  DEFAULT_SUBOWNER_ROLE: TypedContractMethod<[], [string], "view">;

  addSubowner: TypedContractMethod<
    [newSubowner: AddressLike],
    [void],
    "nonpayable"
  >;

  isSubowner: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeSubowner: TypedContractMethod<
    [oldSubowner: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  subowners: TypedContractMethod<[], [string[]], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_SUBOWNER_ROLE",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addSubowner",
  ): TypedContractMethod<[newSubowner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isSubowner",
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeSubowner",
  ): TypedContractMethod<[oldSubowner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subowners",
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "transferOwnership",
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SubownerAdded",
  ): TypedContractEvent<
    SubownerAddedEvent.InputTuple,
    SubownerAddedEvent.OutputTuple,
    SubownerAddedEvent.OutputObject
  >;
  getEvent(
    key: "SubownerRemoved",
  ): TypedContractEvent<
    SubownerRemovedEvent.InputTuple,
    SubownerRemovedEvent.OutputTuple,
    SubownerRemovedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SubownerAdded(address)": TypedContractEvent<
      SubownerAddedEvent.InputTuple,
      SubownerAddedEvent.OutputTuple,
      SubownerAddedEvent.OutputObject
    >;
    SubownerAdded: TypedContractEvent<
      SubownerAddedEvent.InputTuple,
      SubownerAddedEvent.OutputTuple,
      SubownerAddedEvent.OutputObject
    >;

    "SubownerRemoved(address)": TypedContractEvent<
      SubownerRemovedEvent.InputTuple,
      SubownerRemovedEvent.OutputTuple,
      SubownerRemovedEvent.OutputObject
    >;
    SubownerRemoved: TypedContractEvent<
      SubownerRemovedEvent.InputTuple,
      SubownerRemovedEvent.OutputTuple,
      SubownerRemovedEvent.OutputObject
    >;
  };
}
