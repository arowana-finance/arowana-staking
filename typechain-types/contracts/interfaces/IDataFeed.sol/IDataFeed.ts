/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface IDataFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "asset"
      | "decimals"
      | "deploymentTimestamp"
      | "description"
      | "getAnswer"
      | "getRoundData"
      | "getTimestamp"
      | "getTimestampAnswer"
      | "initializeFeed"
      | "latestAnswer"
      | "latestRound"
      | "latestRoundData"
      | "latestTimestamp"
      | "setAsset"
      | "setDescription"
      | "setVersion"
      | "updateAnswer"
      | "version",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnswerUpdated"
      | "NewAsset"
      | "NewDescription"
      | "NewRound",
  ): EventFragment;

  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploymentTimestamp",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getAnswer",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundData",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampAnswer",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "initializeFeed",
    values: [AddressLike, AddressLike, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "latestAnswer",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestRound",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestTimestamp",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setAsset",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setDescription",
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: "setVersion",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "updateAnswer",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploymentTimestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoundData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampAnswer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeFeed",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestAnswer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRound",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTimestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "setAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDescription",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAnswer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AnswerUpdatedEvent {
  export type InputTuple = [
    current: BigNumberish,
    roundId: BigNumberish,
    updatedAt: BigNumberish,
  ];
  export type OutputTuple = [
    current: bigint,
    roundId: bigint,
    updatedAt: bigint,
  ];
  export interface OutputObject {
    current: bigint;
    roundId: bigint;
    updatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAssetEvent {
  export type InputTuple = [asset: AddressLike];
  export type OutputTuple = [asset: string];
  export interface OutputObject {
    asset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDescriptionEvent {
  export type InputTuple = [description: string];
  export type OutputTuple = [description: string];
  export interface OutputObject {
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewRoundEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    startedBy: AddressLike,
    startedAt: BigNumberish,
  ];
  export type OutputTuple = [
    roundId: bigint,
    startedBy: string,
    startedAt: bigint,
  ];
  export interface OutputObject {
    roundId: bigint;
    startedBy: string;
    startedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDataFeed extends BaseContract {
  connect(runner?: ContractRunner | null): IDataFeed;
  waitForDeployment(): Promise<this>;

  interface: IDataFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  asset: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deploymentTimestamp: TypedContractMethod<[], [bigint], "view">;

  description: TypedContractMethod<[], [string], "view">;

  getAnswer: TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;

  getRoundData: TypedContractMethod<
    [_roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      },
    ],
    "view"
  >;

  getTimestamp: TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;

  getTimestampAnswer: TypedContractMethod<
    [_timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  initializeFeed: TypedContractMethod<
    [
      _initOwner: AddressLike,
      _asset: AddressLike,
      _description: string,
      _initAnswer: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;

  latestAnswer: TypedContractMethod<[], [bigint], "view">;

  latestRound: TypedContractMethod<[], [bigint], "view">;

  latestRoundData: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  latestTimestamp: TypedContractMethod<[], [bigint], "view">;

  setAsset: TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;

  setDescription: TypedContractMethod<
    [_description: string],
    [void],
    "nonpayable"
  >;

  setVersion: TypedContractMethod<
    [_version: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateAnswer: TypedContractMethod<
    [newAnswer: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "asset",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deploymentTimestamp",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "description",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAnswer",
  ): TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoundData",
  ): TypedContractMethod<
    [_roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      },
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimestamp",
  ): TypedContractMethod<[_roundId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTimestampAnswer",
  ): TypedContractMethod<[_timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "initializeFeed",
  ): TypedContractMethod<
    [
      _initOwner: AddressLike,
      _asset: AddressLike,
      _description: string,
      _initAnswer: BigNumberish,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "latestAnswer",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestRound",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestRoundData",
  ): TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestTimestamp",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAsset",
  ): TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDescription",
  ): TypedContractMethod<[_description: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVersion",
  ): TypedContractMethod<[_version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAnswer",
  ): TypedContractMethod<[newAnswer: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version",
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "AnswerUpdated",
  ): TypedContractEvent<
    AnswerUpdatedEvent.InputTuple,
    AnswerUpdatedEvent.OutputTuple,
    AnswerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NewAsset",
  ): TypedContractEvent<
    NewAssetEvent.InputTuple,
    NewAssetEvent.OutputTuple,
    NewAssetEvent.OutputObject
  >;
  getEvent(
    key: "NewDescription",
  ): TypedContractEvent<
    NewDescriptionEvent.InputTuple,
    NewDescriptionEvent.OutputTuple,
    NewDescriptionEvent.OutputObject
  >;
  getEvent(
    key: "NewRound",
  ): TypedContractEvent<
    NewRoundEvent.InputTuple,
    NewRoundEvent.OutputTuple,
    NewRoundEvent.OutputObject
  >;

  filters: {
    "AnswerUpdated(int256,uint256,uint256)": TypedContractEvent<
      AnswerUpdatedEvent.InputTuple,
      AnswerUpdatedEvent.OutputTuple,
      AnswerUpdatedEvent.OutputObject
    >;
    AnswerUpdated: TypedContractEvent<
      AnswerUpdatedEvent.InputTuple,
      AnswerUpdatedEvent.OutputTuple,
      AnswerUpdatedEvent.OutputObject
    >;

    "NewAsset(address)": TypedContractEvent<
      NewAssetEvent.InputTuple,
      NewAssetEvent.OutputTuple,
      NewAssetEvent.OutputObject
    >;
    NewAsset: TypedContractEvent<
      NewAssetEvent.InputTuple,
      NewAssetEvent.OutputTuple,
      NewAssetEvent.OutputObject
    >;

    "NewDescription(string)": TypedContractEvent<
      NewDescriptionEvent.InputTuple,
      NewDescriptionEvent.OutputTuple,
      NewDescriptionEvent.OutputObject
    >;
    NewDescription: TypedContractEvent<
      NewDescriptionEvent.InputTuple,
      NewDescriptionEvent.OutputTuple,
      NewDescriptionEvent.OutputObject
    >;

    "NewRound(uint256,address,uint256)": TypedContractEvent<
      NewRoundEvent.InputTuple,
      NewRoundEvent.OutputTuple,
      NewRoundEvent.OutputObject
    >;
    NewRound: TypedContractEvent<
      NewRoundEvent.InputTuple,
      NewRoundEvent.OutputTuple,
      NewRoundEvent.OutputObject
    >;
  };
}
