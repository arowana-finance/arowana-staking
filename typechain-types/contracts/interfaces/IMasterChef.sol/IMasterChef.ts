/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export declare namespace IMasterChef {
  export type PoolInfoStruct = {
    lpToken: AddressLike;
    allocPoint: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    lastRewardTime: BigNumberish;
    accRewardsPerShare: BigNumberish;
  };

  export type PoolInfoStructOutput = [
    lpToken: string,
    allocPoint: bigint,
    startTime: bigint,
    endTime: bigint,
    lastRewardTime: bigint,
    accRewardsPerShare: bigint,
  ] & {
    lpToken: string;
    allocPoint: bigint;
    startTime: bigint;
    endTime: bigint;
    lastRewardTime: bigint;
    accRewardsPerShare: bigint;
  };

  export type UserInfoStruct = {
    amount: BigNumberish;
    rewardDebt: BigNumberish;
  };

  export type UserInfoStructOutput = [amount: bigint, rewardDebt: bigint] & {
    amount: bigint;
    rewardDebt: bigint;
  };
}

export interface IMasterChefInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WETH"
      | "add"
      | "deposit"
      | "depositPermit"
      | "getMultiplier"
      | "getPoolRewardsByTime"
      | "getPoolRewardsPerSec"
      | "getRewardsPerShare"
      | "hasPool"
      | "initializeChef"
      | "massUpdatePools"
      | "pendingRewards"
      | "poolId"
      | "poolInfo"
      | "poolLength"
      | "rewardToken"
      | "rewardVault"
      | "rewardsPerSec"
      | "set"
      | "setRewardsPerSec"
      | "totalAllocPoint"
      | "updatePool"
      | "userInfo"
      | "withdraw",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "depositPermit",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolRewardsByTime",
    values: [BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolRewardsPerSec",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsPerShare",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "hasPool",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "initializeChef",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(functionFragment: "poolId", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "rewardVault",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPerSec",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsPerSec",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositPermit",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolRewardsByTime",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolRewardsPerSec",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsPerShare",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "hasPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeChef",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardVault",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerSec",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsPerSec",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IMasterChef extends BaseContract {
  connect(runner?: ContractRunner | null): IMasterChef;
  waitForDeployment(): Promise<this>;

  interface: IMasterChefInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  WETH: TypedContractMethod<[], [string], "view">;

  add: TypedContractMethod<
    [
      _lpToken: AddressLike,
      _allocPoint: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _withUpdate: boolean,
    ],
    [bigint],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;

  depositPermit: TypedContractMethod<
    [
      _pid: BigNumberish,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;

  getMultiplier: TypedContractMethod<
    [_pid: BigNumberish, _fromTime: BigNumberish, _toTime: BigNumberish],
    [bigint],
    "view"
  >;

  getPoolRewardsByTime: TypedContractMethod<
    [_pid: BigNumberish, _fromTime: BigNumberish, _toTime: BigNumberish],
    [bigint],
    "view"
  >;

  getPoolRewardsPerSec: TypedContractMethod<
    [_pid: BigNumberish],
    [bigint],
    "view"
  >;

  getRewardsPerShare: TypedContractMethod<
    [_pid: BigNumberish],
    [bigint],
    "view"
  >;

  hasPool: TypedContractMethod<[_lpToken: AddressLike], [boolean], "view">;

  initializeChef: TypedContractMethod<
    [
      _owner: AddressLike,
      _WETH: AddressLike,
      _rewardToken: AddressLike,
      _rewardVault: AddressLike,
      _rewardsPerSec: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      addPool: boolean,
    ],
    [void],
    "nonpayable"
  >;

  massUpdatePools: TypedContractMethod<[], [void], "nonpayable">;

  pendingRewards: TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  poolId: TypedContractMethod<[pool: AddressLike], [bigint], "view">;

  poolInfo: TypedContractMethod<
    [pid: BigNumberish],
    [IMasterChef.PoolInfoStructOutput],
    "view"
  >;

  poolLength: TypedContractMethod<[], [bigint], "view">;

  rewardToken: TypedContractMethod<[], [string], "view">;

  rewardVault: TypedContractMethod<[], [string], "view">;

  rewardsPerSec: TypedContractMethod<[], [bigint], "view">;

  set: TypedContractMethod<
    [
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _withUpdate: boolean,
    ],
    [void],
    "nonpayable"
  >;

  setRewardsPerSec: TypedContractMethod<
    [_rewardPerSec: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalAllocPoint: TypedContractMethod<[], [bigint], "view">;

  updatePool: TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;

  userInfo: TypedContractMethod<
    [pid: BigNumberish, user: AddressLike],
    [IMasterChef.UserInfoStructOutput],
    "view"
  >;

  withdraw: TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "WETH",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "add",
  ): TypedContractMethod<
    [
      _lpToken: AddressLike,
      _allocPoint: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _withUpdate: boolean,
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit",
  ): TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositPermit",
  ): TypedContractMethod<
    [
      _pid: BigNumberish,
      _amount: BigNumberish,
      _deadline: BigNumberish,
      _signature: BytesLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMultiplier",
  ): TypedContractMethod<
    [_pid: BigNumberish, _fromTime: BigNumberish, _toTime: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolRewardsByTime",
  ): TypedContractMethod<
    [_pid: BigNumberish, _fromTime: BigNumberish, _toTime: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolRewardsPerSec",
  ): TypedContractMethod<[_pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardsPerShare",
  ): TypedContractMethod<[_pid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasPool",
  ): TypedContractMethod<[_lpToken: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "initializeChef",
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _WETH: AddressLike,
      _rewardToken: AddressLike,
      _rewardVault: AddressLike,
      _rewardsPerSec: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      addPool: boolean,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "massUpdatePools",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pendingRewards",
  ): TypedContractMethod<
    [_pid: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolId",
  ): TypedContractMethod<[pool: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolInfo",
  ): TypedContractMethod<
    [pid: BigNumberish],
    [IMasterChef.PoolInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolLength",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardToken",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardVault",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardsPerSec",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "set",
  ): TypedContractMethod<
    [
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _withUpdate: boolean,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardsPerSec",
  ): TypedContractMethod<[_rewardPerSec: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalAllocPoint",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updatePool",
  ): TypedContractMethod<[_pid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userInfo",
  ): TypedContractMethod<
    [pid: BigNumberish, user: AddressLike],
    [IMasterChef.UserInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw",
  ): TypedContractMethod<
    [_pid: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
