/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface V2SwapFeedFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "USD"
      | "WETH"
      | "createFeed"
      | "feedImplementation"
      | "feeds"
      | "initializeFactory"
      | "latestAnswer"
      | "owner"
      | "phaseId"
      | "renounceOwnership"
      | "setFeedImplementation"
      | "setSwapFactory"
      | "setUSD"
      | "setWETH"
      | "swapFactory"
      | "transferOwnership",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeedConfirmed"
      | "FeedProposed"
      | "Initialized"
      | "OwnershipTransferred"
      | "SetFeedImplementation"
      | "SetSwapFactory"
      | "SetUSD"
      | "SetWETH",
  ): EventFragment;

  encodeFunctionData(functionFragment: "USD", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createFeed",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "feedImplementation",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "feeds", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "initializeFactory",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "latestAnswer",
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "phaseId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "setFeedImplementation",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapFactory",
    values: [AddressLike],
  ): string;
  encodeFunctionData(functionFragment: "setUSD", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "setWETH",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "swapFactory",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike],
  ): string;

  decodeFunctionResult(functionFragment: "USD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feedImplementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "feeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeFactory",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestAnswer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phaseId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeedImplementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapFactory",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "setUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapFactory",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike,
  ): Result;
}

export namespace FeedConfirmedEvent {
  export type InputTuple = [
    asset: AddressLike,
    denomination: AddressLike,
    latestAggregator: AddressLike,
    previousAggregator: AddressLike,
    nextPhaseId: BigNumberish,
    sender: AddressLike,
  ];
  export type OutputTuple = [
    asset: string,
    denomination: string,
    latestAggregator: string,
    previousAggregator: string,
    nextPhaseId: bigint,
    sender: string,
  ];
  export interface OutputObject {
    asset: string;
    denomination: string;
    latestAggregator: string;
    previousAggregator: string;
    nextPhaseId: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeedProposedEvent {
  export type InputTuple = [
    asset: AddressLike,
    denomination: AddressLike,
    proposedAggregator: AddressLike,
    currentAggregator: AddressLike,
    sender: AddressLike,
  ];
  export type OutputTuple = [
    asset: string,
    denomination: string,
    proposedAggregator: string,
    currentAggregator: string,
    sender: string,
  ];
  export interface OutputObject {
    asset: string;
    denomination: string;
    proposedAggregator: string;
    currentAggregator: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeedImplementationEvent {
  export type InputTuple = [feedImplementation: AddressLike];
  export type OutputTuple = [feedImplementation: string];
  export interface OutputObject {
    feedImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSwapFactoryEvent {
  export type InputTuple = [factory: AddressLike];
  export type OutputTuple = [factory: string];
  export interface OutputObject {
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUSDEvent {
  export type InputTuple = [usd: AddressLike];
  export type OutputTuple = [usd: string];
  export interface OutputObject {
    usd: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWETHEvent {
  export type InputTuple = [weth: AddressLike];
  export type OutputTuple = [weth: string];
  export interface OutputObject {
    weth: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface V2SwapFeedFactory extends BaseContract {
  connect(runner?: ContractRunner | null): V2SwapFeedFactory;
  waitForDeployment(): Promise<this>;

  interface: V2SwapFeedFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  USD: TypedContractMethod<[], [string], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  createFeed: TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;

  feedImplementation: TypedContractMethod<[], [string], "view">;

  feeds: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  initializeFactory: TypedContractMethod<
    [
      _initOwner: AddressLike,
      _feedImplementation: AddressLike,
      _swapFactory: AddressLike,
      _WETH: AddressLike,
      _USD: AddressLike,
    ],
    [void],
    "nonpayable"
  >;

  latestAnswer: TypedContractMethod<[_asset: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  phaseId: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFeedImplementation: TypedContractMethod<
    [_feedImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  setSwapFactory: TypedContractMethod<
    [_swapFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  setUSD: TypedContractMethod<[_USD: AddressLike], [void], "nonpayable">;

  setWETH: TypedContractMethod<[_WETH: AddressLike], [void], "nonpayable">;

  swapFactory: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "USD",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createFeed",
  ): TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feedImplementation",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeds",
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "initializeFactory",
  ): TypedContractMethod<
    [
      _initOwner: AddressLike,
      _feedImplementation: AddressLike,
      _swapFactory: AddressLike,
      _WETH: AddressLike,
      _USD: AddressLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "latestAnswer",
  ): TypedContractMethod<[_asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "phaseId",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership",
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeedImplementation",
  ): TypedContractMethod<
    [_feedImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSwapFactory",
  ): TypedContractMethod<[_swapFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUSD",
  ): TypedContractMethod<[_USD: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWETH",
  ): TypedContractMethod<[_WETH: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapFactory",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership",
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FeedConfirmed",
  ): TypedContractEvent<
    FeedConfirmedEvent.InputTuple,
    FeedConfirmedEvent.OutputTuple,
    FeedConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "FeedProposed",
  ): TypedContractEvent<
    FeedProposedEvent.InputTuple,
    FeedProposedEvent.OutputTuple,
    FeedProposedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized",
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred",
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetFeedImplementation",
  ): TypedContractEvent<
    SetFeedImplementationEvent.InputTuple,
    SetFeedImplementationEvent.OutputTuple,
    SetFeedImplementationEvent.OutputObject
  >;
  getEvent(
    key: "SetSwapFactory",
  ): TypedContractEvent<
    SetSwapFactoryEvent.InputTuple,
    SetSwapFactoryEvent.OutputTuple,
    SetSwapFactoryEvent.OutputObject
  >;
  getEvent(
    key: "SetUSD",
  ): TypedContractEvent<
    SetUSDEvent.InputTuple,
    SetUSDEvent.OutputTuple,
    SetUSDEvent.OutputObject
  >;
  getEvent(
    key: "SetWETH",
  ): TypedContractEvent<
    SetWETHEvent.InputTuple,
    SetWETHEvent.OutputTuple,
    SetWETHEvent.OutputObject
  >;

  filters: {
    "FeedConfirmed(address,address,address,address,uint16,address)": TypedContractEvent<
      FeedConfirmedEvent.InputTuple,
      FeedConfirmedEvent.OutputTuple,
      FeedConfirmedEvent.OutputObject
    >;
    FeedConfirmed: TypedContractEvent<
      FeedConfirmedEvent.InputTuple,
      FeedConfirmedEvent.OutputTuple,
      FeedConfirmedEvent.OutputObject
    >;

    "FeedProposed(address,address,address,address,address)": TypedContractEvent<
      FeedProposedEvent.InputTuple,
      FeedProposedEvent.OutputTuple,
      FeedProposedEvent.OutputObject
    >;
    FeedProposed: TypedContractEvent<
      FeedProposedEvent.InputTuple,
      FeedProposedEvent.OutputTuple,
      FeedProposedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetFeedImplementation(address)": TypedContractEvent<
      SetFeedImplementationEvent.InputTuple,
      SetFeedImplementationEvent.OutputTuple,
      SetFeedImplementationEvent.OutputObject
    >;
    SetFeedImplementation: TypedContractEvent<
      SetFeedImplementationEvent.InputTuple,
      SetFeedImplementationEvent.OutputTuple,
      SetFeedImplementationEvent.OutputObject
    >;

    "SetSwapFactory(address)": TypedContractEvent<
      SetSwapFactoryEvent.InputTuple,
      SetSwapFactoryEvent.OutputTuple,
      SetSwapFactoryEvent.OutputObject
    >;
    SetSwapFactory: TypedContractEvent<
      SetSwapFactoryEvent.InputTuple,
      SetSwapFactoryEvent.OutputTuple,
      SetSwapFactoryEvent.OutputObject
    >;

    "SetUSD(address)": TypedContractEvent<
      SetUSDEvent.InputTuple,
      SetUSDEvent.OutputTuple,
      SetUSDEvent.OutputObject
    >;
    SetUSD: TypedContractEvent<
      SetUSDEvent.InputTuple,
      SetUSDEvent.OutputTuple,
      SetUSDEvent.OutputObject
    >;

    "SetWETH(address)": TypedContractEvent<
      SetWETHEvent.InputTuple,
      SetWETHEvent.OutputTuple,
      SetWETHEvent.OutputObject
    >;
    SetWETH: TypedContractEvent<
      SetWETHEvent.InputTuple,
      SetWETHEvent.OutputTuple,
      SetWETHEvent.OutputObject
    >;
  };
}
