/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface V2SwapFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "USD"
      | "V2Price"
      | "WETH"
      | "asset"
      | "decimals"
      | "deploymentTimestamp"
      | "description"
      | "ethUsdPrice"
      | "feedImplementation"
      | "getLPTVL"
      | "getLPUSD"
      | "getPairByToken"
      | "getTokenUSD"
      | "initializeSwapFeed"
      | "latestAnswer"
      | "latestRound"
      | "latestTimestamp"
      | "swapFactory"
      | "version"
      | "wethUsdPair",
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AnswerUpdated"
      | "Initialized"
      | "NewAsset"
      | "NewDescription"
      | "NewRound",
  ): EventFragment;

  encodeFunctionData(functionFragment: "USD", values?: undefined): string;
  encodeFunctionData(functionFragment: "V2Price", values?: undefined): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploymentTimestamp",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "ethUsdPrice",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "feedImplementation",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "getLPTVL",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getLPUSD",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getPairByToken",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenUSD",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "initializeSwapFeed",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "latestAnswer",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestRound",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "latestTimestamp",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "swapFactory",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wethUsdPair",
    values?: undefined,
  ): string;

  decodeFunctionResult(functionFragment: "USD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "V2Price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploymentTimestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethUsdPrice",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "feedImplementation",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getLPTVL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLPUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairByToken",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenUSD",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeSwapFeed",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestAnswer",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRound",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTimestamp",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFactory",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethUsdPair",
    data: BytesLike,
  ): Result;
}

export namespace AnswerUpdatedEvent {
  export type InputTuple = [
    current: BigNumberish,
    roundId: BigNumberish,
    updatedAt: BigNumberish,
  ];
  export type OutputTuple = [
    current: bigint,
    roundId: bigint,
    updatedAt: bigint,
  ];
  export interface OutputObject {
    current: bigint;
    roundId: bigint;
    updatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAssetEvent {
  export type InputTuple = [asset: AddressLike];
  export type OutputTuple = [asset: string];
  export interface OutputObject {
    asset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDescriptionEvent {
  export type InputTuple = [description: string];
  export type OutputTuple = [description: string];
  export interface OutputObject {
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewRoundEvent {
  export type InputTuple = [
    roundId: BigNumberish,
    startedBy: AddressLike,
    startedAt: BigNumberish,
  ];
  export type OutputTuple = [
    roundId: bigint,
    startedBy: string,
    startedAt: bigint,
  ];
  export interface OutputObject {
    roundId: bigint;
    startedBy: string;
    startedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface V2SwapFeed extends BaseContract {
  connect(runner?: ContractRunner | null): V2SwapFeed;
  waitForDeployment(): Promise<this>;

  interface: V2SwapFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  USD: TypedContractMethod<[], [string], "view">;

  V2Price: TypedContractMethod<[], [bigint], "view">;

  WETH: TypedContractMethod<[], [string], "view">;

  asset: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deploymentTimestamp: TypedContractMethod<[], [bigint], "view">;

  description: TypedContractMethod<[], [string], "view">;

  ethUsdPrice: TypedContractMethod<[], [bigint], "view">;

  feedImplementation: TypedContractMethod<[], [string], "view">;

  getLPTVL: TypedContractMethod<[_pair: AddressLike], [bigint], "view">;

  getLPUSD: TypedContractMethod<[_pair: AddressLike], [bigint], "view">;

  getPairByToken: TypedContractMethod<
    [baseToken: AddressLike],
    [string],
    "view"
  >;

  getTokenUSD: TypedContractMethod<[baseToken: AddressLike], [bigint], "view">;

  initializeSwapFeed: TypedContractMethod<
    [
      _asset: AddressLike,
      _feedImplementation: AddressLike,
      _swapFactory: AddressLike,
      _WETH: AddressLike,
      _USD: AddressLike,
    ],
    [void],
    "nonpayable"
  >;

  latestAnswer: TypedContractMethod<[], [bigint], "view">;

  latestRound: TypedContractMethod<[], [bigint], "view">;

  latestTimestamp: TypedContractMethod<[], [bigint], "view">;

  swapFactory: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  wethUsdPair: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "USD",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "V2Price",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WETH",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "asset",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deploymentTimestamp",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "description",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ethUsdPrice",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feedImplementation",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLPTVL",
  ): TypedContractMethod<[_pair: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLPUSD",
  ): TypedContractMethod<[_pair: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPairByToken",
  ): TypedContractMethod<[baseToken: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenUSD",
  ): TypedContractMethod<[baseToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initializeSwapFeed",
  ): TypedContractMethod<
    [
      _asset: AddressLike,
      _feedImplementation: AddressLike,
      _swapFactory: AddressLike,
      _WETH: AddressLike,
      _USD: AddressLike,
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "latestAnswer",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestRound",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestTimestamp",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapFactory",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version",
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wethUsdPair",
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AnswerUpdated",
  ): TypedContractEvent<
    AnswerUpdatedEvent.InputTuple,
    AnswerUpdatedEvent.OutputTuple,
    AnswerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized",
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewAsset",
  ): TypedContractEvent<
    NewAssetEvent.InputTuple,
    NewAssetEvent.OutputTuple,
    NewAssetEvent.OutputObject
  >;
  getEvent(
    key: "NewDescription",
  ): TypedContractEvent<
    NewDescriptionEvent.InputTuple,
    NewDescriptionEvent.OutputTuple,
    NewDescriptionEvent.OutputObject
  >;
  getEvent(
    key: "NewRound",
  ): TypedContractEvent<
    NewRoundEvent.InputTuple,
    NewRoundEvent.OutputTuple,
    NewRoundEvent.OutputObject
  >;

  filters: {
    "AnswerUpdated(int256,uint256,uint256)": TypedContractEvent<
      AnswerUpdatedEvent.InputTuple,
      AnswerUpdatedEvent.OutputTuple,
      AnswerUpdatedEvent.OutputObject
    >;
    AnswerUpdated: TypedContractEvent<
      AnswerUpdatedEvent.InputTuple,
      AnswerUpdatedEvent.OutputTuple,
      AnswerUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewAsset(address)": TypedContractEvent<
      NewAssetEvent.InputTuple,
      NewAssetEvent.OutputTuple,
      NewAssetEvent.OutputObject
    >;
    NewAsset: TypedContractEvent<
      NewAssetEvent.InputTuple,
      NewAssetEvent.OutputTuple,
      NewAssetEvent.OutputObject
    >;

    "NewDescription(string)": TypedContractEvent<
      NewDescriptionEvent.InputTuple,
      NewDescriptionEvent.OutputTuple,
      NewDescriptionEvent.OutputObject
    >;
    NewDescription: TypedContractEvent<
      NewDescriptionEvent.InputTuple,
      NewDescriptionEvent.OutputTuple,
      NewDescriptionEvent.OutputObject
    >;

    "NewRound(uint256,address,uint256)": TypedContractEvent<
      NewRoundEvent.InputTuple,
      NewRoundEvent.OutputTuple,
      NewRoundEvent.OutputObject
    >;
    NewRound: TypedContractEvent<
      NewRoundEvent.InputTuple,
      NewRoundEvent.OutputTuple,
      NewRoundEvent.OutputObject
    >;
  };
}
