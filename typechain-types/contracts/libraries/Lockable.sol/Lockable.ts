/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common.js";

export interface LockableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LOCK_TYPEHASH"
      | "isLocked"
      | "isLockedUntil"
      | "lock"
      | "lockedUntil"
      | "supportsInterface",
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Lock" | "LockedBy"): EventFragment;

  encodeFunctionData(
    functionFragment: "LOCK_TYPEHASH",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "isLocked",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "isLockedUntil",
    values: [AddressLike, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: "lockedUntil",
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike],
  ): string;

  decodeFunctionResult(
    functionFragment: "LOCK_TYPEHASH",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLockedUntil",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedUntil",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike,
  ): Result;
}

export namespace LockEvent {
  export type InputTuple = [owner: AddressLike, lockUntil: BigNumberish];
  export type OutputTuple = [owner: string, lockUntil: bigint];
  export interface OutputObject {
    owner: string;
    lockUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockedByEvent {
  export type InputTuple = [
    owner: AddressLike,
    lockBy: AddressLike,
    lockUntil: BigNumberish,
  ];
  export type OutputTuple = [owner: string, lockBy: string, lockUntil: bigint];
  export interface OutputObject {
    owner: string;
    lockBy: string;
    lockUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Lockable extends BaseContract {
  connect(runner?: ContractRunner | null): Lockable;
  waitForDeployment(): Promise<this>;

  interface: LockableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  LOCK_TYPEHASH: TypedContractMethod<[], [string], "view">;

  isLocked: TypedContractMethod<[owner: AddressLike], [boolean], "view">;

  isLockedUntil: TypedContractMethod<
    [owner: AddressLike, until: BigNumberish],
    [boolean],
    "view"
  >;

  lock: TypedContractMethod<
    [until: BigNumberish, arg1: BytesLike],
    [void],
    "nonpayable"
  >;

  lockedUntil: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: "LOCK_TYPEHASH",
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isLocked",
  ): TypedContractMethod<[owner: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isLockedUntil",
  ): TypedContractMethod<
    [owner: AddressLike, until: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lock",
  ): TypedContractMethod<
    [until: BigNumberish, arg1: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockedUntil",
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface",
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "Lock",
  ): TypedContractEvent<
    LockEvent.InputTuple,
    LockEvent.OutputTuple,
    LockEvent.OutputObject
  >;
  getEvent(
    key: "LockedBy",
  ): TypedContractEvent<
    LockedByEvent.InputTuple,
    LockedByEvent.OutputTuple,
    LockedByEvent.OutputObject
  >;

  filters: {
    "Lock(address,uint48)": TypedContractEvent<
      LockEvent.InputTuple,
      LockEvent.OutputTuple,
      LockEvent.OutputObject
    >;
    Lock: TypedContractEvent<
      LockEvent.InputTuple,
      LockEvent.OutputTuple,
      LockEvent.OutputObject
    >;

    "LockedBy(address,address,uint48)": TypedContractEvent<
      LockedByEvent.InputTuple,
      LockedByEvent.OutputTuple,
      LockedByEvent.OutputObject
    >;
    LockedBy: TypedContractEvent<
      LockedByEvent.InputTuple,
      LockedByEvent.OutputTuple,
      LockedByEvent.OutputObject
    >;
  };
}
