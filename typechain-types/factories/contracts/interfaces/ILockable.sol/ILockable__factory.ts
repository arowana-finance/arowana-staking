/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ILockable,
  ILockableInterface,
} from "../../../../contracts/interfaces/ILockable.sol/ILockable.js";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "AccountLocked",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint48",
        name: "deadline",
        type: "uint48",
      },
    ],
    name: "LockedExpiredSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "LockedInvalidSigner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint48",
        name: "lockUntil",
        type: "uint48",
      },
    ],
    name: "Lock",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "lockBy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint48",
        name: "lockUntil",
        type: "uint48",
      },
    ],
    name: "LockedBy",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "isLocked",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint48",
        name: "until",
        type: "uint48",
      },
    ],
    name: "isLockedUntil",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint48",
        name: "until",
        type: "uint48",
      },
    ],
    name: "lock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "lockBy",
        type: "address",
      },
      {
        internalType: "uint48",
        name: "lockUntil",
        type: "uint48",
      },
      {
        internalType: "uint48",
        name: "deadline",
        type: "uint48",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "lockPermit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "lockedUntil",
    outputs: [
      {
        internalType: "uint48",
        name: "timestamp",
        type: "uint48",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ILockable__factory {
  static readonly abi = _abi;
  static createInterface(): ILockableInterface {
    return new Interface(_abi) as ILockableInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ILockable {
    return new Contract(address, _abi, runner) as unknown as ILockable;
  }
}
